/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 63);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var TAG = exports.TAG = 'tag';
var STRING = exports.STRING = 'string';
var SELECTOR = exports.SELECTOR = 'selector';
var ROOT = exports.ROOT = 'root';
var PSEUDO = exports.PSEUDO = 'pseudo';
var NESTING = exports.NESTING = 'nesting';
var ID = exports.ID = 'id';
var COMMENT = exports.COMMENT = 'comment';
var COMBINATOR = exports.COMBINATOR = 'combinator';
var CLASS = exports.CLASS = 'class';
var ATTRIBUTE = exports.ATTRIBUTE = 'attribute';
var UNIVERSAL = exports.UNIVERSAL = 'universal';

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return h; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createElement", function() { return h; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cloneElement", function() { return cloneElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rerender", function() { return rerender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "options", function() { return options; });
/** Virtual DOM Node */
function VNode() {}

/** Global options
 *	@public
 *	@namespace options {Object}
 */
var options = {

	/** If `true`, `prop` changes trigger synchronous component updates.
  *	@name syncComponentUpdates
  *	@type Boolean
  *	@default true
  */
	//syncComponentUpdates: true,

	/** Processes all created VNodes.
  *	@param {VNode} vnode	A newly-created VNode to normalize/process
  */
	//vnode(vnode) { }

	/** Hook invoked after a component is mounted. */
	// afterMount(component) { }

	/** Hook invoked after the DOM is updated with a component's latest render. */
	// afterUpdate(component) { }

	/** Hook invoked immediately before a component is unmounted. */
	// beforeUnmount(component) { }
};

var stack = [];

var EMPTY_CHILDREN = [];

/** JSX/hyperscript reviver
*	Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0
 *	@see http://jasonformat.com/wtf-is-jsx
 *	@public
 */
function h(nodeName, attributes) {
	var children = EMPTY_CHILDREN,
	    lastSimple,
	    child,
	    simple,
	    i;
	for (i = arguments.length; i-- > 2;) {
		stack.push(arguments[i]);
	}
	if (attributes && attributes.children != null) {
		if (!stack.length) stack.push(attributes.children);
		delete attributes.children;
	}
	while (stack.length) {
		if ((child = stack.pop()) && child.pop !== undefined) {
			for (i = child.length; i--;) {
				stack.push(child[i]);
			}
		} else {
			if (typeof child === 'boolean') child = null;

			if (simple = typeof nodeName !== 'function') {
				if (child == null) child = '';else if (typeof child === 'number') child = String(child);else if (typeof child !== 'string') simple = false;
			}

			if (simple && lastSimple) {
				children[children.length - 1] += child;
			} else if (children === EMPTY_CHILDREN) {
				children = [child];
			} else {
				children.push(child);
			}

			lastSimple = simple;
		}
	}

	var p = new VNode();
	p.nodeName = nodeName;
	p.children = children;
	p.attributes = attributes == null ? undefined : attributes;
	p.key = attributes == null ? undefined : attributes.key;

	// if a "vnode hook" is defined, pass every created VNode to it
	if (options.vnode !== undefined) options.vnode(p);

	return p;
}

/** Copy own-properties from `props` onto `obj`.
 *	@returns obj
 *	@private
 */
function extend(obj, props) {
  for (var i in props) {
    obj[i] = props[i];
  }return obj;
}

/** Call a function asynchronously, as soon as possible.
 *	@param {Function} callback
 */
var defer = typeof Promise == 'function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;

function cloneElement(vnode, props) {
	return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);
}

// DOM properties that should NOT have "px" added when numeric
var IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;

/** Managed queue of dirty components to be re-rendered */

var items = [];

function enqueueRender(component) {
	if (!component._dirty && (component._dirty = true) && items.push(component) == 1) {
		(options.debounceRendering || defer)(rerender);
	}
}

function rerender() {
	var p,
	    list = items;
	items = [];
	while (p = list.pop()) {
		if (p._dirty) renderComponent(p);
	}
}

/** Check if two nodes are equivalent.
 *	@param {Element} node
 *	@param {VNode} vnode
 *	@private
 */
function isSameNodeType(node, vnode, hydrating) {
	if (typeof vnode === 'string' || typeof vnode === 'number') {
		return node.splitText !== undefined;
	}
	if (typeof vnode.nodeName === 'string') {
		return !node._componentConstructor && isNamedNode(node, vnode.nodeName);
	}
	return hydrating || node._componentConstructor === vnode.nodeName;
}

/** Check if an Element has a given normalized name.
*	@param {Element} node
*	@param {String} nodeName
 */
function isNamedNode(node, nodeName) {
	return node.normalizedNodeName === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();
}

/**
 * Reconstruct Component-style `props` from a VNode.
 * Ensures default/fallback values from `defaultProps`:
 * Own-properties of `defaultProps` not present in `vnode.attributes` are added.
 * @param {VNode} vnode
 * @returns {Object} props
 */
function getNodeProps(vnode) {
	var props = extend({}, vnode.attributes);
	props.children = vnode.children;

	var defaultProps = vnode.nodeName.defaultProps;
	if (defaultProps !== undefined) {
		for (var i in defaultProps) {
			if (props[i] === undefined) {
				props[i] = defaultProps[i];
			}
		}
	}

	return props;
}

/** Create an element with the given nodeName.
 *	@param {String} nodeName
 *	@param {Boolean} [isSvg=false]	If `true`, creates an element within the SVG namespace.
 *	@returns {Element} node
 */
function createNode(nodeName, isSvg) {
	var node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);
	node.normalizedNodeName = nodeName;
	return node;
}

/** Remove a child node from its parent if attached.
 *	@param {Element} node		The node to remove
 */
function removeNode(node) {
	var parentNode = node.parentNode;
	if (parentNode) parentNode.removeChild(node);
}

/** Set a named attribute on the given Node, with special behavior for some names and event handlers.
 *	If `value` is `null`, the attribute/handler will be removed.
 *	@param {Element} node	An element to mutate
 *	@param {string} name	The name/key to set, such as an event or attribute name
 *	@param {any} old	The last value that was set for this name/node pair
 *	@param {any} value	An attribute value, such as a function to be used as an event handler
 *	@param {Boolean} isSvg	Are we currently diffing inside an svg?
 *	@private
 */
function setAccessor(node, name, old, value, isSvg) {
	if (name === 'className') name = 'class';

	if (name === 'key') {
		// ignore
	} else if (name === 'ref') {
		if (old) old(null);
		if (value) value(node);
	} else if (name === 'class' && !isSvg) {
		node.className = value || '';
	} else if (name === 'style') {
		if (!value || typeof value === 'string' || typeof old === 'string') {
			node.style.cssText = value || '';
		}
		if (value && typeof value === 'object') {
			if (typeof old !== 'string') {
				for (var i in old) {
					if (!(i in value)) node.style[i] = '';
				}
			}
			for (var i in value) {
				node.style[i] = typeof value[i] === 'number' && IS_NON_DIMENSIONAL.test(i) === false ? value[i] + 'px' : value[i];
			}
		}
	} else if (name === 'dangerouslySetInnerHTML') {
		if (value) node.innerHTML = value.__html || '';
	} else if (name[0] == 'o' && name[1] == 'n') {
		var useCapture = name !== (name = name.replace(/Capture$/, ''));
		name = name.toLowerCase().substring(2);
		if (value) {
			if (!old) node.addEventListener(name, eventProxy, useCapture);
		} else {
			node.removeEventListener(name, eventProxy, useCapture);
		}
		(node._listeners || (node._listeners = {}))[name] = value;
	} else if (name !== 'list' && name !== 'type' && !isSvg && name in node) {
		setProperty(node, name, value == null ? '' : value);
		if (value == null || value === false) node.removeAttribute(name);
	} else {
		var ns = isSvg && name !== (name = name.replace(/^xlink\:?/, ''));
		if (value == null || value === false) {
			if (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());else node.removeAttribute(name);
		} else if (typeof value !== 'function') {
			if (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);else node.setAttribute(name, value);
		}
	}
}

/** Attempt to set a DOM property to the given value.
 *	IE & FF throw for certain property-value combinations.
 */
function setProperty(node, name, value) {
	try {
		node[name] = value;
	} catch (e) {}
}

/** Proxy an event to hooked event handlers
 *	@private
 */
function eventProxy(e) {
	return this._listeners[e.type](options.event && options.event(e) || e);
}

/** Queue of components that have been mounted and are awaiting componentDidMount */
var mounts = [];

/** Diff recursion count, used to track the end of the diff cycle. */
var diffLevel = 0;

/** Global flag indicating if the diff is currently within an SVG */
var isSvgMode = false;

/** Global flag indicating if the diff is performing hydration */
var hydrating = false;

/** Invoke queued componentDidMount lifecycle methods */
function flushMounts() {
	var c;
	while (c = mounts.pop()) {
		if (options.afterMount) options.afterMount(c);
		if (c.componentDidMount) c.componentDidMount();
	}
}

/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.
 *	@param {Element} [dom=null]		A DOM node to mutate into the shape of the `vnode`
 *	@param {VNode} vnode			A VNode (with descendants forming a tree) representing the desired DOM structure
 *	@returns {Element} dom			The created/mutated element
 *	@private
 */
function diff(dom, vnode, context, mountAll, parent, componentRoot) {
	// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)
	if (!diffLevel++) {
		// when first starting the diff, check if we're diffing an SVG or within an SVG
		isSvgMode = parent != null && parent.ownerSVGElement !== undefined;

		// hydration is indicated by the existing element to be diffed not having a prop cache
		hydrating = dom != null && !('__preactattr_' in dom);
	}

	var ret = idiff(dom, vnode, context, mountAll, componentRoot);

	// append the element if its a new parent
	if (parent && ret.parentNode !== parent) parent.appendChild(ret);

	// diffLevel being reduced to 0 means we're exiting the diff
	if (! --diffLevel) {
		hydrating = false;
		// invoke queued componentDidMount lifecycle methods
		if (!componentRoot) flushMounts();
	}

	return ret;
}

/** Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing. */
function idiff(dom, vnode, context, mountAll, componentRoot) {
	var out = dom,
	    prevSvgMode = isSvgMode;

	// empty values (null, undefined, booleans) render as empty Text nodes
	if (vnode == null || typeof vnode === 'boolean') vnode = '';

	// Fast case: Strings & Numbers create/update Text nodes.
	if (typeof vnode === 'string' || typeof vnode === 'number') {

		// update if it's already a Text node:
		if (dom && dom.splitText !== undefined && dom.parentNode && (!dom._component || componentRoot)) {
			/* istanbul ignore if */ /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */
			if (dom.nodeValue != vnode) {
				dom.nodeValue = vnode;
			}
		} else {
			// it wasn't a Text node: replace it with one and recycle the old Element
			out = document.createTextNode(vnode);
			if (dom) {
				if (dom.parentNode) dom.parentNode.replaceChild(out, dom);
				recollectNodeTree(dom, true);
			}
		}

		out['__preactattr_'] = true;

		return out;
	}

	// If the VNode represents a Component, perform a component diff:
	var vnodeName = vnode.nodeName;
	if (typeof vnodeName === 'function') {
		return buildComponentFromVNode(dom, vnode, context, mountAll);
	}

	// Tracks entering and exiting SVG namespace when descending through the tree.
	isSvgMode = vnodeName === 'svg' ? true : vnodeName === 'foreignObject' ? false : isSvgMode;

	// If there's no existing element or it's the wrong type, create a new one:
	vnodeName = String(vnodeName);
	if (!dom || !isNamedNode(dom, vnodeName)) {
		out = createNode(vnodeName, isSvgMode);

		if (dom) {
			// move children into the replacement node
			while (dom.firstChild) {
				out.appendChild(dom.firstChild);
			} // if the previous Element was mounted into the DOM, replace it inline
			if (dom.parentNode) dom.parentNode.replaceChild(out, dom);

			// recycle the old element (skips non-Element node types)
			recollectNodeTree(dom, true);
		}
	}

	var fc = out.firstChild,
	    props = out['__preactattr_'],
	    vchildren = vnode.children;

	if (props == null) {
		props = out['__preactattr_'] = {};
		for (var a = out.attributes, i = a.length; i--;) {
			props[a[i].name] = a[i].value;
		}
	}

	// Optimization: fast-path for elements containing a single TextNode:
	if (!hydrating && vchildren && vchildren.length === 1 && typeof vchildren[0] === 'string' && fc != null && fc.splitText !== undefined && fc.nextSibling == null) {
		if (fc.nodeValue != vchildren[0]) {
			fc.nodeValue = vchildren[0];
		}
	}
	// otherwise, if there are existing or new children, diff them:
	else if (vchildren && vchildren.length || fc != null) {
			innerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML != null);
		}

	// Apply attributes/props from VNode to the DOM Element:
	diffAttributes(out, vnode.attributes, props);

	// restore previous SVG mode: (in case we're exiting an SVG namespace)
	isSvgMode = prevSvgMode;

	return out;
}

/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.
 *	@param {Element} dom			Element whose children should be compared & mutated
 *	@param {Array} vchildren		Array of VNodes to compare to `dom.childNodes`
 *	@param {Object} context			Implicitly descendant context object (from most recent `getChildContext()`)
 *	@param {Boolean} mountAll
 *	@param {Boolean} isHydrating	If `true`, consumes externally created elements similar to hydration
 */
function innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {
	var originalChildren = dom.childNodes,
	    children = [],
	    keyed = {},
	    keyedLen = 0,
	    min = 0,
	    len = originalChildren.length,
	    childrenLen = 0,
	    vlen = vchildren ? vchildren.length : 0,
	    j,
	    c,
	    f,
	    vchild,
	    child;

	// Build up a map of keyed children and an Array of unkeyed children:
	if (len !== 0) {
		for (var i = 0; i < len; i++) {
			var _child = originalChildren[i],
			    props = _child['__preactattr_'],
			    key = vlen && props ? _child._component ? _child._component.__key : props.key : null;
			if (key != null) {
				keyedLen++;
				keyed[key] = _child;
			} else if (props || (_child.splitText !== undefined ? isHydrating ? _child.nodeValue.trim() : true : isHydrating)) {
				children[childrenLen++] = _child;
			}
		}
	}

	if (vlen !== 0) {
		for (var i = 0; i < vlen; i++) {
			vchild = vchildren[i];
			child = null;

			// attempt to find a node based on key matching
			var key = vchild.key;
			if (key != null) {
				if (keyedLen && keyed[key] !== undefined) {
					child = keyed[key];
					keyed[key] = undefined;
					keyedLen--;
				}
			}
			// attempt to pluck a node of the same type from the existing children
			else if (!child && min < childrenLen) {
					for (j = min; j < childrenLen; j++) {
						if (children[j] !== undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {
							child = c;
							children[j] = undefined;
							if (j === childrenLen - 1) childrenLen--;
							if (j === min) min++;
							break;
						}
					}
				}

			// morph the matched/found/created DOM child to match vchild (deep)
			child = idiff(child, vchild, context, mountAll);

			f = originalChildren[i];
			if (child && child !== dom && child !== f) {
				if (f == null) {
					dom.appendChild(child);
				} else if (child === f.nextSibling) {
					removeNode(f);
				} else {
					dom.insertBefore(child, f);
				}
			}
		}
	}

	// remove unused keyed children:
	if (keyedLen) {
		for (var i in keyed) {
			if (keyed[i] !== undefined) recollectNodeTree(keyed[i], false);
		}
	}

	// remove orphaned unkeyed children:
	while (min <= childrenLen) {
		if ((child = children[childrenLen--]) !== undefined) recollectNodeTree(child, false);
	}
}

/** Recursively recycle (or just unmount) a node and its descendants.
 *	@param {Node} node						DOM node to start unmount/removal from
 *	@param {Boolean} [unmountOnly=false]	If `true`, only triggers unmount lifecycle, skips removal
 */
function recollectNodeTree(node, unmountOnly) {
	var component = node._component;
	if (component) {
		// if node is owned by a Component, unmount that component (ends up recursing back here)
		unmountComponent(component);
	} else {
		// If the node's VNode had a ref function, invoke it with null here.
		// (this is part of the React spec, and smart for unsetting references)
		if (node['__preactattr_'] != null && node['__preactattr_'].ref) node['__preactattr_'].ref(null);

		if (unmountOnly === false || node['__preactattr_'] == null) {
			removeNode(node);
		}

		removeChildren(node);
	}
}

/** Recollect/unmount all children.
 *	- we use .lastChild here because it causes less reflow than .firstChild
 *	- it's also cheaper than accessing the .childNodes Live NodeList
 */
function removeChildren(node) {
	node = node.lastChild;
	while (node) {
		var next = node.previousSibling;
		recollectNodeTree(node, true);
		node = next;
	}
}

/** Apply differences in attributes from a VNode to the given DOM Element.
 *	@param {Element} dom		Element with attributes to diff `attrs` against
 *	@param {Object} attrs		The desired end-state key-value attribute pairs
 *	@param {Object} old			Current/previous attributes (from previous VNode or element's prop cache)
 */
function diffAttributes(dom, attrs, old) {
	var name;

	// remove attributes no longer present on the vnode by setting them to undefined
	for (name in old) {
		if (!(attrs && attrs[name] != null) && old[name] != null) {
			setAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);
		}
	}

	// add new & update changed attributes
	for (name in attrs) {
		if (name !== 'children' && name !== 'innerHTML' && (!(name in old) || attrs[name] !== (name === 'value' || name === 'checked' ? dom[name] : old[name]))) {
			setAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);
		}
	}
}

/** Retains a pool of Components for re-use, keyed on component name.
 *	Note: since component names are not unique or even necessarily available, these are primarily a form of sharding.
 *	@private
 */
var components = {};

/** Reclaim a component for later re-use by the recycler. */
function collectComponent(component) {
	var name = component.constructor.name;
	(components[name] || (components[name] = [])).push(component);
}

/** Create a component. Normalizes differences between PFC's and classful Components. */
function createComponent(Ctor, props, context) {
	var list = components[Ctor.name],
	    inst;

	if (Ctor.prototype && Ctor.prototype.render) {
		inst = new Ctor(props, context);
		Component.call(inst, props, context);
	} else {
		inst = new Component(props, context);
		inst.constructor = Ctor;
		inst.render = doRender;
	}

	if (list) {
		for (var i = list.length; i--;) {
			if (list[i].constructor === Ctor) {
				inst.nextBase = list[i].nextBase;
				list.splice(i, 1);
				break;
			}
		}
	}
	return inst;
}

/** The `.render()` method for a PFC backing instance. */
function doRender(props, state, context) {
	return this.constructor(props, context);
}

/** Set a component's `props` (generally derived from JSX attributes).
 *	@param {Object} props
 *	@param {Object} [opts]
 *	@param {boolean} [opts.renderSync=false]	If `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.
 *	@param {boolean} [opts.render=true]			If `false`, no render will be triggered.
 */
function setComponentProps(component, props, opts, context, mountAll) {
	if (component._disable) return;
	component._disable = true;

	if (component.__ref = props.ref) delete props.ref;
	if (component.__key = props.key) delete props.key;

	if (!component.base || mountAll) {
		if (component.componentWillMount) component.componentWillMount();
	} else if (component.componentWillReceiveProps) {
		component.componentWillReceiveProps(props, context);
	}

	if (context && context !== component.context) {
		if (!component.prevContext) component.prevContext = component.context;
		component.context = context;
	}

	if (!component.prevProps) component.prevProps = component.props;
	component.props = props;

	component._disable = false;

	if (opts !== 0) {
		if (opts === 1 || options.syncComponentUpdates !== false || !component.base) {
			renderComponent(component, 1, mountAll);
		} else {
			enqueueRender(component);
		}
	}

	if (component.__ref) component.__ref(component);
}

/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.
 *	@param {Component} component
 *	@param {Object} [opts]
 *	@param {boolean} [opts.build=false]		If `true`, component will build and store a DOM node if not already associated with one.
 *	@private
 */
function renderComponent(component, opts, mountAll, isChild) {
	if (component._disable) return;

	var props = component.props,
	    state = component.state,
	    context = component.context,
	    previousProps = component.prevProps || props,
	    previousState = component.prevState || state,
	    previousContext = component.prevContext || context,
	    isUpdate = component.base,
	    nextBase = component.nextBase,
	    initialBase = isUpdate || nextBase,
	    initialChildComponent = component._component,
	    skip = false,
	    rendered,
	    inst,
	    cbase;

	// if updating
	if (isUpdate) {
		component.props = previousProps;
		component.state = previousState;
		component.context = previousContext;
		if (opts !== 2 && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === false) {
			skip = true;
		} else if (component.componentWillUpdate) {
			component.componentWillUpdate(props, state, context);
		}
		component.props = props;
		component.state = state;
		component.context = context;
	}

	component.prevProps = component.prevState = component.prevContext = component.nextBase = null;
	component._dirty = false;

	if (!skip) {
		rendered = component.render(props, state, context);

		// context to pass to the child, can be updated via (grand-)parent component
		if (component.getChildContext) {
			context = extend(extend({}, context), component.getChildContext());
		}

		var childComponent = rendered && rendered.nodeName,
		    toUnmount,
		    base;

		if (typeof childComponent === 'function') {
			// set up high order component link

			var childProps = getNodeProps(rendered);
			inst = initialChildComponent;

			if (inst && inst.constructor === childComponent && childProps.key == inst.__key) {
				setComponentProps(inst, childProps, 1, context, false);
			} else {
				toUnmount = inst;

				component._component = inst = createComponent(childComponent, childProps, context);
				inst.nextBase = inst.nextBase || nextBase;
				inst._parentComponent = component;
				setComponentProps(inst, childProps, 0, context, false);
				renderComponent(inst, 1, mountAll, true);
			}

			base = inst.base;
		} else {
			cbase = initialBase;

			// destroy high order component link
			toUnmount = initialChildComponent;
			if (toUnmount) {
				cbase = component._component = null;
			}

			if (initialBase || opts === 1) {
				if (cbase) cbase._component = null;
				base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);
			}
		}

		if (initialBase && base !== initialBase && inst !== initialChildComponent) {
			var baseParent = initialBase.parentNode;
			if (baseParent && base !== baseParent) {
				baseParent.replaceChild(base, initialBase);

				if (!toUnmount) {
					initialBase._component = null;
					recollectNodeTree(initialBase, false);
				}
			}
		}

		if (toUnmount) {
			unmountComponent(toUnmount);
		}

		component.base = base;
		if (base && !isChild) {
			var componentRef = component,
			    t = component;
			while (t = t._parentComponent) {
				(componentRef = t).base = base;
			}
			base._component = componentRef;
			base._componentConstructor = componentRef.constructor;
		}
	}

	if (!isUpdate || mountAll) {
		mounts.unshift(component);
	} else if (!skip) {
		// Ensure that pending componentDidMount() hooks of child components
		// are called before the componentDidUpdate() hook in the parent.
		// Note: disabled as it causes duplicate hooks, see https://github.com/developit/preact/issues/750
		// flushMounts();

		if (component.componentDidUpdate) {
			component.componentDidUpdate(previousProps, previousState, previousContext);
		}
		if (options.afterUpdate) options.afterUpdate(component);
	}

	if (component._renderCallbacks != null) {
		while (component._renderCallbacks.length) {
			component._renderCallbacks.pop().call(component);
		}
	}

	if (!diffLevel && !isChild) flushMounts();
}

/** Apply the Component referenced by a VNode to the DOM.
 *	@param {Element} dom	The DOM node to mutate
 *	@param {VNode} vnode	A Component-referencing VNode
 *	@returns {Element} dom	The created/mutated element
 *	@private
 */
function buildComponentFromVNode(dom, vnode, context, mountAll) {
	var c = dom && dom._component,
	    originalComponent = c,
	    oldDom = dom,
	    isDirectOwner = c && dom._componentConstructor === vnode.nodeName,
	    isOwner = isDirectOwner,
	    props = getNodeProps(vnode);
	while (c && !isOwner && (c = c._parentComponent)) {
		isOwner = c.constructor === vnode.nodeName;
	}

	if (c && isOwner && (!mountAll || c._component)) {
		setComponentProps(c, props, 3, context, mountAll);
		dom = c.base;
	} else {
		if (originalComponent && !isDirectOwner) {
			unmountComponent(originalComponent);
			dom = oldDom = null;
		}

		c = createComponent(vnode.nodeName, props, context);
		if (dom && !c.nextBase) {
			c.nextBase = dom;
			// passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L229:
			oldDom = null;
		}
		setComponentProps(c, props, 1, context, mountAll);
		dom = c.base;

		if (oldDom && dom !== oldDom) {
			oldDom._component = null;
			recollectNodeTree(oldDom, false);
		}
	}

	return dom;
}

/** Remove a component from the DOM and recycle it.
 *	@param {Component} component	The Component instance to unmount
 *	@private
 */
function unmountComponent(component) {
	if (options.beforeUnmount) options.beforeUnmount(component);

	var base = component.base;

	component._disable = true;

	if (component.componentWillUnmount) component.componentWillUnmount();

	component.base = null;

	// recursively tear down & recollect high-order component children:
	var inner = component._component;
	if (inner) {
		unmountComponent(inner);
	} else if (base) {
		if (base['__preactattr_'] && base['__preactattr_'].ref) base['__preactattr_'].ref(null);

		component.nextBase = base;

		removeNode(base);
		collectComponent(component);

		removeChildren(base);
	}

	if (component.__ref) component.__ref(null);
}

/** Base Component class.
 *	Provides `setState()` and `forceUpdate()`, which trigger rendering.
 *	@public
 *
 *	@example
 *	class MyFoo extends Component {
 *		render(props, state) {
 *			return <div />;
 *		}
 *	}
 */
function Component(props, context) {
	this._dirty = true;

	/** @public
  *	@type {object}
  */
	this.context = context;

	/** @public
  *	@type {object}
  */
	this.props = props;

	/** @public
  *	@type {object}
  */
	this.state = this.state || {};
}

extend(Component.prototype, {

	/** Returns a `boolean` indicating if the component should re-render when receiving the given `props` and `state`.
  *	@param {object} nextProps
  *	@param {object} nextState
  *	@param {object} nextContext
  *	@returns {Boolean} should the component re-render
  *	@name shouldComponentUpdate
  *	@function
  */

	/** Update component state by copying properties from `state` to `this.state`.
  *	@param {object} state		A hash of state properties to update with new values
  *	@param {function} callback	A function to be called once component state is updated
  */
	setState: function setState(state, callback) {
		var s = this.state;
		if (!this.prevState) this.prevState = extend({}, s);
		extend(s, typeof state === 'function' ? state(s, this.props) : state);
		if (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);
		enqueueRender(this);
	},


	/** Immediately perform a synchronous re-render of the component.
  *	@param {function} callback		A function to be called after component is re-rendered.
  *	@private
  */
	forceUpdate: function forceUpdate(callback) {
		if (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);
		renderComponent(this, 2);
	},


	/** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.
  *	Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).
  *	@param {object} props		Props (eg: JSX attributes) received from parent element/component
  *	@param {object} state		The component's current state
  *	@param {object} context		Context object (if a parent component has provided context)
  *	@returns VNode
  */
	render: function render() {}
});

/** Render JSX into a `parent` Element.
 *	@param {VNode} vnode		A (JSX) VNode to render
 *	@param {Element} parent		DOM element to render into
 *	@param {Element} [merge]	Attempt to re-use an existing DOM tree rooted at `merge`
 *	@public
 *
 *	@example
 *	// render a div into <body>:
 *	render(<div id="hello">hello!</div>, document.body);
 *
 *	@example
 *	// render a "Thing" component into #foo:
 *	const Thing = ({ name }) => <span>{ name }</span>;
 *	render(<Thing name="one" />, document.querySelector('#foo'));
 */
function render(vnode, parent, merge) {
  return diff(merge, vnode, {}, false, parent, false);
}

var preact = {
	h: h,
	createElement: h,
	cloneElement: cloneElement,
	Component: Component,
	render: render,
	rerender: rerender,
	options: options
};


/* harmony default export */ __webpack_exports__["default"] = (preact);
//# sourceMappingURL=preact.esm.js.map


/***/ }),
/* 2 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			var styleTarget = fn.call(this, selector);
			// Special case to return head of iframe instead of iframe itself
			if (styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[selector] = styleTarget;
		}
		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(122);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton) options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

const compatData = __webpack_require__(7)
const semverCompare = __webpack_require__(32)

const BrowserList = function () {
  this.browsers = Object.keys(compatData.browsers).reduce((browsers, browser) => {
    browsers[browser] = Object.keys(compatData.browsers[browser].releases)
      .sort(semverCompare)
      //.slice(-maxVersions)
      .reverse()

    return browsers
  }, {})

  this.browserNames = {
    chrome: 'Chrome',
    opera: 'Opera',
    firefox: 'Firefox',
    ie: 'IE',
    edge: 'Edge'
  }
}

BrowserList.prototype.get = function (handle) {
  return this.browsers[handle]
}

BrowserList.prototype.getName = function (handle) {
  return this.browserNames[handle]
}

BrowserList.prototype.list = function () {
  return Object.keys(this.browsers)
}

let instance

module.exports = (() => {
  if (!instance) {
    instance = new BrowserList()
  }

  return instance
})()


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__createStore__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__combineReducers__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bindActionCreators__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__applyMiddleware__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__compose__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_warning__ = __webpack_require__(30);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "createStore", function() { return __WEBPACK_IMPORTED_MODULE_0__createStore__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "combineReducers", function() { return __WEBPACK_IMPORTED_MODULE_1__combineReducers__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "bindActionCreators", function() { return __WEBPACK_IMPORTED_MODULE_2__bindActionCreators__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "applyMiddleware", function() { return __WEBPACK_IMPORTED_MODULE_3__applyMiddleware__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "compose", function() { return __WEBPACK_IMPORTED_MODULE_4__compose__["a"]; });







/*
* This is a dummy function to check if the function name has been altered by minification.
* If the function has been minified and NODE_ENV !== 'production', warn the user.
*/
function isCrushed() {}

if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  Object(__WEBPACK_IMPORTED_MODULE_5__utils_warning__["a" /* default */])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
}


/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(17)))

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Provider", function() { return Provider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connect", function() { return connect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectAdvanced", function() { return connectAdvanced; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_preact__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_redux__ = __webpack_require__(5);



var Children = {
	only: function only(children) {
		return children && children[0] || null;
	}
};

function proptype() {}
proptype.isRequired = proptype;

var PropTypes = {
	element: proptype,
	func: proptype,
	shape: function shape() {
		return proptype;
	},
	instanceOf: function instanceOf() {
		return proptype;
	}
};

var subscriptionShape = PropTypes.shape({
  trySubscribe: PropTypes.func.isRequired,
  tryUnsubscribe: PropTypes.func.isRequired,
  notifyNestedSubs: PropTypes.func.isRequired,
  isSubscribed: PropTypes.func.isRequired
});

var storeShape = PropTypes.shape({
  subscribe: PropTypes.func.isRequired,
  dispatch: PropTypes.func.isRequired,
  getState: PropTypes.func.isRequired
});

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */
  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};









var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var didWarnAboutReceivingStore = false;
function warnAboutReceivingStore() {
  if (didWarnAboutReceivingStore) {
    return;
  }
  didWarnAboutReceivingStore = true;

  warning('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
}

function createProvider() {
  var _Provider$childContex;

  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
  var subKey = arguments[1];

  var subscriptionKey = subKey || storeKey + 'Subscription';

  var Provider = function (_Component) {
    inherits(Provider, _Component);

    Provider.prototype.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;
    };

    function Provider(props, context) {
      classCallCheck(this, Provider);

      var _this = possibleConstructorReturn(this, _Component.call(this, props, context));

      _this[storeKey] = props.store;
      return _this;
    }

    Provider.prototype.render = function render() {
      return Children.only(this.props.children);
    };

    return Provider;
  }(__WEBPACK_IMPORTED_MODULE_0_preact__["Component"]);

  {
    Provider.prototype.componentWillReceiveProps = function (nextProps) {
      if (this[storeKey] !== nextProps.store) {
        warnAboutReceivingStore();
      }
    };
  }

  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = storeShape.isRequired, _Provider$childContex[subscriptionKey] = subscriptionShape, _Provider$childContex);

  return Provider;
}

var Provider = createProvider();

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};

var defineProperty$1 = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

var hoistNonReactStatics = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components

        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty$1(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }

        return targetComponent;
    }

    return targetComponent;
};

var invariant = function () {};

// encapsulates the subscription logic for connecting a component to the redux store, as
// well as nesting subscriptions of descendant components, so that we can ensure the
// ancestor components re-render before descendants

var CLEARED = null;
var nullListeners = {
  notify: function notify() {}
};

function createListenerCollection() {
  // the current/next pattern is copied from redux's createStore code.
  // TODO: refactor+expose that code to be reusable here?
  var current = [];
  var next = [];

  return {
    clear: function clear() {
      next = CLEARED;
      current = CLEARED;
    },
    notify: function notify() {
      var listeners = current = next;
      for (var i = 0; i < listeners.length; i++) {
        listeners[i]();
      }
    },
    get: function get$$1() {
      return next;
    },
    subscribe: function subscribe(listener) {
      var isSubscribed = true;
      if (next === current) next = current.slice();
      next.push(listener);

      return function unsubscribe() {
        if (!isSubscribed || current === CLEARED) return;
        isSubscribed = false;

        if (next === current) next = current.slice();
        next.splice(next.indexOf(listener), 1);
      };
    }
  };
}

var Subscription = function () {
  function Subscription(store, parentSub, onStateChange) {
    classCallCheck(this, Subscription);

    this.store = store;
    this.parentSub = parentSub;
    this.onStateChange = onStateChange;
    this.unsubscribe = null;
    this.listeners = nullListeners;
  }

  Subscription.prototype.addNestedSub = function addNestedSub(listener) {
    this.trySubscribe();
    return this.listeners.subscribe(listener);
  };

  Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {
    this.listeners.notify();
  };

  Subscription.prototype.isSubscribed = function isSubscribed() {
    return Boolean(this.unsubscribe);
  };

  Subscription.prototype.trySubscribe = function trySubscribe() {
    if (!this.unsubscribe) {
      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);

      this.listeners = createListenerCollection();
    }
  };

  Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
      this.listeners.clear();
      this.listeners = nullListeners;
    }
  };

  return Subscription;
}();

var hotReloadingVersion = 0;
var dummyState = {};
function noop() {}
function makeSelectorStateful(sourceSelector, store) {
  // wrap the selector in an object that tracks its results between runs.
  var selector = {
    run: function runComponentSelector(props) {
      try {
        var nextProps = sourceSelector(store.getState(), props);
        if (nextProps !== selector.props || selector.error) {
          selector.shouldComponentUpdate = true;
          selector.props = nextProps;
          selector.error = null;
        }
      } catch (error) {
        selector.shouldComponentUpdate = true;
        selector.error = error;
      }
    }
  };

  return selector;
}

function connectAdvanced(
/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/
selectorFactory) {
  var _contextTypes, _childContextTypes;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _ref$getDisplayName = _ref.getDisplayName,
      getDisplayName = _ref$getDisplayName === undefined ? function (name) {
    return 'ConnectAdvanced(' + name + ')';
  } : _ref$getDisplayName,
      _ref$methodName = _ref.methodName,
      methodName = _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,
      _ref$renderCountProp = _ref.renderCountProp,
      renderCountProp = _ref$renderCountProp === undefined ? undefined : _ref$renderCountProp,
      _ref$shouldHandleStat = _ref.shouldHandleStateChanges,
      shouldHandleStateChanges = _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,
      _ref$storeKey = _ref.storeKey,
      storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,
      _ref$withRef = _ref.withRef,
      withRef = _ref$withRef === undefined ? false : _ref$withRef,
      connectOptions = objectWithoutProperties(_ref, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);

  var subscriptionKey = storeKey + 'Subscription';
  var version = hotReloadingVersion++;

  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = storeShape, _contextTypes[subscriptionKey] = subscriptionShape, _contextTypes);
  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = subscriptionShape, _childContextTypes);

  return function wrapWithConnect(WrappedComponent) {
    invariant(typeof WrappedComponent == 'function', 'You must pass a component to the function returned by ' + ('connect. Instead received ' + JSON.stringify(WrappedComponent)));

    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';

    var displayName = getDisplayName(wrappedComponentName);

    var selectorFactoryOptions = _extends({}, connectOptions, {
      getDisplayName: getDisplayName,
      methodName: methodName,
      renderCountProp: renderCountProp,
      shouldHandleStateChanges: shouldHandleStateChanges,
      storeKey: storeKey,
      withRef: withRef,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent
    });

    var Connect = function (_Component) {
      inherits(Connect, _Component);

      function Connect(props, context) {
        classCallCheck(this, Connect);

        var _this = possibleConstructorReturn(this, _Component.call(this, props, context));

        _this.version = version;
        _this.state = {};
        _this.renderCount = 0;
        _this.store = props[storeKey] || context[storeKey];
        _this.propsMode = Boolean(props[storeKey]);
        _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);

        invariant(_this.store, 'Could not find "' + storeKey + '" in either the context or props of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + ('or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".'));

        _this.initSelector();
        _this.initSubscription();
        return _this;
      }

      Connect.prototype.getChildContext = function getChildContext() {
        var _ref2;

        // If this component received store from props, its subscription should be transparent
        // to any descendants receiving store+subscription from context; it passes along
        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows
        // Connect to control ordering of notifications to flow top-down.
        var subscription = this.propsMode ? null : this.subscription;
        return _ref2 = {}, _ref2[subscriptionKey] = subscription || this.context[subscriptionKey], _ref2;
      };

      Connect.prototype.componentDidMount = function componentDidMount() {
        if (!shouldHandleStateChanges) return;

        // componentWillMount fires during server side rendering, but componentDidMount and
        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.
        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.
        // To handle the case where a child component may have triggered a state change by
        // dispatching an action in its componentWillMount, we have to re-run the select and maybe
        // re-render.
        this.subscription.trySubscribe();
        this.selector.run(this.props);
        if (this.selector.shouldComponentUpdate) this.forceUpdate();
      };

      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        this.selector.run(nextProps);
      };

      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
        return this.selector.shouldComponentUpdate;
      };

      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.subscription) this.subscription.tryUnsubscribe();
        this.subscription = null;
        this.notifyNestedSubs = noop;
        this.store = null;
        this.selector.run = noop;
        this.selector.shouldComponentUpdate = false;
      };

      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
        invariant(withRef, 'To access the wrapped instance, you need to specify ' + ('{ withRef: true } in the options argument of the ' + methodName + '() call.'));
        return this.wrappedInstance;
      };

      Connect.prototype.setWrappedInstance = function setWrappedInstance(ref) {
        this.wrappedInstance = ref;
      };

      Connect.prototype.initSelector = function initSelector() {
        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
        this.selector = makeSelectorStateful(sourceSelector, this.store);
        this.selector.run(this.props);
      };

      Connect.prototype.initSubscription = function initSubscription() {
        if (!shouldHandleStateChanges) return;

        // parentSub's source should match where store came from: props vs. context. A component
        // connected to the store via props shouldn't use subscription from context, or vice versa.
        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
        this.subscription = new Subscription(this.store, parentSub, this.onStateChange.bind(this));

        // `notifyNestedSubs` is duplicated to handle the case where the component is  unmounted in
        // the middle of the notification loop, where `this.subscription` will then be null. An
        // extra null check every change can be avoided by copying the method onto `this` and then
        // replacing it with a no-op on unmount. This can probably be avoided if Subscription's
        // listeners logic is changed to not call listeners that have been unsubscribed in the
        // middle of the notification loop.
        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
      };

      Connect.prototype.onStateChange = function onStateChange() {
        this.selector.run(this.props);

        if (!this.selector.shouldComponentUpdate) {
          this.notifyNestedSubs();
        } else {
          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
          this.setState(dummyState);
        }
      };

      Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it
        // needs to notify nested subs. Once called, it unimplements itself until further state
        // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does
        // a boolean check every time avoids an extra method call most of the time, resulting
        // in some perf boost.
        this.componentDidUpdate = undefined;
        this.notifyNestedSubs();
      };

      Connect.prototype.isSubscribed = function isSubscribed() {
        return Boolean(this.subscription) && this.subscription.isSubscribed();
      };

      Connect.prototype.addExtraProps = function addExtraProps(props) {
        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props;
        // make a shallow copy so that fields added don't leak to the original selector.
        // this is especially important for 'ref' since that's a reference back to the component
        // instance. a singleton memoized selector would then be holding a reference to the
        // instance, preventing the instance from being garbage collected, and that would be bad
        var withExtras = _extends({}, props);
        if (withRef) withExtras.ref = this.setWrappedInstance;
        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
        return withExtras;
      };

      Connect.prototype.render = function render() {
        var selector = this.selector;
        selector.shouldComponentUpdate = false;

        if (selector.error) {
          throw selector.error;
        } else {
          return Object(__WEBPACK_IMPORTED_MODULE_0_preact__["h"])(WrappedComponent, this.addExtraProps(selector.props));
        }
      };

      return Connect;
    }(__WEBPACK_IMPORTED_MODULE_0_preact__["Component"]);

    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = displayName;
    Connect.childContextTypes = childContextTypes;
    Connect.contextTypes = contextTypes;


    {
      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
        var _this2 = this;

        // We are hot reloading!
        if (this.version !== version) {
          this.version = version;
          this.initSelector();

          // If any connected descendants don't hot reload (and resubscribe in the process), their
          // listeners will be lost when we unsubscribe. Unfortunately, by copying over all
          // listeners, this does mean that the old versions of connected descendants will still be
          // notified of state changes; however, their onStateChange function is a no-op so this
          // isn't a huge deal.
          var oldListeners = [];

          if (this.subscription) {
            oldListeners = this.subscription.listeners.get();
            this.subscription.tryUnsubscribe();
          }
          this.initSubscription();
          if (shouldHandleStateChanges) {
            this.subscription.trySubscribe();
            oldListeners.forEach(function (listener) {
              return _this2.subscription.listeners.subscribe(listener);
            });
          }
        }
      };
    }

    return hoistNonReactStatics(Connect, WrappedComponent);
  };
}

var hasOwn = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;

  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/** Detect free variable `global` from Node.js. */
var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Built-in value references. */
var _Symbol = root.Symbol;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$1.toString;

/** Built-in value references. */
var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$1.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$2.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]';
var undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
}

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype;
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

function verifyPlainObject(value, displayName, methodName) {
  if (!isPlainObject(value)) {
    warning(methodName + '() in ' + displayName + ' must return a plain object. Instead received ' + value + '.');
  }
}

function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);

    function constantSelector() {
      return constant;
    }
    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
// whether mapToProps needs to be invoked when props have changed.
// 
// A length of one signals that mapToProps does not depend on props from the parent component.
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
// therefore not reporting its length accurately..
function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
// this function wraps mapToProps in a proxy function which does several things:
// 
//  * Detects whether the mapToProps function being called depends on props, which
//    is used by selectorFactory to decide if it should reinvoke on props changes.
//    
//  * On first call, handles mapToProps if returns another function, and treats that
//    new function as the true mapToProps for subsequent calls.
//    
//  * On first call, verifies the first result is a plain object, in order to warn
//    the developer that their mapToProps function is not returning a valid result.
//    
function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;

    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };

    // allow detectFactoryAndVerify to get ownProps
    proxy.dependsOnOwnProps = true;

    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);

      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }

      verifyPlainObject(props, displayName, methodName);

      return props;
    };

    return proxy;
  };
}

function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}

function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {
    return { dispatch: dispatch };
  }) : undefined;
}

function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && (typeof mapDispatchToProps === 'undefined' ? 'undefined' : _typeof(mapDispatchToProps)) === 'object' ? wrapMapToPropsConstant(function (dispatch) {
    return Object(__WEBPACK_IMPORTED_MODULE_1_redux__["bindActionCreators"])(mapDispatchToProps, dispatch);
  }) : undefined;
}

var defaultMapDispatchToPropsFactories = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;
}

function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? wrapMapToPropsConstant(function () {
    return {};
  }) : undefined;
}

var defaultMapStateToPropsFactories = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return _extends({}, ownProps, stateProps, dispatchProps);
}

function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;

    var hasRunOnce = false;
    var mergedProps = void 0;

    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;

        verifyPlainObject(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}

function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}

function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}

var defaultMergePropsFactories = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error('Unexpected value for ' + methodName + ' in ' + displayName + '.');
  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
      warning('The selector for ' + methodName + ' of ' + displayName + ' did not specify a value for dependsOnOwnProps.');
    }
  }
}

function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
  verify(mapStateToProps, 'mapStateToProps', displayName);
  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
  verify(mergeProps, 'mergeProps', displayName);
}

function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}

function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual,
      areOwnPropsEqual = _ref.areOwnPropsEqual,
      areStatePropsEqual = _ref.areStatePropsEqual;

  var hasRunAtLeastOnce = false;
  var state = void 0;
  var ownProps = void 0;
  var stateProps = void 0;
  var dispatchProps = void 0;
  var mergedProps = void 0;

  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }

  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);

    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);

    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;

    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);

    return mergedProps;
  }

  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state);
    state = nextState;
    ownProps = nextOwnProps;

    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }

  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
}

// TODO: Add more comments

// If pure is true, the selector returned by selectorFactory will memoize its results,
// allowing connectAdvanced's shouldComponentUpdate to return false if final
// props have not changed. If false, the selector will always return a new
// object and shouldComponentUpdate will always return true.

function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps,
      initMapDispatchToProps = _ref2.initMapDispatchToProps,
      initMergeProps = _ref2.initMergeProps,
      options = objectWithoutProperties(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);

  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);

  {
    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
  }

  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;

  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }

  return function (dispatch, options) {
    throw new Error('Invalid value of type ' + (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) + ' for ' + name + ' argument when connecting component ' + options.wrappedComponentName + '.');
  };
}

function strictEqual(a, b) {
  return a === b;
}

// createConnect with default args builds the 'official' connect behavior. Calling it with
// different options opens up some testing and extensibility scenarios
function createConnect() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$connectHOC = _ref.connectHOC,
      connectHOC = _ref$connectHOC === undefined ? connectAdvanced : _ref$connectHOC,
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
      mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,
      mergePropsFactories = _ref$mergePropsFactor === undefined ? defaultMergePropsFactories : _ref$mergePropsFactor,
      _ref$selectorFactory = _ref.selectorFactory,
      selectorFactory = _ref$selectorFactory === undefined ? finalPropsSelectorFactory : _ref$selectorFactory;

  return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    var _ref2$pure = _ref2.pure,
        pure = _ref2$pure === undefined ? true : _ref2$pure,
        _ref2$areStatesEqual = _ref2.areStatesEqual,
        areStatesEqual = _ref2$areStatesEqual === undefined ? strictEqual : _ref2$areStatesEqual,
        _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,
        areOwnPropsEqual = _ref2$areOwnPropsEqua === undefined ? shallowEqual : _ref2$areOwnPropsEqua,
        _ref2$areStatePropsEq = _ref2.areStatePropsEqual,
        areStatePropsEqual = _ref2$areStatePropsEq === undefined ? shallowEqual : _ref2$areStatePropsEq,
        _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,
        areMergedPropsEqual = _ref2$areMergedPropsE === undefined ? shallowEqual : _ref2$areMergedPropsE,
        extraOptions = objectWithoutProperties(_ref2, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);

    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');

    return connectHOC(selectorFactory, _extends({
      // used in error messages
      methodName: 'connect',

      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return 'Connect(' + name + ')';
      },

      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),

      // passed through to selectorFactory
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      pure: pure,
      areStatesEqual: areStatesEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areStatePropsEqual: areStatePropsEqual,
      areMergedPropsEqual: areMergedPropsEqual

    }, extraOptions));
  };
}

var connect = createConnect();

var index = { Provider: Provider, connect: connect, connectAdvanced: connectAdvanced };

/* harmony default export */ __webpack_exports__["default"] = (index);
//# sourceMappingURL=preact-redux.esm.js.map

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(9)))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = {"browsers":{"chrome":{"releases":{"1":{"release_date":"2008-12-11","status":"retired"},"2":{"release_date":"2009-05-24","status":"retired"},"3":{"release_date":"2009-10-12","status":"retired"},"4":{"release_date":"2010-01-25","status":"retired"},"5":{"release_date":"2010-05-21","status":"retired"},"6":{"release_date":"2010-09-02","status":"retired"},"7":{"release_date":"2010-10-21","status":"retired"},"8":{"release_date":"2010-12-02","status":"retired"},"9":{"release_date":"2011-02-03","status":"retired"},"10":{"release_date":"2011-03-08","status":"retired"},"11":{"release_date":"2011-04-27","status":"retired"},"12":{"release_date":"2011-06-07","status":"retired"},"13":{"release_date":"2011-08-02","status":"retired"},"14":{"release_date":"2011-09-16","status":"retired"},"15":{"release_date":"2011-10-25","status":"retired"},"16":{"release_date":"2011-12-13","status":"retired"},"17":{"release_date":"2012-02-08","status":"retired"},"18":{"release_date":"2012-03-28","status":"retired"},"19":{"release_date":"2012-05-15","status":"retired"},"20":{"release_date":"2012-06-26","status":"retired"},"21":{"release_date":"2012-07-31","status":"retired"},"22":{"release_date":"2012-09-25","status":"retired"},"23":{"release_date":"2012-11-06","status":"retired"},"24":{"release_date":"2013-01-10","status":"retired"},"25":{"release_date":"2013-02-21","status":"retired"},"26":{"release_date":"2013-03-26","status":"retired"},"27":{"release_date":"2013-05-21","status":"retired"},"28":{"release_date":"2013-07-09","status":"retired"},"29":{"release_date":"2013-08-20","status":"retired"},"30":{"release_date":"2013-10-01","status":"retired"},"31":{"release_date":"2013-11-12","status":"retired"},"32":{"release_date":"2014-01-14","status":"retired"},"33":{"release_date":"2014-02-20","status":"retired"},"34":{"release_date":"2014-04-08","status":"retired"},"35":{"release_date":"2014-05-20","status":"retired"},"36":{"release_date":"2014-07-16","status":"retired"},"37":{"release_date":"2014-08-26","status":"retired"},"38":{"release_date":"2014-10-07","status":"retired"},"39":{"release_date":"2014-11-18","status":"retired"},"40":{"release_date":"2015-01-21","status":"retired"},"41":{"release_date":"2015-03-03","status":"retired"},"42":{"release_date":"2015-04-14","status":"retired"},"43":{"release_date":"2015-05-19","status":"retired"},"44":{"release_date":"2015-07-21","status":"retired"},"45":{"release_date":"2015-09-01","status":"retired"},"46":{"release_date":"2015-10-13","status":"retired"},"47":{"release_date":"2015-12-01","status":"retired"},"48":{"release_date":"2016-01-20","status":"retired"},"49":{"release_date":"2016-03-02","status":"retired"},"50":{"release_date":"2016-04-13","status":"retired"},"51":{"release_date":"2016-05-25","status":"retired"},"52":{"release_date":"2016-07-20","status":"retired"},"53":{"release_date":"2016-08-31","status":"retired"},"54":{"release_date":"2016-10-12","status":"retired"},"55":{"release_date":"2016-12-01","status":"retired"},"56":{"release_date":"2017-01-25","status":"retired"},"57":{"release_date":"2017-03-09","status":"retired"},"58":{"release_date":"2017-04-19","status":"retired"},"59":{"release_date":"2017-06-05","status":"retired"},"60":{"release_date":"2017-07-25","status":"retired"},"61":{"release_date":"2017-09-05","status":"retired"},"62":{"release_date":"2017-10-17","status":"current"},"63":{"status":"beta"},"64":{"status":"nightly"}}},"edge":{"releases":{"12":{"release_date":"2015-07-15","status":"retired"},"13":{"release_date":"2015-11-05","status":"retired"},"14":{"release_date":"2016-08-02","status":"retired"},"15":{"release_date":"2017-04-11","status":"current"},"16":{"status":"nightly"}}},"edge_mobile":{"releases":{"12":{"status":"retired"},"13":{"status":"retired"},"14":{"status":"retired"},"15":{"status":"current"},"16":{"status":"nightly"}}},"firefox":{"releases":{"1":{"release_date":"2004-11-09","release_notes":"http://website-archive.mozilla.org/www.mozilla.org/firefox_releasenotes/en-US/firefox/releases/1.0.html","status":"retired"},"2":{"release_date":"2006-10-24","release_notes":"https://developer.mozilla.org/Firefox/Releases/2","status":"retired"},"3":{"release_date":"2008-06-17","release_notes":"https://developer.mozilla.org/Firefox/Releases/3","status":"retired"},"4":{"release_date":"2011-03-22","release_notes":"https://developer.mozilla.org/Firefox/Releases/4","status":"retired"},"5":{"release_date":"2011-06-21","release_notes":"https://developer.mozilla.org/Firefox/Releases/5","status":"retired"},"6":{"release_date":"2011-08-16","release_notes":"https://developer.mozilla.org/Firefox/Releases/6","status":"retired"},"7":{"release_date":"2011-09-27","release_notes":"https://developer.mozilla.org/Firefox/Releases/7","status":"retired"},"8":{"release_date":"2011-11-08","release_notes":"https://developer.mozilla.org/Firefox/Releases/8","status":"retired"},"9":{"release_date":"2011-12-20","release_notes":"https://developer.mozilla.org/Firefox/Releases/9","status":"retired"},"10":{"release_date":"2012-01-31","release_notes":"https://developer.mozilla.org/Firefox/Releases/10","status":"retired"},"11":{"release_date":"2012-03-13","release_notes":"https://developer.mozilla.org/Firefox/Releases/11","status":"retired"},"12":{"release_date":"2012-04-24","release_notes":"https://developer.mozilla.org/Firefox/Releases/12","status":"retired"},"13":{"release_date":"2012-06-05","release_notes":"https://developer.mozilla.org/Firefox/Releases/13","status":"retired"},"14":{"release_date":"2012-07-17","release_notes":"https://developer.mozilla.org/Firefox/Releases/14","status":"retired"},"15":{"release_date":"2012-08-28","release_notes":"https://developer.mozilla.org/Firefox/Releases/15","status":"retired"},"16":{"release_date":"2012-10-09","release_notes":"https://developer.mozilla.org/Firefox/Releases/16","status":"retired"},"17":{"release_date":"2012-11-20","release_notes":"https://developer.mozilla.org/Firefox/Releases/17","status":"retired"},"18":{"release_date":"2013-01-08","release_notes":"https://developer.mozilla.org/Firefox/Releases/18","status":"retired"},"19":{"release_date":"2013-02-19","release_notes":"https://developer.mozilla.org/Firefox/Releases/19","status":"retired"},"20":{"release_date":"2013-04-02","release_notes":"https://developer.mozilla.org/Firefox/Releases/20","status":"retired"},"21":{"release_date":"2013-05-14","release_notes":"https://developer.mozilla.org/Firefox/Releases/21","status":"retired"},"22":{"release_date":"2013-06-25","release_notes":"https://developer.mozilla.org/Firefox/Releases/22","status":"retired"},"23":{"release_date":"2013-08-06","release_notes":"https://developer.mozilla.org/Firefox/Releases/23","status":"retired"},"24":{"release_date":"2013-09-17","release_notes":"https://developer.mozilla.org/Firefox/Releases/24","status":"retired"},"25":{"release_date":"2013-10-29","release_notes":"https://developer.mozilla.org/Firefox/Releases/25","status":"retired"},"26":{"release_date":"2013-12-10","release_notes":"https://developer.mozilla.org/Firefox/Releases/26","status":"retired"},"27":{"release_date":"2014-02-04","release_notes":"https://developer.mozilla.org/Firefox/Releases/27","status":"retired"},"28":{"release_date":"2014-03-18","release_notes":"https://developer.mozilla.org/Firefox/Releases/28","status":"retired"},"29":{"release_date":"2014-04-29","release_notes":"https://developer.mozilla.org/Firefox/Releases/29","status":"retired"},"30":{"release_date":"2014-06-10","release_notes":"https://developer.mozilla.org/Firefox/Releases/30","status":"retired"},"31":{"release_date":"2014-07-22","release_notes":"https://developer.mozilla.org/Firefox/Releases/31","status":"retired"},"32":{"release_date":"2014-09-02","release_notes":"https://developer.mozilla.org/Firefox/Releases/32","status":"retired"},"33":{"release_date":"2014-10-14","release_notes":"https://developer.mozilla.org/Firefox/Releases/33","status":"retired"},"34":{"release_date":"2014-12-01","release_notes":"https://developer.mozilla.org/Firefox/Releases/34","status":"retired"},"35":{"release_date":"2015-01-13","release_notes":"https://developer.mozilla.org/Firefox/Releases/35","status":"retired"},"36":{"release_date":"2015-02-24","release_notes":"https://developer.mozilla.org/Firefox/Releases/36","status":"retired"},"37":{"release_date":"2015-03-31","release_notes":"https://developer.mozilla.org/Firefox/Releases/37","status":"retired"},"38":{"release_date":"2015-05-12","release_notes":"https://developer.mozilla.org/Firefox/Releases/38","status":"retired"},"39":{"release_date":"2015-07-02","release_notes":"https://developer.mozilla.org/Firefox/Releases/39","status":"retired"},"40":{"release_date":"2015-08-11","release_notes":"https://developer.mozilla.org/Firefox/Releases/40","status":"retired"},"41":{"release_date":"2015-09-22","release_notes":"https://developer.mozilla.org/Firefox/Releases/41","status":"retired"},"42":{"release_date":"2015-11-03","release_notes":"https://developer.mozilla.org/Firefox/Releases/42","status":"retired"},"43":{"release_date":"2015-12-15","release_notes":"https://developer.mozilla.org/Firefox/Releases/43","status":"retired"},"44":{"release_date":"2016-01-26","release_notes":"https://developer.mozilla.org/Firefox/Releases/44","status":"retired"},"45":{"release_date":"2016-03-08","release_notes":"https://developer.mozilla.org/Firefox/Releases/45","status":"retired"},"46":{"release_date":"2016-04-26","release_notes":"https://developer.mozilla.org/Firefox/Releases/46","status":"retired"},"47":{"release_date":"2016-06-07","release_notes":"https://developer.mozilla.org/Firefox/Releases/47","status":"retired"},"48":{"release_date":"2016-08-02","release_notes":"https://developer.mozilla.org/Firefox/Releases/48","status":"retired"},"49":{"release_date":"2016-09-20","release_notes":"https://developer.mozilla.org/Firefox/Releases/49","status":"retired"},"50":{"release_date":"2016-11-15","release_notes":"https://developer.mozilla.org/Firefox/Releases/50","status":"retired"},"51":{"release_date":"2017-01-24","release_notes":"https://developer.mozilla.org/Firefox/Releases/51","status":"retired"},"52":{"release_date":"2017-03-07","release_notes":"https://developer.mozilla.org/Firefox/Releases/52","status":"esr"},"53":{"release_date":"2017-04-19","release_notes":"https://developer.mozilla.org/Firefox/Releases/53","status":"retired"},"54":{"release_date":"2017-06-13","release_notes":"https://developer.mozilla.org/Firefox/Releases/54","status":"retired"},"55":{"release_date":"2017-08-08","release_notes":"https://developer.mozilla.org/Firefox/Releases/55","status":"retired"},"56":{"release_date":"2017-09-28","release_notes":"https://developer.mozilla.org/Firefox/Releases/56","status":"retired"},"57":{"release_date":"2017-11-14","release_notes":"https://developer.mozilla.org/Firefox/Releases/57","status":"current"},"58":{"release_date":"2018-01-23","release_notes":"https://developer.mozilla.org/Firefox/Releases/58","status":"beta"},"59":{"release_date":"2018-03-13","release_notes":"https://developer.mozilla.org/Firefox/Releases/59","status":"nightly"},"60":{"release_date":"2018-05-08","release_notes":"https://developer.mozilla.org/Firefox/Releases/60","status":"planned"},"61":{"release_date":"2018-07-03","release_notes":"https://developer.mozilla.org/Firefox/Releases/61","status":"planned"},"62":{"release_date":"2018-08-28","release_notes":"https://developer.mozilla.org/Firefox/Releases/62","status":"planned"},"63":{"release_date":"2018-10-23","release_notes":"https://developer.mozilla.org/Firefox/Releases/63","status":"planned"},"64":{"release_date":"2018-11-27","release_notes":"https://developer.mozilla.org/Firefox/Releases/64","status":"planned"},"1.5":{"release_date":"2005-11-29","release_notes":"https://developer.mozilla.org/Firefox/Releases/1.5","status":"retired"},"3.5":{"release_date":"2009-06-30","release_notes":"https://developer.mozilla.org/Firefox/Releases/3.5","status":"retired"},"3.6":{"release_date":"2010-01-21","release_notes":"https://developer.mozilla.org/Firefox/Releases/3.6","status":"retired"},"3.6.9":{"release_date":"2010-09-07","release_notes":"https://website-archive.mozilla.org/www.mozilla.org/firefox_releasenotes/en-US/firefox/3.6.9/releasenotes/","status":"retired"},"50.0.1":{"release_date":"2016-11-28","status":"retired"}}},"firefox_android":{"releases":{"4":{"release_date":"2011-03-29","release_notes":"https://developer.mozilla.org/Firefox/Releases/4","status":"retired"},"5":{"release_date":"2011-06-21","release_notes":"https://developer.mozilla.org/Firefox/Releases/5","status":"retired"},"6":{"release_date":"2011-08-16","release_notes":"https://developer.mozilla.org/Firefox/Releases/6","status":"retired"},"7":{"release_date":"2011-09-27","release_notes":"https://developer.mozilla.org/Firefox/Releases/7","status":"retired"},"8":{"release_date":"2011-11-08","release_notes":"https://developer.mozilla.org/Firefox/Releases/8","status":"retired"},"9":{"release_date":"2011-12-21","release_notes":"https://developer.mozilla.org/Firefox/Releases/9","status":"retired"},"10":{"release_date":"2012-01-31","release_notes":"https://developer.mozilla.org/Firefox/Releases/10","status":"retired"},"14":{"release_date":"2012-06-26","release_notes":"https://developer.mozilla.org/Firefox/Releases/14","status":"retired"},"15":{"release_date":"2012-08-28","release_notes":"https://developer.mozilla.org/Firefox/Releases/15","status":"retired"},"16":{"release_date":"2012-10-09","release_notes":"https://developer.mozilla.org/Firefox/Releases/16","status":"retired"},"17":{"release_date":"2012-11-20","release_notes":"https://developer.mozilla.org/Firefox/Releases/17","status":"retired"},"18":{"release_date":"2013-01-08","release_notes":"https://developer.mozilla.org/Firefox/Releases/18","status":"retired"},"19":{"release_date":"2013-02-19","release_notes":"https://developer.mozilla.org/Firefox/Releases/19","status":"retired"},"20":{"release_date":"2013-04-02","release_notes":"https://developer.mozilla.org/Firefox/Releases/20","status":"retired"},"21":{"release_date":"2013-05-14","release_notes":"https://developer.mozilla.org/Firefox/Releases/21","status":"retired"},"22":{"release_date":"2013-06-25","release_notes":"https://developer.mozilla.org/Firefox/Releases/22","status":"retired"},"23":{"release_date":"2013-08-06","release_notes":"https://developer.mozilla.org/Firefox/Releases/23","status":"retired"},"24":{"release_date":"2013-09-17","release_notes":"https://developer.mozilla.org/Firefox/Releases/24","status":"retired"},"25":{"release_date":"2013-10-29","release_notes":"https://developer.mozilla.org/Firefox/Releases/25","status":"retired"},"26":{"release_date":"2013-12-10","release_notes":"https://developer.mozilla.org/Firefox/Releases/26","status":"retired"},"27":{"release_date":"2014-02-04","release_notes":"https://developer.mozilla.org/Firefox/Releases/27","status":"retired"},"28":{"release_date":"2014-03-18","release_notes":"https://developer.mozilla.org/Firefox/Releases/28","status":"retired"},"29":{"release_date":"2014-04-29","release_notes":"https://developer.mozilla.org/Firefox/Releases/29","status":"retired"},"30":{"release_date":"2014-06-10","release_notes":"https://developer.mozilla.org/Firefox/Releases/30","status":"retired"},"31":{"release_date":"2014-07-22","release_notes":"https://developer.mozilla.org/Firefox/Releases/31","status":"retired"},"32":{"release_date":"2014-09-02","release_notes":"https://developer.mozilla.org/Firefox/Releases/32","status":"retired"},"33":{"release_date":"2014-10-14","release_notes":"https://developer.mozilla.org/Firefox/Releases/33","status":"retired"},"34":{"release_date":"2014-12-01","release_notes":"https://developer.mozilla.org/Firefox/Releases/34","status":"retired"},"35":{"release_date":"2015-01-13","release_notes":"https://developer.mozilla.org/Firefox/Releases/35","status":"retired"},"36":{"release_date":"2015-02-27","release_notes":"https://developer.mozilla.org/Firefox/Releases/36","status":"retired"},"37":{"release_date":"2015-03-31","release_notes":"https://developer.mozilla.org/Firefox/Releases/37","status":"retired"},"38":{"release_date":"2015-05-12","release_notes":"https://developer.mozilla.org/Firefox/Releases/38","status":"retired"},"39":{"release_date":"2015-07-02","release_notes":"https://developer.mozilla.org/Firefox/Releases/39","status":"retired"},"40":{"release_date":"2015-08-11","release_notes":"https://developer.mozilla.org/Firefox/Releases/40","status":"retired"},"41":{"release_date":"2015-09-22","release_notes":"https://developer.mozilla.org/Firefox/Releases/41","status":"retired"},"42":{"release_date":"2015-11-03","release_notes":"https://developer.mozilla.org/Firefox/Releases/42","status":"retired"},"43":{"release_date":"2015-12-15","release_notes":"https://developer.mozilla.org/Firefox/Releases/43","status":"retired"},"44":{"release_date":"2016-01-26","release_notes":"https://developer.mozilla.org/Firefox/Releases/44","status":"retired"},"45":{"release_date":"2016-03-08","release_notes":"https://developer.mozilla.org/Firefox/Releases/45","status":"retired"},"46":{"release_date":"2016-04-26","release_notes":"https://developer.mozilla.org/Firefox/Releases/46","status":"retired"},"47":{"release_date":"2016-06-07","release_notes":"https://developer.mozilla.org/Firefox/Releases/47","status":"retired"},"48":{"release_date":"2016-08-02","release_notes":"https://developer.mozilla.org/Firefox/Releases/48","status":"retired"},"49":{"release_date":"2016-09-20","release_notes":"https://developer.mozilla.org/Firefox/Releases/49","status":"retired"},"50":{"release_date":"2016-11-15","release_notes":"https://developer.mozilla.org/Firefox/Releases/50","status":"retired"},"51":{"release_date":"2017-01-24","release_notes":"https://developer.mozilla.org/Firefox/Releases/51","status":"retired"},"52":{"release_date":"2017-03-07","release_notes":"https://developer.mozilla.org/Firefox/Releases/52","status":"esr"},"53":{"release_date":"2017-04-19","release_notes":"https://developer.mozilla.org/Firefox/Releases/53","status":"retired"},"54":{"release_date":"2017-06-13","release_notes":"https://developer.mozilla.org/Firefox/Releases/54","status":"retired"},"55":{"release_date":"2017-08-08","release_notes":"https://developer.mozilla.org/Firefox/Releases/55","status":"retired"},"56":{"release_date":"2017-09-28","release_notes":"https://developer.mozilla.org/Firefox/Releases/56","status":"retired"},"57":{"release_date":"2017-11-28","release_notes":"https://developer.mozilla.org/Firefox/Releases/57","status":"current"},"58":{"release_date":"2018-01-22","release_notes":"https://developer.mozilla.org/Firefox/Releases/58","status":"beta"},"59":{"release_date":"2018-03-13","release_notes":"https://developer.mozilla.org/Firefox/Releases/59","status":"nightly"},"60":{"release_date":"2018-05-08","release_notes":"https://developer.mozilla.org/Firefox/Releases/60","status":"planned"},"61":{"release_date":"2018-07-03","release_notes":"https://developer.mozilla.org/Firefox/Releases/61","status":"planned"},"62":{"release_date":"2018-08-28","release_notes":"https://developer.mozilla.org/Firefox/Releases/62","status":"planned"},"63":{"release_date":"2018-10-23","release_notes":"https://developer.mozilla.org/Firefox/Releases/63","status":"planned"},"64":{"release_date":"2018-11-27","release_notes":"https://developer.mozilla.org/Firefox/Releases/64","status":"planned"}}},"ie":{"releases":{"1":{"release_date":"1995-08-16","status":"retired"},"2":{"release_date":"1995-11-22","status":"retired"},"3":{"release_date":"1996-08-13","status":"retired"},"4":{"release_date":"1997-09-30","status":"retired"},"5":{"release_date":"1999-03-18","status":"retired"},"6":{"release_date":"2001-08-27","status":"retired"},"7":{"release_date":"2006-10-18","status":"retired"},"8":{"release_date":"2009-03-19","status":"retired"},"9":{"release_date":"2011-03-14","status":"retired"},"10":{"release_date":"2012-10-26","status":"retired"},"11":{"release_date":"2013-10-17","status":"current"},"1.5":{"status":"retired"},"5.5":{"release_date":"2000-07-06","status":"retired"}}},"nodejs":{"releases":{"4":{"release_date":"2015-09-08","status":"current"},"5":{"release_date":"2015-10-29","status":"retired"},"6":{"release_date":"2016-04-26","status":"current"},"7":{"release_date":"2016-10-25","status":"retired"},"8":{"release_date":"2017-05-30","status":"current"},"9":{"release_date":"2017-10-31","status":"current"},"10":{"status":"planned"},"0.10":{"release_date":"2013-03-11","status":"retired"},"0.12":{"release_date":"2015-02-06","status":"retired"}}},"opera":{"releases":{"2":{"release_date":"1996-07-14","status":"retired"},"3":{"release_date":"1997-12-01","status":"retired"},"4":{"release_date":"2000-06-28","status":"retired"},"5":{"release_date":"2000-12-06","status":"retired"},"6":{"release_date":"2001-12-18","status":"retired"},"7":{"release_date":"2003-01-28","status":"retired"},"8":{"release_date":"2005-04-19","status":"retired"},"9":{"release_date":"2006-06-20","status":"retired"},"10":{"release_date":"2009-09-01","status":"retired"},"11":{"release_date":"2010-12-16","status":"retired"},"12":{"release_date":"2012-06-14","status":"retired"},"15":{"release_date":"2013-07-02","status":"retired"},"16":{"release_date":"2013-08-27","status":"retired"},"17":{"release_date":"2013-10-08","status":"retired"},"18":{"release_date":"2013-11-19","status":"retired"},"19":{"release_date":"2014-01-28","release_notes":"https://dev.opera.com/blog/opera-19/","status":"retired"},"20":{"release_date":"2014-03-04","release_notes":"https://dev.opera.com/blog/opera-20/","status":"retired"},"21":{"release_date":"2014-05-06","release_notes":"https://dev.opera.com/blog/opera-21/","status":"retired"},"22":{"release_date":"2014-06-03","release_notes":"https://dev.opera.com/blog/opera-22/","status":"retired"},"23":{"release_date":"2014-07-22","release_notes":"https://dev.opera.com/blog/opera-23/","status":"retired"},"24":{"release_date":"2014-09-02","release_notes":"https://dev.opera.com/blog/opera-24/","status":"retired"},"25":{"release_date":"2014-10-15","release_notes":"https://dev.opera.com/blog/opera-25/","status":"retired"},"26":{"release_date":"2014-12-03","release_notes":"https://dev.opera.com/blog/opera-26/","status":"retired"},"27":{"release_date":"2015-01-27","release_notes":"https://dev.opera.com/blog/opera-27/","status":"retired"},"28":{"release_date":"2015-03-10","release_notes":"https://dev.opera.com/blog/opera-28/","status":"retired"},"29":{"release_date":"2015-04-28","release_notes":"https://dev.opera.com/blog/opera-29/","status":"retired"},"30":{"release_date":"2015-06-09","release_notes":"https://dev.opera.com/blog/opera-30/","status":"retired"},"31":{"release_date":"2015-08-04","release_notes":"https://dev.opera.com/blog/opera-31/","status":"retired"},"32":{"release_date":"2015-09-15","release_notes":"https://dev.opera.com/blog/opera-32/","status":"retired"},"33":{"release_date":"2015-10-27","release_notes":"https://dev.opera.com/blog/opera-33/","status":"retired"},"34":{"release_date":"2015-12-08","release_notes":"https://dev.opera.com/blog/opera-34/","status":"retired"},"35":{"release_date":"2016-02-02","release_notes":"https://dev.opera.com/blog/opera-35/","status":"retired"},"36":{"release_date":"2016-03-15","release_notes":"https://dev.opera.com/blog/opera-36/","status":"retired"},"37":{"release_date":"2016-05-04","release_notes":"https://dev.opera.com/blog/opera-37/","status":"retired"},"38":{"release_date":"2016-06-08","release_notes":"https://dev.opera.com/blog/opera-38/","status":"retired"},"39":{"release_date":"2016-08-02","release_notes":"https://dev.opera.com/blog/opera-39/","status":"retired"},"40":{"release_date":"2016-09-20","release_notes":"https://dev.opera.com/blog/opera-40/","status":"retired"},"41":{"release_date":"2016-10-25","release_notes":"https://dev.opera.com/blog/opera-41/","status":"retired"},"42":{"release_date":"2016-12-13","release_notes":"https://dev.opera.com/blog/opera-42/","status":"retired"},"43":{"release_date":"2017-02-07","release_notes":"https://dev.opera.com/blog/opera-43/","status":"retired"},"44":{"release_date":"2017-03-21","release_notes":"https://dev.opera.com/blog/opera-44/","status":"retired"},"45":{"release_date":"2017-05-10","release_notes":"https://dev.opera.com/blog/opera-45/","status":"retired"},"46":{"release_date":"2017-06-22","release_notes":"https://dev.opera.com/blog/opera-46/","status":"retired"},"47":{"release_date":"2017-08-09","release_notes":"https://dev.opera.com/blog/opera-47/","status":"retired"},"48":{"release_date":"2017-09-27","status":"retired"},"49":{"release_date":"2017-11-08","release_notes":"https://dev.opera.com/blog/opera-49/","status":"current"},"50":{"status":"planned"},"51":{"status":"planned"},"3.5":{"release_date":"1998-11-18","status":"retired"},"3.6":{"release_date":"1999-05-06","status":"retired"},"5.1":{"release_date":"2001-04-10","status":"retired"},"7.1":{"release_date":"2003-04-11","status":"retired"},"7.2":{"release_date":"2003-09-23","status":"retired"},"7.5":{"release_date":"2004-05-12","status":"retired"},"8.5":{"release_date":"2005-09-20","status":"retired"},"9.1":{"release_date":"2006-12-18","status":"retired"},"9.2":{"release_date":"2007-04-11","status":"retired"},"9.5":{"release_date":"2008-06-12","status":"retired"},"9.6":{"release_date":"2008-10-08","status":"retired"},"10.1":{"release_date":"2009-11-23","status":"retired"},"10.5":{"release_date":"2010-03-02","status":"retired"},"10.6":{"release_date":"2010-07-01","status":"retired"},"11.1":{"release_date":"2011-04-12","status":"retired"},"11.5":{"release_date":"2011-06-28","status":"retired"},"11.6":{"release_date":"2011-12-06","status":"retired"},"12.1":{"release_date":"2012-11-20","status":"retired"}}},"safari":{"releases":{"1":{"release_date":"2003-06-23","status":"retired"},"2":{"release_date":"2005-04-29","status":"retired"},"3":{"release_date":"2007-11-14","status":"retired"},"4":{"release_date":"2009-06-08","release_notes":"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_4_0.html","status":"retired"},"5":{"release_date":"2010-06-07","status":"retired"},"6":{"release_date":"2012-07-25","release_notes":"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_6_0.html","status":"retired"},"7":{"release_date":"2013-10-22","release_notes":"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_7_0.html","status":"retired"},"8":{"release_date":"2014-10-16","release_notes":"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_8_0.html","status":"retired"},"9":{"release_date":"2015-09-30","release_notes":"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_0.html","status":"retired"},"10":{"release_date":"2016-09-20","release_notes":"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html","status":"retired"},"11":{"release_date":"2017-09-19","release_notes":"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Safari_11_0/Safari_11_0.html","status":"current"},"1.1":{"release_date":"2003-10-24","status":"retired"},"1.2":{"release_date":"2004-02-02","status":"retired"},"1.3":{"release_date":"2005-04-15","status":"retired"},"3.1":{"release_date":"2008-03-18","status":"retired"},"3.2":{"release_date":"2008-11-13","status":"retired"},"4.1":{"release_date":"2010-06-07","status":"retired"},"5.1":{"release_date":"2011-07-20","status":"retired"},"6.1":{"release_date":"2013-06-11","status":"retired"},"9.1":{"release_date":"2016-03-21","release_notes":"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_1.html","status":"retired"},"10.1":{"release_date":"2017-03-27","release_notes":"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_1.html","status":"retired"}}},"samsunginternet_android":{"releases":{"1.0":{"release_date":"2013-04-27","status":"retired"},"1.5":{"release_date":"2013-09-25","status":"retired"},"1.6":{"release_date":"2014-04-11","status":"retired"},"2.0":{"release_date":"2014-10-17","status":"retired"},"2.1":{"release_date":"2015-01-07","status":"retired"},"3.0":{"release_date":"2015-04-10","status":"retired"},"3.2":{"release_date":"2015-08-24","status":"retired"},"4.0":{"release_date":"2016-03-11","status":"retired"},"4.2":{"release_date":"2016-08-02","status":"retired"},"5.0":{"release_date":"2016-12-15","status":"retired"},"5.2":{"release_date":"2017-04-21","status":"retired"},"5.4":{"release_date":"2017-05-17","status":"retired"},"6.0":{"release_date":"2017-08-23","status":"retired"},"6.2":{"release_date":"2017-10-26","status":"current"}}}},"css":{"at-rules":{"@counter-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@counter-style","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":"33"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"additive-symbols":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@counter-style/additive-symbols","description":"<code>additive-symbols</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":"33"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"fallback":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@counter-style/fallback","description":"<code>fallback</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":"33"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"negative":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@counter-style/negative","description":"<code>negative</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":"33"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"pad":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@counter-style/pad","description":"<code>pad</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":"33"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"prefix":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@counter-style/prefix","description":"<code>prefix</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":"33"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"range":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@counter-style/range","description":"<code>range</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":"33"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"speak-as":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@counter-style/speak-as","description":"<code>speak-as</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":"33"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"suffix":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@counter-style/suffix","description":"<code>suffix</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":"33"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"symbols":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@counter-style/symbols","description":"<code>symbols</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":"33"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"system":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@counter-style/system","description":"<code>system</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":"33"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"font-face":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-face","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"4"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"10"},"opera_android":{"version_added":"10"},"safari":{"version_added":"3.1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"WOFF":{"__compat":{"description":"WOFF","support":{"webview_android":{"version_added":"4.4"},"chrome":{"version_added":"6"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"11.1"},"opera_android":{"version_added":"11"},"safari":{"version_added":"5.1"},"safari_ios":{"version_added":"5"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"WOFF_2":{"__compat":{"description":"WOFF 2","support":{"webview_android":{"version_added":"36"},"chrome":{"version_added":"36"},"chrome_android":{"version_added":"36"},"edge":{"version_added":"14"},"edge_mobile":{"version_added":"14"},"firefox":[{"version_added":"39"},{"version_added":"35","flag":{"type":"preference","name":"gfx.downloadable_fonts.woff2.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"39"},{"version_added":"35","flag":{"type":"preference","name":"gfx.downloadable_fonts.woff2.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"23"},"opera_android":{"version_added":"23"},"safari":{"version_added":"10","notes":"Supported only on macOS 10.12 (Sierra) and later."},"safari_ios":{"version_added":"10"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"SVG_fonts":{"__compat":{"description":"SVG fonts","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":false,"deprecated":true}}},"font-display":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-face/font-display","support":{"webview_android":{"version_added":"60"},"chrome":{"version_added":"60"},"chrome_android":{"version_added":"60"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"58"},"firefox_android":{"version_added":"58"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"47"},"opera_android":{"version_added":"47"},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font-family":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-face/font-family","support":{"webview_android":{"version_added":"2.2"},"chrome":{"version_added":"4"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"6"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"9"},"opera_android":{"version_added":"12"},"safari":{"version_added":"3.1"},"safari_ios":{"version_added":"3.1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font-feature-settings":{"__compat":{"support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34","notes":["The <a href='http://mpeg.chiariglione.org/standards/mpeg-4/open-font-format/text-isoiec-cd-14496-22-3rd-edition' >ISO/IEC CD 14496-22 3rd edition</a> suggests using the <code>ssty</code> feature to provide glyph variants more suitable for use in scripts (for example primes used as superscripts). Starting with Firefox 29, this is done automatically by the <a href='https://developer.mozilla.org/docs/Web/MathML'>MathML</a> rendering engine. The ISO/IEC CD 14496-22 3rd edition also suggests applying the <code>dtls</code> feature to letters when placing mathematical accents to get dotless forms (for example dotless i, j with a hat). Starting with Firefox 35, this is done automatically by the MathML rendering engine. You can override the default values determined by the MathML rendering engine with CSS."]},{"prefix":"-moz-","version_added":"15","notes":"From Firefox 4 to Firefox 14 (inclusive), Firefox supported an older, slightly different syntax. See <a href='http://hacks.mozilla.org/2010/11/firefox-4-font-feature-support/'>OpenType Font Feature support in Firefox 4</a>."}],"firefox_android":[{"version_added":"34","notes":["The <a href='http://mpeg.chiariglione.org/standards/mpeg-4/open-font-format/text-isoiec-cd-14496-22-3rd-edition' >ISO/IEC CD 14496-22 3rd edition</a> suggests using the <code>ssty</code> feature to provide glyph variants more suitable for use in scripts (for example primes used as superscripts). Starting with Firefox 29, this is done automatically by the <a href='https://developer.mozilla.org/docs/Web/MathML'>MathML</a> rendering engine. The ISO/IEC CD 14496-22 3rd edition also suggests applying the <code>dtls</code> feature to letters when placing mathematical accents to get dotless forms (for example dotless i, j with a hat). Starting with Firefox 35, this is done automatically by the MathML rendering engine. You can override the default values determined by the MathML rendering engine with CSS."]},{"prefix":"-moz-","version_added":"15","notes":"From Firefox 4 to Firefox 14 (inclusive), Firefox supported an older, slightly different syntax. See <a href='http://hacks.mozilla.org/2010/11/firefox-4-font-feature-support/'>OpenType Font Feature support in Firefox 4</a>."}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-face/font-style","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"4"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":null},"opera":{"version_added":"10"},"opera_android":{"version_added":"10"},"safari":{"version_added":"3.1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font-weight":{"__compat":{"support":{"webview_android":{"version_added":true},"chrome":{"version_added":"4"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"10"},"opera_android":{"version_added":"10"},"safari":{"version_added":"3.1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"src":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-face/src","support":{"webview_android":{"version_added":"2.2"},"chrome":{"version_added":"4"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"6"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"9"},"opera_android":{"version_added":"12"},"safari":{"version_added":"3.1"},"safari_ios":{"version_added":"3.1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"unicode-range":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-face/unicode-range","support":{"webview_android":{"version_added":null},"chrome":{"version_added":true},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"36"},"firefox_android":{"version_added":"36"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":null},"opera":{"version_added":true},"opera_android":{"version_added":null},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"font-feature-values":{"__compat":{"description":"<code>@font-feature-values</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-feature-values","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9.1"},"safari_ios":{"version_added":"9.3"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}},"annotation":{"__compat":{"description":"<code>@annotation</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-feature-values#@annotation","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9.1"},"safari_ios":{"version_added":"9.3"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"character-variant":{"__compat":{"description":"<code>@character-variant</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-feature-values#@character-variant","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9.1"},"safari_ios":{"version_added":"9.3"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"historical-forms":{"__compat":{"description":"<code>@historical-forms</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9.1"},"safari_ios":{"version_added":"9.3"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"ornaments":{"__compat":{"description":"<code>@ornaments</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-feature-values#@ornaments","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9.1"},"safari_ios":{"version_added":"9.3"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"styleset":{"__compat":{"description":"<code>@styleset</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-feature-values#@styleset","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9.1"},"safari_ios":{"version_added":"9.3"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"stylistic":{"__compat":{"description":"<code>@stylistic</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-feature-values#@stylistic","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9.1"},"safari_ios":{"version_added":"9.3"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"swash":{"__compat":{"description":"<code>@swash</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@font-feature-values#@swash","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9.1"},"safari_ios":{"version_added":"9.3"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"keyframes":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/@keyframes","support":{"webview_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"16","notes":"<code>@keyframes</code> is unsupported in scoped stylesheets in Firefox (<a href='https://bugzil.la/830056'>bug 830056</a>)."},{"version_added":"49","prefix":"-webkit-"},{"version_added":"44","prefix":"-webkit-","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"firefox_android":[{"version_added":"16"},{"version_added":"49","prefix":"-webkit-"},{"version_added":"44","prefix":"-webkit-","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"opera_android":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"safari":[{"version_added":"9"},{"prefix":"-webkit-","version_added":"4"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"ignore_important_declarations":{"__compat":{"description":"Ignore <code>!important</code> declarations","support":{"webview_android":{"version_added":null},"chrome":{"version_added":null},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"19"},"firefox_android":{"version_added":"19"},"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}}},"properties":{"animation-delay":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/animation-delay","support":{"webview_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16","notes":"Before Firefox 57, Firefox does not repaint elements outside the viewport that are animated into the viewport with a delay. This bug affects only some platforms, such as Windows."},{"version_added":"49","prefix":"-webkit-"},{"version_added":"44","prefix":"-webkit-","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"firefox_android":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"opera_android":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"safari":[{"version_added":"9"},{"prefix":"-webkit-","version_added":"4"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"animation-direction":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/animation-direction","support":{"webview_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"version_added":"49","prefix":"-webkit-"},{"version_added":"44","prefix":"-webkit-","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"firefox_android":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"opera_android":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"4"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"reverse":{"__compat":{"description":"<code>reverse</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":"19"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"16"},"firefox_android":{"version_added":"16"},"ie":{"version_added":"10"},"opera":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"alternate-reverse":{"__compat":{"description":"<code>alternate-reverse</code>","support":{"chrome":{"version_added":"19"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"16"},"firefox_android":{"version_added":"16"},"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"safari":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"animation-duration":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/animation-duration","support":{"webview_android":[{"version_added":true},{"prefix":"-webkit-","version_added":"2"}],"chrome":[{"version_added":"43"},{"prefix":"-webkit-","version_added":"3"}],"chrome_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"version_added":"49","prefix":"-webkit-"},{"version_added":"44","prefix":"-webkit-","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"firefox_android":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"opera_android":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"safari":{"prefix":"-webkit-","version_added":"4"},"safari_ios":{"prefix":"-webkit-","version_added":"4.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"animation-fill-mode":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode","support":{"webview_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"version_added":"49","prefix":"-webkit-"},{"version_added":"44","prefix":"-webkit-","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"firefox_android":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"opera_android":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"4"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"animation-iteration-count":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count","support":{"webview_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"version_added":"49","prefix":"-webkit-"},{"version_added":"44","prefix":"-webkit-","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"firefox_android":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"opera_android":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"4"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"animation-name":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/animation-name","support":{"webview_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"firefox_android":[{"version_added":"16"},{"version_added":"49","prefix":"-webkit-"},{"version_added":"44","prefix":"-webkit-","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"opera_android":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"4"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"animation-play-state":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/animation-play-state","support":{"webview_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"firefox_android":[{"version_added":"16"},{"version_added":"49","prefix":"-webkit-"},{"version_added":"44","prefix":"-webkit-","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"opera_android":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"animation-timing-function":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/animation-timing-function","support":{"webview_android":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"firefox_android":[{"version_added":"16"},{"version_added":"49","prefix":"-webkit-"},{"version_added":"44","prefix":"-webkit-","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"opera_android":[{"version_added":"12.1","version_removed":"15"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"12","version_removed":"15"}],"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"4"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"animation":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/animation","support":{"webview_android":[{"version_added":true},{"prefix":"-webkit-","version_added":"2.1","notes":"The <a href='https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode'><code>animation-fill-mode</code></a> property is not supported in Android browsers below 2.3."}],"chrome":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"43"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"firefox_android":[{"version_added":"16"},{"version_added":"49","prefix":"-webkit-"},{"version_added":"44","prefix":"-webkit-","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"prefix":"-moz-","version_added":"5"}],"ie":{"version_added":"10"},"opera":{"version_added":"12"},"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"4"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"backface-visibility":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/backface-visibility","support":{"webview_android":{"prefix":"-webkit-","version_added":"3"},"chrome":{"prefix":"-webkit-","version_added":"12"},"chrome_android":{"prefix":"-webkit-","version_added":true},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"prefix":"-moz-","version_added":"10"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"45","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"16"},{"prefix":"-moz-","version_added":"10"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":{"version_added":"10"},"ie_mobile":[{"version_added":"8.1"},{"prefix":"-webkit-","version_added":"11"}],"opera":{"prefix":"-webkit-","version_added":"15"},"opera_android":{"prefix":"-webkit-","version_added":true},"safari":{"prefix":"-webkit-","version_added":true},"safari_ios":{"prefix":"-webkit-","version_added":true}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"background-attachment":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/background-attachment","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"10"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"3.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"multiple_backgrounds":{"__compat":{"description":"Multiple backgrounds","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.6"},"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":"10.5"},"opera_android":{"version_added":"10"},"safari":{"version_added":"1.3"},"safari_ios":{"version_added":"3.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"local":{"__compat":{"description":"<code>local</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"25"},"firefox_android":{"version_added":"25"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":"10.5"},"opera_android":{"version_added":null},"safari":{"version_added":"5"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"background-clip":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/background-clip","support":{"webview_android":{"version_added":"4.1"},"chrome":{"version_added":"1","notes":"Webkit also supports the prefixed version of this property, and in that case, in addition to the current keywords, the alternative synonyms are: <code>padding</code>, <code>border</code>, and <code>content</code>."},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"4","notes":"Firefox supported, from version 1 to 3.6 included, a different and prefixed syntax: <code>-moz-background-clip: padding | border</code>."},"firefox_android":{"version_added":"14"},"ie":{"version_added":"9","notes":"In IE 7 and IE 8 of Internet Explorer, this property always behaved like <code>background-clip: padding</code> when <code>overflow</code> was <code>hidden</code>, <code>auto</code>, or <code>scroll</code>."},"ie_mobile":{"version_added":"7.1"},"opera":{"version_added":"10.5"},"opera_android":{"version_added":"12.1"},"safari":{"version_added":"3","notes":"Webkit also supports the prefixed version of this property, and in that case, in addition to the current keywords, the alternative synonyms are: <code>padding</code>, <code>border</code>, and <code>content</code>."},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"content-box":{"__compat":{"description":"<code>content-box</code>","support":{"webview_android":{"version_added":"4.1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"4","notes":"Firefox supported, from version 1 to 3.6 included, a different and prefixed syntax: <code>-moz-background-clip: padding | border</code>."},"firefox_android":{"version_added":"14"},"ie":{"version_added":"9","notes":"In IE 7 and IE 9 of Internet Explorer, it always behaved like <code>background-clip: padding</code> if <code>overflow: hidden | auto | scroll</code>"},"ie_mobile":{"version_added":"7.1"},"opera":{"version_added":"10.5"},"opera_android":{"version_added":"12.1"},"safari":{"version_added":"3"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"text":{"__compat":{"description":"<code>text</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":true,"prefix":"-webkit-","notes":"Support the prefixed version of the property only; according to the <a href='https://webkit.org/blog/164/background-clip-text/'>official blog</a>, WebKit does not include text decorations or shadows in the clipping."},"chrome_android":{"version_added":null},"edge":[{"version_added":"12","prefix":"-webkit-","notes":"Support the prefixed version of the property only; according to the <a href='https://webkit.org/blog/164/background-clip-text/'>official blog</a>, WebKit does not include text decorations or shadows in the clipping."},{"version_added":"15"}],"edge_mobile":{"version_added":true},"firefox":{"version_added":"49","notes":"In Firefox 48, it was not activated by default and its support could be activated by setting <code>layout.css.background-clip-text.enabled</code> pref to <code>true</code>."},"firefox_android":{"version_added":"49","notes":"In Firefox 48, it was not activated by default and its support could be activated by setting <code>layout.css.background-clip-text.enabled</code> pref to <code>true</code>."},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":true,"prefix":"-webkit-","notes":"Support the prefixed version of the property only; according to the <a href='https://webkit.org/blog/164/background-clip-text/'>official blog</a>, WebKit does not include text decorations or shadows in the clipping."},"opera_android":{"version_added":true,"prefix":"-webkit-","notes":"Support the prefixed version of the property only; according to the <a href='https://webkit.org/blog/164/background-clip-text/'>official blog</a>, WebKit does not include text decorations or shadows in the clipping."},"safari":{"version_added":true,"prefix":"-webkit-","notes":"Support the prefixed version of the property only; according to the <a href='https://webkit.org/blog/164/background-clip-text/'>official blog</a>, WebKit does not include text decorations or shadows in the clipping."},"safari_ios":{"version_added":true,"prefix":"-webkit-","notes":"Support the prefixed version of the property only; according to the <a href='https://webkit.org/blog/164/background-clip-text/'>official blog</a>, WebKit does not include text decorations or shadows in the clipping."}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"background-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/background-color","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4","notes":"In Internet Explorer 8 and 9, there is a bug where a computed <code>background-color</code> of <code>transparent</code> causes <code>click</code> events to not get fired on overlaid elements."},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"alpha_ch_for_hex":{"__compat":{"description":"Alpha channel for hex values","support":{"webview_android":{"version_added":"52"},"chrome":{"version_added":"52"},"chrome_android":{"version_added":"52"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"background-image":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/background-image","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1","notes":["If the <code>browser.display.use_document_colors</code> user preference in <code>about:config</code> is set to <code>false</code>, background images will not be displayed."]},"firefox_android":{"version_added":true},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"multiple_backgrounds":{"__compat":{"description":"Multiple backgrounds","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.6"},"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":"1.3"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"gradients":{"__compat":{"description":"Gradients","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1","notes":"Some versions support only experimental gradients prefixed with <code>-webkit</code>."},"chrome_android":{"version_added":true,"notes":"Some versions support only experimental gradients prefixed with <code>-webkit</code>."},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.6","notes":"Some versions support only experimental gradients prefixed with <code>-moz</code>."},"firefox_android":{"version_added":true,"notes":"Some versions support only experimental gradients prefixed with <code>-moz</code>."},"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":{"version_added":"11","notes":"Some versions support only experimental gradients prefixed with <code>-o</code>."},"opera_android":{"version_added":true,"notes":"Some versions support only experimental gradients prefixed with <code>-o</code>."},"safari":{"version_added":"4","notes":"Some versions support only experimental gradients prefixed with <code>-webkit</code>."},"safari_ios":{"version_added":true,"notes":"Some versions support only experimental gradients prefixed with <code>-webkit</code>."}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"svg_images":{"__compat":{"description":"SVG images","support":{"webview_android":{"version_added":false},"chrome":{"version_added":"8"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"4"},"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":"9.5"},"opera_android":{"version_added":true},"safari":{"version_added":"5","notes":"Support of SVG in CSS background is incomplete."},"safari_ios":{"version_added":"5","notes":"Support of SVG in CSS background is incomplete."}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"element":{"__compat":{"description":"<code>element()</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":true,"notes":"<code>element()</code> is supported only in its <code>-moz-element()</code> prefixed version"},"firefox_android":{"version_added":true,"notes":"<code>element()</code> is supported only in its <code>-moz-element()</code> prefixed version"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"image-rect":{"__compat":{"description":"<code>image-rect()</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"prefix":"-moz-","version_added":true,"notes":"<code>image-rect()</code> is supported only in its <code>-moz-image-rect()</code> prefixed version."},"firefox_android":{"prefix":"-moz-","version_added":true,"notes":"<code>image-rect()</code> is supported only in its <code>-moz-image-rect()</code> prefixed version."},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"any_image":{"__compat":{"description":"Any <code>&lt;image&gt;</code> value","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"chrome_android":{"version_added":true},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"background-origin":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/background-origin","support":{"webview_android":{"version_added":"4.1"},"chrome":{"version_added":"1","notes":"Webkit also supports the prefixed version of this property, and in that case, in addition to the current keywords, the alternative synonyms are: <code>padding</code>, <code>border</code>, and <code>content</code>."},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"4","notes":["Firefox supported, from version 1 to 3.6 included, a different and prefixed syntax: <code>-moz-background-clip: padding | border</code>.","Since Firefox 49, also supports the <code>-webkit</code> prefixed version of the property."]},"firefox_android":{"version_added":"14"},"ie":{"version_added":"9","notes":"In IE 7 and before, Internet explorer was behaving as if <code>background-origin: border-box</code> was set. In Internet Explorer 8, as if <code>background-origin: padding-box</code>, the regular default value, was set."},"ie_mobile":{"version_added":"7.1"},"opera":{"version_added":"10.5"},"opera_android":{"version_added":"12.1"},"safari":{"version_added":"3","notes":"Webkit also supports the prefixed version of this property, and in that case, in addition to the current keywords, the alternative synonyms are: <code>padding</code>, <code>border</code>, and <code>content</code>."},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"content-box":{"__compat":{"description":"<code>content-box</code>","support":{"webview_android":{"version_added":"4.1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"4","notes":"Firefox supported, from version 1 to 3.6 included, a different and prefixed syntax: <code>-moz-background-clip: padding | border</code>."},"firefox_android":{"version_added":"14"},"ie":{"version_added":"9","notes":"In IE 7 and IE 9 of Internet Explorer, it always behaved like <code>background-clip: padding</code> if <code>overflow: hidden | auto | scroll</code>."},"ie_mobile":{"version_added":"7.1"},"opera":{"version_added":"10.5"},"opera_android":{"version_added":"12.1"},"safari":{"version_added":"3","notes":"Webkit also supports the prefixed version of this property, and in that case, in addition to the current keywords, the alternative synonyms are: <code>padding</code>, <code>border</code>, and <code>content</code>."},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"background-position-x":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/background-position-x","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"49"},"firefox_android":{"version_added":"49"},"ie":{"version_added":"6"},"ie_mobile":{"version_added":null},"opera":{"version_added":true},"opera_android":{"version_added":null},"safari":{"version_added":true},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"two_value_syntax":{"__compat":{"description":"Two-value syntax (support for offsets from any edge)","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"49"},"firefox_android":{"version_added":"49"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"background-position-y":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/background-position-y","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"49"},"firefox_android":{"version_added":"49"},"ie":{"version_added":"6"},"ie_mobile":{"version_added":null},"opera":{"version_added":true},"opera_android":{"version_added":null},"safari":{"version_added":true},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"2_value_syntax":{"__compat":{"description":"Two-value syntax (support for offsets from any edge)","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"49"},"firefox_android":{"version_added":"49"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"background-position":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/background-position","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":true},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"multiple_backgrounds":{"__compat":{"description":"Multiple backgrounds","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.6"},"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":"10.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1.3"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"4_value_syntax":{"__compat":{"description":"Four-value syntax (support for offsets from any edge)","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"25"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"13"},"firefox_android":{"version_added":"14"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":"10.5"},"opera_android":{"version_added":true},"safari":{"version_added":"7"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"background-repeat":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/background-repeat","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":null},"opera":{"version_added":"3.5"},"opera_android":{"version_added":null},"safari":{"version_added":"1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"multiple_backgrounds":{"__compat":{"description":"Multiple backgrounds","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.6"},"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"ie_mobile":{"version_added":null},"opera":{"version_added":"10.5"},"opera_android":{"version_added":null},"safari":{"version_added":"1.3"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"2-value":{"__compat":{"description":"Two-value syntax (different values for x & y directions)","support":{"webview_android":{"version_added":null},"chrome":{"version_added":true},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"13"},"firefox_android":{"version_added":"14"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":null},"opera":{"version_added":true},"opera_android":{"version_added":null},"safari":{"version_added":true},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"round_space":{"__compat":{"description":"<code>round</code> and <code>space</code> keywords","support":{"webview_android":{"version_added":null},"chrome":{"version_added":true},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"49"},"firefox_android":{"version_added":"49"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":null},"opera":{"version_added":"10.5"},"opera_android":{"version_added":null},"safari":{"version_added":true},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"background-size":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/background-size","support":{"webview_android":{"version_added":"2.3"},"chrome":[{"prefix":"-webkit-","version_added":"1","notes":"WebKit-based browsers originally implemented an older draft of CSS3 <code>background-size</code> in which an omitted second value is treated as duplicating the first value; this draft does not include the <code>contain</code> or <code>cover</code> keywords."},{"version_added":"3","notes":"WebKit-based browsers originally implemented an older draft of CSS3 <code>background-size</code> in which an omitted second value is treated as duplicating the first value; this draft does not include the <code>contain</code> or <code>cover</code> keywords."}],"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":[{"prefix":"-moz-","version_added":"3.6"},{"prefix":"-webkit-","version_added":"49"},{"version_added":"4"}],"firefox_android":[{"prefix":"-moz-","version_added":"4"},{"prefix":"-webkit-","version_added":"49"},{"version_added":"4"}],"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":[{"prefix":"-o-","version_added":"9.5","notes":"Opera 9.5's computation of the background positioning area is incorrect for fixed backgrounds. Opera 9.5 also interprets the two-value form as a horizontal scaling factor and, from appearances, a vertical clipping dimension. This has been fixed in Opera 10."},{"version_added":"10"}],"opera_android":{"version_added":true},"safari":[{"prefix":"-webkit-","version_added":"3","notes":"WebKit-based browsers originally implemented an older draft of CSS3 <code>background-size</code> in which an omitted second value is treated as duplicating the first value; this draft does not include the <code>contain</code> or <code>cover</code> keywords."},{"version_added":"4.1"}],"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"contain_and_cover":{"__compat":{"description":"<contain> and <cover>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"3"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.6"},"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"10"},"opera_android":{"version_added":null},"safari":{"version_added":"4.1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"SVG_image_as_background":{"__compat":{"description":"SVG image as background","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"44"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"8"},"firefox_android":{"version_added":"8"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":null},"opera":{"version_added":"31"},"opera_android":{"version_added":true},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"background":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/background","support":{"webview_android":{"version_added":"2.1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"5"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"3.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"multiple_backgrounds":{"__compat":{"description":"Multiple backgrounds","support":{"webview_android":{"version_added":"2.1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.6"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"10.5"},"opera_android":{"version_added":null},"safari":{"version_added":"1.3"},"safari_ios":{"version_added":"3.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"SVG_image_as_background":{"__compat":{"description":"SVG image as background","support":{"webview_android":{"version_added":"3"},"chrome":{"version_added":"31"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"9"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"21"},"opera_android":{"version_added":true},"safari":{"version_added":"5.1"},"safari_ios":{"version_added":"4.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"background-size":{"__compat":{"description":"Values of <code>background-size</code> longhand","support":{"webview_android":{"version_added":"3"},"chrome":{"version_added":"21"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"9"},"firefox_android":{"version_added":"18"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"21"},"opera_android":{"version_added":true},"safari":{"version_added":"5.1"},"safari_ios":{"version_added":"4"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"background-origin":{"__compat":{"description":"Values of <code>background-origin</code> longhand","support":{"webview_android":{"version_added":"3"},"chrome":{"version_added":"21"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"22"},"firefox_android":{"version_added":"22"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"21"},"opera_android":{"version_added":false},"safari":{"version_added":"5.1"},"safari_ios":{"version_added":"4"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"background-clip":{"__compat":{"description":"Values of <code>background-clip</code> longhand","support":{"webview_android":{"version_added":"3"},"chrome":{"version_added":"21"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"22"},"firefox_android":{"version_added":"22"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"21"},"opera_android":{"version_added":false},"safari":{"version_added":"5.1"},"safari_ios":{"version_added":"4"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"border-block-end-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-block-end-color","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-block-end-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-block-end-style","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-block-end-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-block-end-width","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-block-end":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-block-end","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-block-start-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-block-start-color","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-block-start-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-block-start-style","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-block-start-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-block-start-width","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-block-start":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-block-start","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-bottom-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-bottom-color","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1","notes":"Firefox also supports the non-standard <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-bottom-colors'><code>-moz-border-bottom-colors</code></a> CSS property that sets the bottom border to multiple colors."},"firefox_android":{"version_added":"4","notes":"Firefox also supports the non-standard <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-bottom-colors'><code>-moz-border-bottom-colors</code></a> CSS property that sets the bottom border to multiple colors."},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6.5"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"11"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-bottom-left-radius":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius","support":{"chrome":[{"version_added":"4"},{"prefix":"-webkit-","version_added":"1"}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"4","notes":"Prior to Firefox 50, border styles of rounded corners were always rendered as if <code>border-style</code> was solid. This has been fixed in Firefox 50."},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"alternative_name":"-moz-border-radius-topright","version_added":"1","version_removed":"12"}],"firefox_android":{"version_added":true,"notes":"Prior to Firefox 50, border styles of rounded corners were always rendered as if <code>border-style</code> was solid. This has been fixed in Firefox 50."},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":[{"version_added":"5"},{"prefix":"-webkit-","version_added":"3"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"percentages":{"__compat":{"description":"Percentages","support":{"chrome":{"version_added":"4"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"4"},{"version_added":"1","notes":"Before Firefox 4, the <a href='https://developer.mozilla.org/docs/Web/CSS/percentage'><code>&lt;percentage&gt;</code></a> was relative to the width of the box even when specifying the radius for a height. This implied that <code>-moz-border-radius-topright</code> was always drawing an arc of circle, and never an ellipse, when followed by a single value."}],"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":{"version_added":"5"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"ellipitcal_corners":{"__compat":{"description":"Ellipitcal corners","support":{"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":{"version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"border-bottom-right-radius":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius","support":{"chrome":[{"version_added":"4"},{"prefix":"-webkit-","version_added":"1"}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"4","notes":"Prior to Firefox 50, border styles of rounded corners were always rendered as if <code>border-style</code> was solid. This has been fixed in Firefox 50."},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"alternative_name":"-moz-border-radius-topright","version_added":"1","version_removed":"12"}],"firefox_android":{"version_added":true,"notes":"Prior to Firefox 50, border styles of rounded corners were always rendered as if <code>border-style</code> was solid. This has been fixed in Firefox 50."},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":[{"version_added":"5"},{"prefix":"-webkit-","version_added":"3"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"percentages":{"__compat":{"description":"Percentages","support":{"chrome":{"version_added":"4"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"4"},{"version_added":"1","notes":"Before Firefox 4, the <a href='https://developer.mozilla.org/docs/Web/CSS/percentage'><code>&lt;percentage&gt;</code></a> was relative to the width of the box even when specifying the radius for a height. This implied that <code>-moz-border-radius-topright</code> was always drawing an arc of circle, and never an ellipse, when followed by a single value."}],"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":{"version_added":"5"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"ellipitcal_corners":{"__compat":{"description":"Ellipitcal corners","support":{"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":{"version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"border-bottom-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-bottom-style","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1","notes":"Prior to Firefox 50, border styles of rounded corners (with <a href='https://developer.mozilla.org/docs/Web/CSS/border-radius'><code>border-radius</code></a>) were always rendered as if <code>border-bottom-style</code> was <code>solid</code>. This has been fixed in Firefox 50."},"firefox_android":{"version_added":true,"notes":"Prior to Firefox 50, border styles of rounded corners (with <a href='https://developer.mozilla.org/docs/Web/CSS/border-radius'><code>border-radius</code></a>) were always rendered as if <code>border-bottom-style</code> was <code>solid</code>. This has been fixed in Firefox 50."},"ie":{"version_added":"5.5"},"ie_mobile":{"version_added":"7"},"opera":{"version_added":"9.2"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-bottom-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-bottom-width","support":{"webview_android":{"version_added":"2.3"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"11"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-bottom":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-bottom","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-collapse":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-collapse","support":{"webview_android":{"version_added":"2.3"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"5"},"ie_mobile":{"version_added":"7"},"opera":{"version_added":"4"},"opera_android":{"version_added":"11"},"safari":{"version_added":"1.2"},"safari_ios":{"version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-color","support":{"webview_android":{"version_added":"4"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1","notes":"Firefox also supports the following non-standard CSS properties to set the border sides to multiple colors: <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-top-colors'><code>-moz-border-top-colors</code></a>, <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-right-colors'><code>-moz-border-right-colors</code></a>, <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-bottom-colors'><code>-moz-border-bottom-colors</code></a>, <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-left-colors'><code>-moz-border-left-colors</code></a>"},"firefox_android":{"version_added":"4","notes":"Firefox also supports the following non-standard CSS properties to set the border sides to multiple colors: <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-top-colors'><code>-moz-border-top-colors</code></a>, <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-right-colors'><code>-moz-border-right-colors</code></a>, <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-bottom-colors'><code>-moz-border-bottom-colors</code></a>, <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-left-colors'><code>-moz-border-left-colors</code></a>"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"7"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"11"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-image-outset":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-image-outset","support":{"chrome":{"version_added":"15"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"15"},"firefox_android":{"version_added":"15"},"ie":{"version_added":"11"},"ie_mobile":{"version_added":false},"opera":{"version_added":"15"},"safari":{"version_added":"6"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-image-repeat":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-image-repeat","support":{"chrome":{"version_added":"15"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"15"},"firefox_android":{"version_added":"15"},"ie":{"version_added":"11"},"ie_mobile":{"version_added":false},"opera":{"version_added":"15"},"safari":{"version_added":"6"},"safari_ios":{"version_added":"9.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"round":{"__compat":{"description":"<code>round</code>","support":{"chrome":{"version_added":"30"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"15"},"firefox_android":{"version_added":"15"},"ie":{"version_added":"11"},"safari":{"version_added":"9.1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"space":{"__compat":{"description":"<code>space</code>","support":{"chrome":{"version_added":"56"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"50"},"firefox_android":{"version_added":"50"},"ie":{"version_added":"11"},"opera":{"version_added":false},"safari":{"version_added":"9.1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"border-image-slice":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-image-slice","support":{"webview_android":{"prefix":"-webkit-","version_added":"4.1"},"chrome":{"version_added":"15"},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"15","notes":["Small SVGs are incorrectly stretched, because percentages in <a href='https://developer.mozilla.org/docs/Web/CSS/border-image-slice'><code>border-image-slice</code></a> are computed to integers instead of floats (<a href='https://bugzil.la/1284797'>bug 1284797</a>).","Until Firefox 47, SVGs without viewport were not sliced correctly (<a href='https://bugzil.la/619500'>bug 619500</a>).","From Firefox 48 until Firefox 49, SVGs without viewport are displayed the same as SVGs with viewport, but if the slices are not exactly 50%, they are incorrectly stretched (<a href='https://bugzil.la/1264809' >bug 1264809</a>).","Until Firefox 57, an issue persisted for SVGs without viewport when <a href='https://wiki.mozilla.org/Electrolysis'>e10s</a> was disabled (<a href='https://bugzil.la/1290782'>bug 1290782</a>)."]},"firefox_android":{"version_added":"15","notes":["Small SVGs are incorrectly stretched, because percentages in <a href='https://developer.mozilla.org/docs/Web/CSS/border-image-slice'><code>border-image-slice</code></a> are computed to integers instead of floats (<a href='https://bugzil.la/1284797'>bug 1284797</a>).","Until Firefox 47, SVGs without viewport were not sliced correctly (<a href='https://bugzil.la/619500'>bug 619500</a>).","From Firefox 48 until Firefox 49, SVGs without viewport are displayed the same as SVGs with viewport, but if the slices are not exactly 50%, they are incorrectly stretched (<a href='https://bugzil.la/1264809' >bug 1264809</a>).","Until Firefox 57, an issue persisted for SVGs without viewport when <a href='https://wiki.mozilla.org/Electrolysis'>e10s</a> was disabled (<a href='https://bugzil.la/1290782'>bug 1290782</a>)."]},"ie":{"version_added":"11"},"ie_mobile":{"version_added":false},"opera":{"version_added":"15"},"safari":{"version_added":"6"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-image-source":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-image-source","support":{"chrome":{"version_added":"15"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"15"},"firefox_android":{"version_added":"15"},"ie":{"version_added":"11"},"ie_mobile":{"version_added":false},"opera":{"version_added":"15"},"safari":{"version_added":"6"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-image-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-image-width","support":{"chrome":{"version_added":"15"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"13"},"firefox_android":{"version_added":"14"},"ie":{"version_added":"11"},"ie_mobile":{"version_added":false},"opera":{"version_added":"15"},"safari":{"version_added":"6"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-image":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-image","support":{"webview_android":{"prefix":"-webkit-","version_added":"2.1"},"chrome":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"7"}],"chrome_android":{"version_added":null},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"15","notes":["Small SVGs are incorrectly stretched, because percentages in <a href='https://developer.mozilla.org/docs/Web/CSS/border-image-slice'><code>border-image-slice</code></a> are computed to integers instead of floats (<a href='https://bugzil.la/1284797'>bug 1284797</a>).","Until Firefox 47, SVGs without viewport were not sliced correctly (<a href='https://bugzil.la/619500'>bug 619500</a>).","From Firefox 48 until Firefox 49, SVGs without viewport are displayed the same as SVGs with viewport, but if the slices are not exactly 50%, they are incorrectly stretched (<a href='https://bugzil.la/1264809' >bug 1264809</a>).","Until Firefox 57, an issue persisted for SVGs without viewport when <a href='https://wiki.mozilla.org/Electrolysis'>e10s</a> was disabled (<a href='https://bugzil.la/1290782'>bug 1290782</a>)."]},{"version_added":"3.5","prefix":"-moz-","notes":"An earlier version of the specification was implemented, prefixed, in Firefox versions prior to 15."},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"15","notes":["Small SVGs are incorrectly stretched, because percentages in <a href='https://developer.mozilla.org/docs/Web/CSS/border-image-slice'><code>border-image-slice</code></a> are computed to integers instead of floats (<a href='https://bugzil.la/1284797'>bug 1284797</a>).","Until Firefox 47, SVGs without viewport were not sliced correctly (<a href='https://bugzil.la/619500'>bug 619500</a>).","From Firefox 48 until Firefox 49, SVGs without viewport are displayed the same as SVGs with viewport, but if the slices are not exactly 50%, they are incorrectly stretched (<a href='https://bugzil.la/1264809' >bug 1264809</a>).","Until Firefox 57, an issue persisted for SVGs without viewport when <a href='https://wiki.mozilla.org/Electrolysis'>e10s</a> was disabled (<a href='https://bugzil.la/1290782'>bug 1290782</a>)."]},{"version_added":"4","prefix":"-moz-","notes":"An earlier version of the specification was implemented, prefixed, in Firefox versions prior to 15."},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":{"version_added":"11"},"ie_mobile":{"version_added":null},"opera":[{"version_added":"10.5"},{"prefix":"-o-","version_added":"11"}],"opera_android":{"prefix":"-o-","version_added":"11"},"safari":[{"version_added":"6"},{"prefix":"-webkit-","version_added":"3"}],"safari_ios":[{"version_added":"6"},{"prefix":"-webkit-","version_added":"3.2"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"optional_border_image_slice":{"__compat":{"description":"optional <code>&lt;border-image-slice&gt;</code>","support":{"firefox":{"version_added":"15"},"firefox_android":{"version_added":"15"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"fill_keyword":{"__compat":{"description":"<code>fill</code> keyword","support":{"webview_android":{"version_added":"18"},"chrome":{"version_added":true},"firefox":{"version_added":"15"},"firefox_android":{"version_added":"15"},"safari":{"version_added":"6"},"safari_ios":{"version_added":"6"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"gradient":{"__compat":{"description":"<code>&lt;gradient&gt;</code>","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"firefox":{"version_added":"29"},"firefox_android":{"version_added":"29"},"ie":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"border-inline-end-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."},{"version_added":true,"alternative_name":"-moz-border-end-color"}],"firefox_android":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."},{"version_added":true,"alternative_name":"-moz-border-end-color"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-inline-end-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."},{"version_added":"38","alternative_name":"-moz-border-end-style"}],"firefox_android":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."},{"version_added":"38","alternative_name":"-moz-border-end-style"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-inline-end-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."},{"version_added":true,"alternative_name":"-moz-border-end-width"}],"firefox_android":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."},{"version_added":true,"alternative_name":"-moz-border-end-width"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-inline-end":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-inline-end","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-inline-start-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."},{"version_added":"38","alternative_name":"-moz-border-start-color"}],"firefox_android":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."},{"version_added":"38","alternative_name":"-moz-border-start-color"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-inline-start-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."},{"version_added":true,"alternative_name":"-moz-border-start-style"}],"firefox_android":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."},{"version_added":true,"alternative_name":"-moz-border-start-style"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-inline-start-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."}],"firefox_android":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"},"notes":"Enabled by default since Firefox 41."}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-inline-start":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-inline-start","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"border-left-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-left-color","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1","notes":"Firefox also supports the non-standard <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-left-colors'><code>-moz-border-left-colors</code></a> CSS property that sets the bottom border to multiple colors."},"firefox_android":{"version_added":"4","notes":"Firefox also supports the non-standard <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-left-colors'><code>-moz-border-left-colors</code></a> CSS property that sets the bottom border to multiple colors."},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6.5"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"11"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-left-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-left-style","support":{"webview_android":{"version_added":"2.3"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1","notes":"Prior to Firefox 50, border styles of rounded corners (with <a href='https://developer.mozilla.org/docs/Web/CSS/border-radius'><code>border-radius</code></a>) were always rendered as if <code>border-bottom-style</code> was <code>solid</code>. This has been fixed in Firefox 50."},"firefox_android":{"version_added":"14","notes":"Prior to Firefox 50, border styles of rounded corners (with <a href='https://developer.mozilla.org/docs/Web/CSS/border-radius'><code>border-radius</code></a>) were always rendered as if <code>border-bottom-style</code> was <code>solid</code>. This has been fixed in Firefox 50."},"ie":{"version_added":"5.5"},"ie_mobile":{"version_added":"7"},"opera":{"version_added":"9.2"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-left-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-left-width","support":{"webview_android":{"version_added":"2.3"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"11"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-left":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-left","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-radius":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-radius","support":{"chrome":[{"version_added":"4","notes":"Current Chrome and Safari versions ignore border-radius on <code>&lt;select&gt;</code> elements unless <code>-webkit-appearance</code> is overridden to an appropriate value."},{"prefix":"-webkit-","version_added":"1"}],"webview_android":{"version_added":"2.1","prefix":"-webkit-"},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"4","notes":["Prior to Firefox 50, border styles of rounded corners (with <code>border-radius</code>) were always rendered as if <code>border-style</code> was <code>solid</code>. This has been fixed in Firefox 50.","To conform to the CSS3 standard, Firefox 4 changes the handling of <a href='https://developer.mozilla.org/docs/Web/CSS/percentage'><code>&lt;percentage&gt;</code></a> values to match the specification. You can specify an ellipse as a border on an arbitrary sized element with <code>border-radius: 50%;</code>. Firefox 4 also makes rounded corners clip content and images if <a href='https://developer.mozilla.org/docs/Web/CSS/overflow'><code>overflow</code></a><code>: visible</code> is not set."]},{"prefix":"-moz-","version_added":"1","version_removed":"12"}],"firefox_android":{"version_added":true,"notes":"Prior to Firefox 50, border styles of rounded corners (with <code>border-radius</code>) were always rendered as if <code>border-style</code> was <code>solid</code>. This has been fixed in Firefox 50."},"ie":{"version_added":"9"},"ie_mobile":{"version_added":""},"opera":{"version_added":"10.5","notes":"In Opera prior to version 11.60, replaced elements with <code>border-radius</code> will not have rounded corners."},"opera_android":{"version_added":""},"safari":[{"version_added":"5","notes":"Current Chrome and Safari versions ignore border-radius on <code>&lt;select&gt;</code> elements unless <code>-webkit-appearance</code> is overridden to an appropriate value."},{"prefix":"-webkit-","version_added":"3"}],"safari_ios":{"version_added":""}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"elliptical_borders":{"__compat":{"description":"Elliptical borders","support":{"chrome":{"version_added":true,"notes":"Prior to Chrome 4, the slash <code>/</code> notation is unsupported. If two values are specified, an elliptical border is drawn on all four corners. <code>-webkit-border-radius: 40px 10px;</code> is equivalent to <code>border-radius: 40px/10px;</code>."},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":true},"ie":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":false},"safari":{"version_added":true,"notes":"Prior to Safari 4.1, the slash <code>/</code> notation is unsupported. If two values are specified, an elliptical border is drawn on all four corners. <code>-webkit-border-radius: 40px 10px;</code> is equivalent to <code>border-radius: 40px/10px;</code>."}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"4_values_for_4_corners":{"__compat":{"description":"4 values for 4 corners","support":{"chrome":{"version_added":"4"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":true},"firefox_android":{"version_added":true},"ie":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":false},"safari":{"version_added":"5"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"percentages":{"__compat":{"description":"Percentages","support":{"chrome":{"version_added":true,"notes":"<code>&lt;percentage&gt;</code> values are not supported in older Chrome and Safari versions (it was <a href='http://trac.webkit.org/changeset/66615'>fixed in Sepember 2010</a>)."},"webview_android":{"version_added":true,"notes":"<code>&lt;percentage&gt;</code> values are not supported in older Chrome and Safari versions (it was <a href='http://trac.webkit.org/changeset/66615'>fixed in Sepember 2010</a>)."},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"4","notes":"<code>&lt;percentage&gt;</code> values are implemented in a non-standard way prior to Firefox 4. Both horizontal and vertical radii were relative to the width of the border box."},"firefox_android":{"version_added":true},"ie":{"version_added":true},"opera":{"version_added":"11.5","notes":"The implementation of <code>&lt;percentage&gt;</code> values was buggy in Opera prior to 11.50."},"opera_android":{"version_added":false},"safari":{"version_added":"5.1","notes":"<code>&lt;percentage&gt;</code> values are not supported in older Chrome and Safari versions (it was <a href='http://trac.webkit.org/changeset/66615'>fixed in Sepember 2010</a>)."},"safari_ios":{"version_added":true,"notes":"<code>&lt;percentage&gt;</code> values are not supported in older Chrome and Safari versions (it was <a href='http://trac.webkit.org/changeset/66615'>fixed in Sepember 2010</a>)."}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"border-right-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-right-color","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1","notes":"Firefox also supports the non-standard <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-right-colors'><code>-moz-border-right-colors</code></a> CSS property that sets the right border to multiple colors."},"firefox_android":{"version_added":"4","notes":"Firefox also supports the non-standard <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-right-colors'><code>-moz-border-right-colors</code></a> CSS property that sets the right border to multiple colors."},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6.5"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"11"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-right-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-right-style","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1","notes":"Prior to Firefox 50, border styles of rounded corners (with <a href='https://developer.mozilla.org/docs/Web/CSS/border-radius'><code>border-radius</code></a>) were always rendered as if <code>border-bottom-style</code> was <code>solid</code>. This has been fixed in Firefox 50."},"firefox_android":{"version_added":"14","notes":"Prior to Firefox 50, border styles of rounded corners (with <a href='https://developer.mozilla.org/docs/Web/CSS/border-radius'><code>border-radius</code></a>) were always rendered as if <code>border-bottom-style</code> was <code>solid</code>. This has been fixed in Firefox 50."},"ie":{"version_added":"5.5"},"ie_mobile":{"version_added":"7"},"opera":{"version_added":"9.2"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-right-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-right-width","support":{"webview_android":{"version_added":"2.3"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"11"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-right":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-right","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"14"},"ie":{"version_added":"5.5"},"ie_mobile":{"version_added":"7"},"opera":{"version_added":"9.2"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-spacing":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-spacing","support":{"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"8"},"opera":{"version_added":"4"},"safari":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-style","support":{"webview_android":{"version_added":"2.6"},"chrome":{"version_added":"1"},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"1","notes":"Prior to Firefox 50, border styles of rounded corners were always rendered as if <code>border-style</code> was solid. This has been fixed in Firefox 50."},"firefox_android":{"version_added":"4","notes":"Prior to Firefox 50, border styles of rounded corners were always rendered as if <code>border-style</code> was solid. This has been fixed in Firefox 50."},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"7"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-top-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-top-color","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1","notes":"Firefox also supports the non-standard <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-top-colors'><code>-moz-border-top-colors</code></a> CSS property that sets the top border to multiple colors."},"firefox_android":{"version_added":"4","notes":"Firefox also supports the non-standard <a href='https://developer.mozilla.org/docs/Web/CSS/-moz-border-top-colors'><code>-moz-border-top-colors</code></a> CSS property that sets the top border to multiple colors."},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6.5"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"11"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-top-left-radius":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius","support":{"chrome":[{"version_added":"4"},{"prefix":"-webkit-","version_added":"1"}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"4","notes":"Prior to Firefox 50, border styles of rounded corners were always rendered as if <code>border-style</code> was solid. This has been fixed in Firefox 50."},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"alternative_name":"-moz-border-radius-topright","version_added":"1","version_removed":"12"}],"firefox_android":{"version_added":true,"notes":"Prior to Firefox 50, border styles of rounded corners were always rendered as if <code>border-style</code> was solid. This has been fixed in Firefox 50."},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":[{"version_added":"5"},{"prefix":"-webkit-","version_added":"3"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"percentages":{"__compat":{"description":"Percentages","support":{"chrome":{"version_added":"4"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"4"},{"version_added":"1","notes":"Before Firefox 4, the <a href='https://developer.mozilla.org/docs/Web/CSS/percentage'><code>&lt;percentage&gt;</code></a> was relative to the width of the box even when specifying the radius for a height. This implied that <code>-moz-border-radius-topright</code> was always drawing an arc of circle, and never an ellipse, when followed by a single value."}],"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":{"version_added":"5"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"ellipitcal_corners":{"__compat":{"description":"Ellipitcal corners","support":{"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":{"version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"border-top-right-radius":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius","support":{"chrome":[{"version_added":"4"},{"prefix":"-webkit-","version_added":"1"}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"4","notes":"Prior to Firefox 50, border styles of rounded corners were always rendered as if <code>border-style</code> was solid. This has been fixed in Firefox 50."},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"alternative_name":"-moz-border-radius-topright","version_added":"1","version_removed":"12"}],"firefox_android":{"version_added":true,"notes":"Prior to Firefox 50, border styles of rounded corners were always rendered as if <code>border-style</code> was solid. This has been fixed in Firefox 50."},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":[{"version_added":"5"},{"prefix":"-webkit-","version_added":"3"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"percentages":{"__compat":{"description":"Percentages","support":{"chrome":{"version_added":"4"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"4"},{"version_added":"1","notes":"Before Firefox 4, the <a href='https://developer.mozilla.org/docs/Web/CSS/percentage'><code>&lt;percentage&gt;</code></a> was relative to the width of the box even when specifying the radius for a height. This implied that <code>-moz-border-radius-topright</code> was always drawing an arc of circle, and never an ellipse, when followed by a single value."}],"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":{"version_added":"5"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"ellipitcal_corners":{"__compat":{"description":"Ellipitcal corners","support":{"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":true},"ie":{"version_added":"9"},"opera":{"version_added":"10.5"},"safari":{"version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"border-top-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-top-style","support":{"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1","notes":"Prior to Firefox 50, border styles of rounded corners (with <a href='https://developer.mozilla.org/docs/Web/CSS/border-radius'><code>border-radius</code></a>) were always rendered as if <code>border-top-style</code> was <code>solid</code>. This has been fixed in Firefox 50."},"firefox_android":{"version_added":true,"notes":"Prior to Firefox 50, border styles of rounded corners (with <a href='https://developer.mozilla.org/docs/Web/CSS/border-radius'><code>border-radius</code></a>) were always rendered as if <code>border-top-style</code> was <code>solid</code>. This has been fixed in Firefox 50."},"ie":{"version_added":"5.5"},"opera":{"version_added":"9.2"},"safari":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-top-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-top-width","support":{"chrome":{"version_added":"1"},"webview_android":{"version_added":"2.3"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"11"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-top":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-top","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border-width","support":{"chrome":{"version_added":"1"},"webview_android":{"version_added":"2"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"11"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"border":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/border","support":{"chrome":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"opera":{"version_added":"3.5"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"bottom":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/bottom","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"5","notes":"In Internet Explorer versions before 7, when both <code>top</code> and <code>bottom</code> are specified, the element position is overconstrained and the <code>top</code> property has precedence; the computed value of <code>bottom</code> is set to <code>-top</code>, while its specified value is ignored."},"ie_mobile":{"version_added":true},"opera":{"version_added":"6"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"clear":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/clear","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"flow_relative_values":{"__compat":{"description":"Flow-relative values <code>inline-start</code> and <code>inline-end</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"55"},"firefox_android":{"version_added":"55"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"column-count":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/column-count","support":{"webview_android":{"version_added":true},"chrome":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"chrome_android":{"version_added":"50"},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"52"},{"prefix":"-moz-","version_added":"1.5"}],"firefox_android":[{"version_added":"52"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":[{"version_added":"11.1"},{"prefix":"-webkit-","version_added":"15"}],"opera_android":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"safari":{"prefix":"-webkit-","version_added":"3"},"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"on_display_table_caption":{"__compat":{"description":"On <code>display: table-caption</code>","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"37"},"firefox_android":{"version_added":"37"},"ie":{"version_added":true},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"column-fill":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/column-fill","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"52"},{"prefix":"-moz-","version_added":"13"}],"firefox_android":[{"version_added":"52"},{"prefix":"-moz-","version_added":"14"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"column-gap":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/column-gap","support":{"webview_android":{"version_added":true},"chrome":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"chrome_android":{"version_added":"50"},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"52"},{"prefix":"-moz-","version_added":"1.5","notes":"Before Firefox 3, the default value for the <code>normal</code> keyword was <code>0</code> and not <code>1em</code>."}],"firefox_android":[{"version_added":"52"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":"10"},"opera":[{"version_added":"11.1"},{"prefix":"-webkit-","version_added":"15"}],"safari":{"prefix":"-webkit-","version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"column-rule-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/column-rule-color","support":{"webview_android":{"version_added":true},"chrome":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"52"},{"prefix":"-moz-","version_added":"3.5"}],"firefox_android":[{"version_added":"52"},{"prefix":"-moz-","version_added":true}],"ie":{"version_added":"10"},"opera":[{"version_added":"11.1"},{"prefix":"-webkit-","version_added":"15"}],"safari":{"prefix":"-webkit-","version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"column-rule-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/column-rule-style","support":{"webview_android":{"version_added":true},"chrome":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"52"},{"prefix":"-moz-","version_added":true}],"firefox_android":[{"version_added":"52"},{"prefix":"-moz-","version_added":true}],"ie":{"version_added":"10"},"opera":[{"version_added":"11.1"},{"prefix":"-webkit-","version_added":"15"}],"safari":{"prefix":"-webkit-","version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"column-rule-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/column-rule-width","support":{"webview_android":{"version_added":true},"chrome":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"edge":{"prefix":"-webkit-","version_added":true},"edge_mobile":{"prefix":"-webkit-","version_added":true},"firefox":[{"version_added":"50"},{"prefix":"-moz-","version_added":"3.5"}],"firefox_android":[{"version_added":"50"},{"prefix":"-moz-","version_added":true}],"ie":{"version_added":"10"},"opera":[{"version_added":"11.1"},{"prefix":"-webkit-","version_added":"15"}],"safari":{"prefix":"-webkit-","version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"column-rule":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/column-rule","support":{"webview_android":{"version_added":true},"chrome":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"edge":{"prefix":"-webkit-","version_added":true},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"52"},{"prefix":"-moz-","version_added":"3.5","notes":"Before Firefox 3, the default value for the <code>normal</code> keyword was <code>0</code> and not <code>1em</code>."}],"firefox_android":[{"version_added":"52"},{"prefix":"-moz-","version_added":true}],"ie":{"version_added":"10"},"opera":[{"version_added":"11.1"},{"prefix":"-webkit-","version_added":"15"}],"safari":{"prefix":"-webkit-","version_added":"3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"column-span":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/column-span","support":{"webview_android":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":"10"},"opera":[{"version_added":"11.1"},{"prefix":"-webkit-","version_added":"15"}],"opera_android":{"version_added":null},"safari":{"prefix":"-webkit-","version_added":true},"safari_ios":{"prefix":"-webkit-","version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"column-width":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/column-width","support":{"webview_android":{"version_added":true},"chrome":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"50"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"50"},{"prefix":"-moz-","version_added":"1.5"}],"firefox_android":[{"version_added":"50"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":true},"opera":{"version_added":"11.1"},"opera_android":{"version_added":true},"safari":{"prefix":"-webkit-","version_added":"3"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"intrinsic_sizes":{"__compat":{"description":"Intrinsic sizes","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"on_display_table_caption":{"__compat":{"description":"On <code>display: table-caption</code>","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"chrome_android":{"version_added":"50"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"37"},"firefox_android":{"version_added":"37"},"ie":{"version_added":true},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"columns":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/columns","support":{"webview_android":[{"version_added":true},{"prefix":"-webkit-","version_added":"2.1"}],"chrome":[{"version_added":"50"},{"prefix":"-webkit-","version_added":"50"}],"chrome_android":{"version_added":"50"},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"52"},{"prefix":"-moz-","version_added":"9"}],"firefox_android":[{"version_added":"52"},{"prefix":"-moz-","version_added":"22"}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":"10"},"opera":[{"version_added":"11.1"},{"prefix":"-webkit-","version_added":"15"}],"opera_android":[{"version_added":"11.5"},{"prefix":"-webkit-","version_added":"32"}],"safari":{"prefix":"-webkit-","version_added":"3"},"safari_ios":{"prefix":"-webkit-","version_added":"3.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"on_display_table_caption":{"__compat":{"description":"On <code>display: table-caption</code>","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"37"},"firefox_android":{"version_added":"37"},"ie":{"version_added":true},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"counter-increment":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/counter-increment","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"2"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":null},"ie":{"version_added":"8"},"ie_mobile":{"version_added":null},"opera":{"version_added":"9.2"},"opera_android":{"version_added":null},"safari":{"version_added":"3"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"counter-reset":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/counter-reset","support":{"webview_android":{"version_added":"2.1"},"chrome":{"version_added":"2"},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"25"},"ie":{"version_added":"8"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"9.2"},"opera_android":{"version_added":"10"},"safari":{"version_added":"3.1"},"safari_ios":{"version_added":"3.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"flex-basis":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/flex-basis","support":{"chrome":{"prefix":"-webkit-","version_added":"21"},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"22","notes":"Since Firefox 28, multi-line flexbox is supported."},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"version_added":"18","version_removed":"28","flag":{"type":"preference","name":"layout.css.flexbox.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"22","notes":"Since Firefox 28, multi-line flexbox is supported."},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"version_added":"18","version_removed":"28","flag":{"type":"preference","name":"layout.css.flexbox.enabled","value_to_set":"true"}}],"ie":{"version_added":"11","notes":"When a non-<code>auto</code> <code>flex-basis</code> is specified, Internet Explorer 10 and 11 always uses a <code>content-box</code> box model to calculate the size of a flex item, even if <a href='http://developer.mozilla.org/docs/Web/CSS/box-sizing'><code>box-sizing: border-box</code></a> is applied to the element. See <a href='https://github.com/philipwalton/flexbugs#7-flex-basis-doesnt-account-for-box-sizingborder-box'>Flexbug #7</a> for more info."},"ie_mobile":{"version_added":false},"opera":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"}],"opera_android":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"}],"safari":[{"version_added":"9"},{"prefix":"-webkit-","version_added":"7"}],"safari_ios":{"version_added":"9.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"auto":{"__compat":{"description":"<code>auto</code>","support":{"chrome":{"version_added":"21"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"18"},"firefox_android":{"version_added":"18"},"ie":{"version_added":"11"},"opera":{"version_added":"12.1"},"opera_android":{"version_added":"12.1"},"safari":{"prefix":"-webkit-","version_added":"7"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"content":{"__compat":{"description":"<code>content</code>","support":{"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"flex-direction":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/flex-direction","support":{"chrome":{"prefix":"-webkit-","version_added":"21"},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"20","notes":"Since Firefox 28, multi-line flexbox is supported."},{"version_added":"18","version_removed":"20","flag":{"type":"preference","name":"layout.css.flexbox.enabled","value_to_set":"true"}},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":[{"version_added":"11"},{"prefix":"-ms-","version_added":"10"}],"ie_mobile":{"version_added":false},"opera":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"}],"opera_android":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"}],"safari":[{"version_added":"9"},{"prefix":"-webkit-","version_added":"7"}],"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"flex-flow":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/flex-flow","support":{"chrome":[{"version_added":"29"},{"prefix":"-webkit-","version_added":"21"}],"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"28"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"28"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":{"version_added":"11"},"ie_mobile":{"version_added":"11"},"opera":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"}],"opera_android":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"}],"safari":[{"version_added":"9"},{"prefix":"-webkit-","version_added":"6.1"}],"safari_ios":[{"version_added":"9.2"},{"prefix":"-webkit-","version_added":"7.1"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"flex-grow":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/flex-grow","support":{"chrome":{"prefix":"-webkit-","version_added":"21"},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"20","notes":"Since Firefox 28, multi-line flexbox is supported."},{"version_added":"18","version_removed":"20","flag":{"type":"preference","name":"layout.css.flexbox.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"20","notes":"Since Firefox 28, multi-line flexbox is supported."},{"version_added":"18","version_removed":"20","flag":{"type":"preference","name":"layout.css.flexbox.enabled","value_to_set":"true"}}],"ie":{"alternative_name":"-ms-flex-positive","version_added":"11"},"ie_mobile":{"version_added":false},"opera":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"}],"opera_android":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"}],"safari":{"prefix":"-webkit-","version_added":"6.1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"less_than_zero_animate":{"__compat":{"description":"<0 animate","support":{"chrome":{"version_added":"49"},"firefox":{"version_added":"32","notes":"Before Firefox 32, Firefox wasn't able to animate values starting or stopping at <code>0</code>."},"firefox_android":{"version_added":"32","notes":"Before Firefox 32, Firefox wasn't able to animate values starting or stopping at <code>0</code>."},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":false,"deprecated":false}}}},"flex-shrink":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/flex-shrink","support":{"chrome":{"prefix":"-webkit-","version_added":"21"},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"20","notes":["Since Firefox 28, multi-line flexbox is supported.","Before Firefox 32, Firefox wasn't able to animate values starting or stopping at <code>0</code>."]},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"version_added":"18","version_removed":"20","flag":{"type":"preference","name":"layout.css.flexbox.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"20","notes":["Since Firefox 28, multi-line flexbox is supported.","Before Firefox 32, Firefox wasn't able to animate values starting or stopping at <code>0</code>."]},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"version_added":"18","version_removed":"20","flag":{"type":"preference","name":"layout.css.flexbox.enabled","value_to_set":"true"}}],"ie":{"version_added":"10","notes":"Internet Explorer 10 uses <code>0</code> instead of <code>1</code> as the initial value for the <code>flex-shrink</code> property. A workaround is to always set an explicit value for <code>flex-shrink</code>. See <a href='https://github.com/philipwalton/flexbugs#6-the-default-flex-value-has-changed'>Flexbug #6</a> for more info."},"ie_mobile":{"version_added":false},"opera":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"}],"opera_android":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"}],"safari":{"prefix":"-webkit-","version_added":"8"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"flex-wrap":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/flex-wrap","support":{"webview_android":{"version_added":"4.4"},"chrome":{"version_added":"29"},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"28"},"firefox_android":{"version_added":"52"},"ie":{"version_added":"11","partial_implementation":true,"notes":"Partial support due to large number of bugs present. See <a href='https://github.com/philipwalton/flexbugs'>Flexbugs</a>."},"ie_mobile":{"version_added":"11"},"opera":{"version_added":"17"},"opera_android":{"version_added":"12.1"},"safari":{"version_added":"9"},"safari_ios":{"version_added":"9.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"flex":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/flex","support":{"webview_android":[{"version_added":"4.4"},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"29"},{"prefix":"-webkit-","version_added":"21"}],"chrome_android":{"version_added":null},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"20","notes":["Since Firefox 28, multi-line flexbox is supported.","Before Firefox 32, Firefox wasn't able to animate values starting or stopping at <code>0</code>."]},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"version_added":"18","version_removed":"28","flag":{"type":"preference","name":"layout.css.flexbox.enabled","value_to_set":"true"}}],"ie":[{"version_added":"11","notes":["Internet Explorer 11 ignores uses of <a href='https://developer.mozilla.org/docs/Web/CSS/calc'><code>calc()</code></a> in the <code>flex-basis</code> part of the <code>flex</code> syntax. This can be worked around by using the longhand properties instead of the shorthand. See <a href='https://github.com/philipwalton/flexbugs#8-flex-basis-doesnt-support-calc'>Flexbug #8</a> for more info.","Internet Explorer 11 considers a unitless value in the <code>flex-basis</code> part to be syntactically invalid (and will thus be ignored). A workaround is to always include a unit in the <code>flex-basis</code> part of the <code>flex</code> shorthand value. See <a href='https://github.com/philipwalton/flexbugs#4-flex-shorthand-declarations-with-unitless-flex-basis-values-are-ignored'>Flexbug #4</a> for more info."]},{"prefix":"-ms-","version_added":"10","notes":["Internet Explorer 10 and 11 ignore uses of <a href='https://developer.mozilla.org/docs/Web/CSS/calc'><code>calc()</code></a> in the <code>flex-basis</code> part of the <code>flex</code> syntax. This can be worked around by using the longhand properties instead of the shorthand. See <a href='https://github.com/philipwalton/flexbugs#8-flex-basis-doesnt-support-calc'>Flexbug #8</a> for more info.","Internet Explorer 10 and 11 consider a unitless value in the <code>flex-basis</code> part to be syntactically invalid (and will thus be ignored). A workaround is to always include a unit in the <code>flex-basis</code> part of the <code>flex</code> shorthand value. See <a href='https://github.com/philipwalton/flexbugs#4-flex-shorthand-declarations-with-unitless-flex-basis-values-are-ignored'>Flexbug #4</a> for more info."]}],"ie_mobile":{"version_added":"11"},"opera":{"version_added":"12.1"},"opera_android":{"version_added":"12.1"},"safari":[{"version_added":"9"},{"prefix":"-webkit-","version_added":"6.1"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":"7.1"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"float":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/float","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"7"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"flow_relative_values":{"__compat":{"description":"Flow-relative values <code>inline-start</code> and <code>inline-end</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"55"},"firefox_android":{"version_added":"55"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"font-family":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-family","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":"1"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"3"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"system_ui":{"__compat":{"description":"<code>system-ui</code>","support":{"webview_android":{"version_added":"56"},"chrome":{"version_added":"56"},"chrome_android":{"version_added":"56"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":false},{"alternative_name":"-apple-system","version_added":"43","notes":"Supported on macOS only."}],"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"43"},"opera_android":{"version_added":"43"},"safari":{"alternative_name":"-apple-system","version_added":"9","notes":"Supported since macOS 10.11."},"safari_ios":{"alternative_name":"-apple-system","version_added":true,"notes":"Supported since iOS 9."}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"font-feature-settings":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-feature-settings","support":{"webview_android":{"version_added":"4.4"},"chrome":[{"version_added":"48"},{"prefix":"-webkit-","version_added":"16"}],"chrome_android":{"version_added":"48"},"edge":{"version_added":"15"},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"34","notes":["The <a href='http://mpeg.chiariglione.org/standards/mpeg-4/open-font-format/text-isoiec-cd-14496-22-3rd-edition' >ISO/IEC CD 14496-22 3rd edition</a> suggests using the <code>ssty</code> feature to provide glyph variants more suitable for use in scripts (for example primes used as superscripts). Starting with Firefox 29, this is done automatically by the <a href='https://developer.mozilla.org/docs/Web/MathML'>MathML</a> rendering engine. The ISO/IEC CD 14496-22 3rd edition also suggests applying the <code>dtls</code> feature to letters when placing mathematical accents to get dotless forms (for example dotless i, j with a hat). Starting with Firefox 35, this is done automatically by the MathML rendering engine. You can override the default values determined by the MathML rendering engine with CSS."]},{"prefix":"-moz-","version_added":"15","notes":"From Firefox 4 to Firefox 14 (inclusive), Firefox supported an older, slightly different syntax. See <a href='http://hacks.mozilla.org/2010/11/firefox-4-font-feature-support/'>OpenType Font Feature support in Firefox 4</a>."}],"firefox_android":[{"version_added":"34","notes":["The <a href='http://mpeg.chiariglione.org/standards/mpeg-4/open-font-format/text-isoiec-cd-14496-22-3rd-edition' >ISO/IEC CD 14496-22 3rd edition</a> suggests using the <code>ssty</code> feature to provide glyph variants more suitable for use in scripts (for example primes used as superscripts). Starting with Firefox 29, this is done automatically by the <a href='https://developer.mozilla.org/docs/Web/MathML'>MathML</a> rendering engine. The ISO/IEC CD 14496-22 3rd edition also suggests applying the <code>dtls</code> feature to letters when placing mathematical accents to get dotless forms (for example dotless i, j with a hat). Starting with Firefox 35, this is done automatically by the MathML rendering engine. You can override the default values determined by the MathML rendering engine with CSS."]},{"prefix":"-moz-","version_added":"15","notes":"From Firefox 4 to Firefox 14 (inclusive), Firefox supported an older, slightly different syntax. See <a href='http://hacks.mozilla.org/2010/11/firefox-4-font-feature-support/'>OpenType Font Feature support in Firefox 4</a>."}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":null},"opera":[{"version_added":"35"},{"prefix":"-webkit-","version_added":"15"}],"opera_android":{"version_added":true},"safari":[{"version_added":"9.1"},{"partial_implementation":true,"version_added":"4","version_removed":"6"}],"safari_ios":[{"version_added":"9.3"},{"partial_implementation":true,"version_added":"3.2","version_removed":"6.1"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font-kerning":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-kerning","support":{"webview_android":{"version_added":null},"chrome":{"prefix":"-webkit-","version_added":"32"},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"32"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"32"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":"7"},"safari_ios":{"version_added":"7"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font-language-override":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-language-override","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}},{"prefix":"-moz-","version_added":"4"}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"font-size-adjust":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-size-adjust","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"43","flag":{"type":"preference","name":"Enable experimental Web Platform features"}},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"3","notes":"Before Firefox 40, <code>font-size-adjust: 0</code> was incorrectly interpreted as <code>font-size-adjust: none</code> (<a href='https://bugzil.la/1144885'>bug 1144885</a>)."},{"version_added":"1","notes":"Before Firefox 3, <code>font-size-adjust</code> was supported on Windows only."}],"firefox_android":{"version_added":"4"},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":"30","flag":{"type":"preference","name":"Enable experimental Web Platform features"}},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font-size":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-size","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":"1"},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"5.5"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"7"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"rem_values":{"__compat":{"description":"Rem values","support":{"webview_android":{"version_added":"4.1"},"chrome":{"version_added":"31"},"chrome_android":{"version_added":"42"},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"31","notes":["Before Firefox 57, animations using em units are not affected by changes to the <code>font-size</code> of the animated element's parent (<a href='https://bugzil.la/1254424'>bug 1254424</a>).","Before Firefox 57, some language settings' inherited <code>font-size</code> is smaller than expected (<a href='https://bugzil.la/1391341'>bug 1391341</a>)."]},"firefox_android":{"version_added":"31"},"ie":[{"version_added":"11"},{"partial_implementation":true,"version_added":"9","version_removed":"10"}],"ie_mobile":{"version_added":"10"},"opera":{"version_added":"28"},"opera_android":{"version_added":"12"},"safari":{"version_added":"7"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"font-stretch":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-stretch","support":{"webview_android":{"version_added":false},"chrome":{"version_added":"48"},"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"9"},"firefox_android":{"version_added":"9"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":null},"opera":{"version_added":"35"},"opera_android":{"version_added":false},"safari":{"version_added":"11"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-style","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":"1"},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"1","notes":"Before Firefox 44, <code>oblique</code> was not distinguished from <code>italic</code>."},"firefox_android":{"version_added":"4","notes":"Before Firefox 44, <code>oblique</code> was not distinguished from <code>italic</code>."},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"7"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font-synthesis":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-synthesis","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"33","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":{"version_added":"34"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9"},"safari_ios":{"version_added":"9.1"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"font-variant-alternates":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":true}},"annotation":{"__compat":{"description":"<code>annotation()</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates#annotation()","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":true}}},"character_variant":{"__compat":{"description":"<code>character-variant()</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates#character-variant()","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":true}}},"ornaments":{"__compat":{"description":"<code>ornaments()</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates#ornaments()","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":true}}},"styleset":{"__compat":{"description":"<code>styleset()</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates#styleset()","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":true}}},"stylistic":{"__compat":{"description":"<code>stylistic()</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates#stylistic()","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":true}}},"swash":{"__compat":{"description":"<code>swash()</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates#swash()","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":true}}}},"font-variant-caps":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-caps","support":{"webview_android":{"version_added":"52"},"chrome":{"version_added":"52"},"chrome_android":{"version_added":"52"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"39"},"opera_android":{"version_added":"39"},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"font-variant-east-asian":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian","support":{"webview_android":{"version_added":"63"},"chrome":{"version_added":"63"},"chrome_android":{"version_added":"63"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"50"},"opera_android":{"version_added":"50"},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"font-variant-ligatures":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures","support":{"webview_android":[{"version_added":"34"},{"prefix":"-webkit-","version_added":"4.4"}],"chrome":[{"version_added":"34"},{"prefix":"-webkit-","version_added":"31"}],"chrome_android":{"version_added":"34"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":[{"version_added":"21"},{"prefix":"-webkit-","version_added":"19"}],"opera_android":{"version_added":"21"},"safari":[{"version_added":"9.1"},{"prefix":"-webkit-","version_added":"7"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":"7"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font-variant-numeric":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric","support":{"webview_android":{"version_added":"52"},"chrome":{"version_added":"52"},"chrome_android":{"version_added":"52"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"39"},"opera_android":{"version_added":"39"},"safari":{"version_added":"9.1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font-variant-position":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant-position","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"24","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"font-variant":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-variant","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":"1"},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"uppercase_eszett":{"__compat":{"description":"<code>ß</code> → <code>SS</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":null},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"1"},"firefox_android":{"version_added":null},"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"turkic_is":{"__compat":{"description":"<code>i</code> → <code>İ</code> and <code>ı</code> → <code>I</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"14"},"firefox_android":{"version_added":"14"},"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"greek_accented_characters":{"__compat":{"description":"Greek accented characters","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"15"},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"css_fonts_shorthand":{"__compat":{"description":"CSS Fonts Module Level 3 shorthand","support":{"webview_android":{"version_added":null},"chrome":{"version_added":null},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"34"},{"version_added":"33","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"34"},{"version_added":"33","version_removed":"34","flag":{"type":"preference","name":"layout.css.font-features.enabled","value_to_set":"true"}}],"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":"9.1"},"safari_ios":{"version_added":"9.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"font-weight":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font-weight","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"2"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"3"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1.3"},"safari_ios":{"version_added":"3.1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/font","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"3"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"system_fonts":{"__compat":{"description":"System fonts","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":null},"ie":{"version_added":"4"},"ie_mobile":{"version_added":null},"opera":{"version_added":"6"},"opera_android":{"version_added":null},"safari":{"version_added":"1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"font_stretch_support":{"__compat":{"description":"Support for <code>font-stretch</code> values","support":{"webview_android":{"version_added":null},"chrome":{"version_added":true},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"43"},"firefox_android":{"version_added":"43"},"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"grid-area":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-area","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-auto-columns":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":[{"version_added":"16"},{"version_added":"12","alternative_name":"-ms-grid-columns"}],"edge_mobile":[{"version_added":"16"},{"version_added":"12","alternative_name":"-ms-grid-columns"}],"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":"10","alternative_name":"-ms-grid-columns"},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-auto-flow":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-auto-rows":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":[{"version_added":"16"},{"version_added":"12","alternative_name":"-ms-grid-rows"}],"edge_mobile":[{"version_added":"16"},{"version_added":"12","alternative_name":"-ms-grid-rows"}],"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":"10","alternative_name":"-ms-grid-rows"},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-column-end":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-column-end","support":{"webview_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-column-gap":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-column-gap","support":{"webview_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-column-start":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-column-start","support":{"webview_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-column":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-column","support":{"webview_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-gap":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-gap","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"percentage_values":{"__compat":{"description":"<code>&lt;percentage&gt;</code> values","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"52"},"firefox_android":{"version_added":"52"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"grid-row-end":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-row-end","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-row-gap":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-row-gap","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-row-start":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-row-start","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-row":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-row","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-template-areas":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-template-areas","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid-template-columns":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-template-columns","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"minmax":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/minmax","description":"<code>minmax()</code>","support":{"webview_android":{"version_added":false},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":false},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"repeat":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/repeat","description":"<code>repeat()</code>","support":{"webview_android":{"version_added":null},"chrome":[{"version_added":"57"},{"version_added":true,"flag":{"type":"preference","name":"Enable Experimental Web Platform Features"}}],"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"52","notes":"<a href='https://developer.mozilla.org/docs/Web/CSS/calc'><code>calc()</code></a> doesn't work in <code>repeat()</code> (see <a href='https://bugzil.la/1350069'>bug 1350069</a>)."},{"version_added":true,"flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52","notes":"<a href='https://developer.mozilla.org/docs/Web/CSS/calc'><code>calc()</code></a> doesn't work in <code>repeat()</code> (see <a href='https://bugzil.la/1350069'>bug 1350069</a>)."},{"version_added":true,"flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":true,"flag":{"type":"preference","name":"Enable Experimental Web Platform Features"}}],"opera_android":{"version_added":null},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"grid-template-rows":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-template-rows","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"minmax":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/minmax","description":"<code>minmax()</code>","support":{"webview_android":{"version_added":false},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":{"version_added":null},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":false},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"repeat":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/repeat","description":"<code>repeat()</code>","support":{"webview_android":{"version_added":null},"chrome":[{"version_added":"57"},{"version_added":true,"flag":{"type":"preference","name":"Enable Experimental Web Platform Features"}}],"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"52","notes":"<a href='https://developer.mozilla.org/docs/Web/CSS/calc'><code>calc()</code></a> doesn't work in <code>repeat()</code> (see <a href='https://bugzil.la/1350069'>bug 1350069</a>)."},{"version_added":true,"flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52","notes":"<a href='https://developer.mozilla.org/docs/Web/CSS/calc'><code>calc()</code></a> doesn't work in <code>repeat()</code> (see <a href='https://bugzil.la/1350069'>bug 1350069</a>)."},{"version_added":true,"flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":true,"flag":{"type":"preference","name":"Enable Experimental Web Platform Features"}}],"opera_android":{"version_added":null},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"grid-template":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid-template","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grid":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/grid","support":{"webview_android":{"version_added":"57"},"chrome":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"chrome_android":[{"version_added":"57"},{"version_added":"29","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"52"},{"version_added":"40","flag":{"type":"preference","name":"layout.css.grid.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":"44"},{"version_added":"28","flag":{"type":"preference","name":"Enable experimental Web Platform features"}}],"opera_android":{"version_added":"44"},"safari":{"version_added":"10.1"},"safari_ios":{"version_added":"10.3"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"left":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/left","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"5.5"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"line-height":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/line-height","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"7"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"list-style-image":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/list-style-image","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"7"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"list-style-position":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/list-style-position","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":null},"opera":{"version_added":"3.5"},"opera_android":{"version_added":null},"safari":{"version_added":"1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"list-style-type":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/list-style-type","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"arabic-indic":{"__compat":{"description":"<code>arabic-indic</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"armenian":{"__compat":{"description":"<code>armenian</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"8"},"ie_mobile":{"version_added":null},"opera":{"version_added":"6"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"bengali":{"__compat":{"description":"<code>bengali</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"cjk-decimal":{"__compat":{"description":"<code>cjk-decimal</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"28"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"cjk-earthly-branch":{"__compat":{"description":"<code>cjk-earthly-branch</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"cjk-heavenly-stem":{"__compat":{"description":"<code>cjk-heavenly-stem</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"cjk-ideographic":{"__compat":{"description":"<code>cjk-ideographic</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":[{"version_added":"15"},{"version_added":"7","partial_implementation":true,"notes":"Until version 15, only decimal numbers display."}],"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"decimal-leading-zero":{"__compat":{"description":"<code>decimal-leading-zero</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":null},"ie":{"version_added":"8"},"ie_mobile":{"version_added":null},"opera":{"version_added":"8"},"opera_android":{"version_added":null},"safari":{"version_added":"1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"devanagari":{"__compat":{"description":"<code>devanagari</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"disclosure-closed":{"__compat":{"description":"<code>disclosure-closed</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"disclosure-open":{"__compat":{"description":"<code>disclosure-open</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"ethiopic-numeric":{"__compat":{"description":"<code>ethiopic-numeric</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33","notes":"Before Firefox 38, Firefox added a dot as suffix of the number for <code>ethiopic-numeric</code> (for example, ፫. instead of ፫). The specification later defined the absence of a suffix, which Firefox 38 followed."},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"georgian":{"__compat":{"description":"<code>georgian</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"8"},"ie_mobile":{"version_added":null},"opera":{"version_added":"6"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"gujarati":{"__compat":{"description":"<code>gujarati</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"gurmukhi":{"__compat":{"description":"<code>gurmukhi</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"hebrew":{"__compat":{"description":"<code>hebrew</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":[{"version_added":"15"},{"version_added":"7","partial_implementation":true,"notes":"Until version 15, only decimal numbers display."}],"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"hiragana":{"__compat":{"description":"<code>hiragana</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":[{"version_added":"15"},{"version_added":"7","partial_implementation":true,"notes":"Until version 15, only decimal numbers display."}],"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"hiragana-iroha":{"__compat":{"description":"<code>hiragana-iroha</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":[{"version_added":"15"},{"version_added":"7","partial_implementation":true,"notes":"Until version 15, only decimal numbers display."}],"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"japanese-formal":{"__compat":{"description":"<code>japanese-formal</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"28"},{"prefix":"-moz-","version_added":"1"}],"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"japanese-informal":{"__compat":{"description":"<code>japanese-informal</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"28"},{"prefix":"-moz-","version_added":"1"}],"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"kannada":{"__compat":{"description":"<code>kannada</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"katakana":{"__compat":{"description":"<code>katakana</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":[{"version_added":"15"},{"version_added":"7","partial_implementation":true,"notes":"Until version 15, only decimal numbers display."}],"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"katakana-iroha":{"__compat":{"description":"<code>katakana-iroha</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":[{"version_added":"15"},{"version_added":"7","partial_implementation":true,"notes":"Until version 15, only decimal numbers display."}],"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"khmer":{"__compat":{"description":"<code>khmer</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"korean-hangul-formal":{"__compat":{"description":"<code>korean-hangul-formal</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"28"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"korean-hanja-formal":{"__compat":{"description":"<code>korean-hanja-formal</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"28"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"korean-hanja-informal":{"__compat":{"description":"<code>korean-hanja-informal</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"28"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"lao":{"__compat":{"description":"<code>lao</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"lower-greek":{"__compat":{"description":"<code>lower-greek</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"8"},"ie_mobile":{"version_added":null},"opera":{"version_added":"6"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"lower-latin":{"__compat":{"description":"<code>lower-latin</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"8"},"ie_mobile":{"version_added":null},"opera":{"version_added":"6"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"malayalam":{"__compat":{"description":"<code>malayalam</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"mongolian":{"__compat":{"description":"<code>mongolian</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"33"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"myanmar":{"__compat":{"description":"<code>myanmar</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"oriya":{"__compat":{"description":"<code>oriya</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"persian":{"__compat":{"description":"<code>persian</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"simp-chinese-formal":{"__compat":{"description":"<code>simp-chinese-formal</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"28"},{"prefix":"-moz-","version_added":"1"}],"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"simp-chinese-informal":{"__compat":{"description":"<code>simp-chinese-informal</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"28"},{"prefix":"-moz-","version_added":"1"}],"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"tamil":{"__compat":{"description":"<code>tamil</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"telugu":{"__compat":{"description":"<code>telugu</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"thai":{"__compat":{"description":"<code>thai</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":[{"version_added":"33"},{"prefix":"-moz-","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"trad-chinese-formal":{"__compat":{"description":"<code>trad-chinese-formal</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"28"},{"prefix":"-moz-","version_added":"1"}],"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"trad-chinese-informal":{"__compat":{"description":"<code>trad-chinese-informal</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"28"},{"prefix":"-moz-","version_added":"1"}],"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"upper-latin":{"__compat":{"description":"<code>upper-latin</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"8"},"ie_mobile":{"version_added":null},"opera":{"version_added":"6"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"string":{"__compat":{"description":"<code>&lt;string&gt;</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"39"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"symbols":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/symbols","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"35"},"firefox_android":{"version_added":"35"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"list-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/list-style","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":"12"},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"7"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"symbols":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/symbols","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"35"},"firefox_android":{"version_added":"35"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"margin-block-end":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/margin-block-end","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"margin-block-start":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/margin-block-start","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"margin-bottom":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/margin-bottom","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"3"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"auto":{"__compat":{"description":"<code>auto</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"6","notes":"The <code>auto</code> value is not supported in quirks mode."},"ie_mobile":{"version_added":null},"opera":{"version_added":"3.5"},"opera_android":{"version_added":null},"safari":{"version_added":"1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"margin-inline-end":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/margin-inline-end","support":{"webview_android":{"version_added":true},"chrome":{"alternative_name":"-webkit-padding-end","version_added":"2"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"41"},{"alternative_name":"-moz-padding-end","version_added":"3"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"alternative_name":"-moz-padding-end","version_added":"4"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"alternative_name":"-webkit-padding-end","version_added":"3"},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"margin-inline-start":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/margin-inline-start","support":{"webview_android":{"version_added":true},"chrome":{"alternative_name":"-webkit-padding-start","version_added":"2"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"41"},{"alternative_name":"-moz-padding-start","version_added":"3"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"alternative_name":"-moz-padding-start","version_added":"4"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"alternative_name":"-webkit-padding-start","version_added":"3"},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"margin-left":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/margin-left","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"3"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"auto":{"__compat":{"description":"<code>auto</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"6","notes":"The <code>auto</code> value is not supported in quirks mode."},"ie_mobile":{"version_added":null},"opera":{"version_added":"3.5"},"opera_android":{"version_added":null},"safari":{"version_added":"1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"margin-right":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/margin-right","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"3"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"auto":{"__compat":{"description":"<code>auto</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"6","notes":"The <code>auto</code> value is not supported in quirks mode."},"ie_mobile":{"version_added":null},"opera":{"version_added":"3.5"},"opera_android":{"version_added":null},"safari":{"version_added":"1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"margin-top":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/margin-top","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"3"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"auto":{"__compat":{"description":"<code>auto</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"6","notes":"The <code>auto</code> value is not supported in quirks mode."},"ie_mobile":{"version_added":null},"opera":{"version_added":"3.5"},"opera_android":{"version_added":null},"safari":{"version_added":"1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"margin":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/margin","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"3"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"3.5"},"opera_android":{"version_added":"6"},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"auto":{"__compat":{"description":"<code>auto</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"6","notes":"The <code>auto</code> value is not supported in quirks mode."},"ie_mobile":{"version_added":null},"opera":{"version_added":"3.5"},"opera_android":{"version_added":null},"safari":{"version_added":"1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"mask-clip":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/mask-clip","support":{"webview_android":{"version_added":null},"chrome":{"prefix":"-webkit-","version_added":true},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"53"},"firefox_android":{"version_added":"53"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"prefix":"-webkit-","version_added":true},"opera_android":{"version_added":null},"safari":{"prefix":"-webkit-","version_added":true},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}},"border":{"__compat":{"description":"<code>border<code>","support":{"webview_android":{"version_added":"2.1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":true},"opera_android":{"version_added":null},"safari":{"version_added":"4"},"safari_ios":{"version_added":"3.2"}},"status":{"experimental":true,"standard_track":false,"deprecated":false}}},"content":{"__compat":{"description":"<code>content</content>","support":{"webview_android":{"version_added":"2.1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":true},"opera_android":{"version_added":null},"safari":{"version_added":"4"},"safari_ios":{"version_added":"3.2"}},"status":{"experimental":true,"standard_track":false,"deprecated":false}}},"padding":{"__compat":{"description":"<code>padding</code>","support":{"webview_android":{"version_added":"2.1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":true},"opera_android":{"version_added":null},"safari":{"version_added":"4"},"safari_ios":{"version_added":"3.2"}},"status":{"experimental":true,"standard_track":false,"deprecated":false}}},"text":{"__compat":{"description":"<code>text</code>","support":{"webview_android":{"version_added":"2.1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":null},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":true},"opera_android":{"version_added":null},"safari":{"version_added":"4"},"safari_ios":{"version_added":"3.2"}},"status":{"experimental":true,"standard_track":false,"deprecated":false}}}},"mask-composite":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/mask-composite","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false,"notes":"See also <a href='https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-composite'><code>-webkit-mask-composite</code></a> for a similar non-standard property that uses different keywords."},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"53"},"firefox_android":{"version_added":"53"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false,"notes":"See also <a href='https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-composite'><code>-webkit-mask-composite</code></a> for a similar non-standard property that uses different keywords."},"opera_android":{"version_added":null},"safari":{"version_added":false,"notes":"See also <a href='https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-composite'><code>-webkit-mask-composite</code></a> for a similar non-standard property that uses different keywords."},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"mask-image":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/mask-image","support":{"webview_android":{"prefix":"-webkit-","version_added":"2.1","notes":"Initially, Android supported only <code>-webkit-</code> prefixed values for gradients (such as <code>-webkit-linear-gradient()</code>). Later, support for unprefixed values was added."},"chrome":{"prefix":"-webkit-","version_added":"1","notes":"From version 8, Chrome added support for gradient values. Initially, Chrome supported only <code>-webkit-</code> prefixed values for gradients (such as <code>-webkit-linear-gradient()</code>). Later, support for unprefixed values was added."},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"53"},"firefox_android":{"version_added":"53"},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"prefix":"-webkit-","version_added":true},"opera_android":{"version_added":null},"safari":{"prefix":"-webkit-","version_added":"4","notes":"Initially, Safari supported only <code>-webkit-</code> prefixed values for gradients (such as <code>-webkit-linear-gradient()</code>). Later, support for unprefixed values was added."},"safari_ios":{"prefix":"-webkit-","version_added":"3.2","notes":"Initially, Safari supported only <code>-webkit-</code> prefixed values for gradients (such as <code>-webkit-linear-gradient()</code>). Later, support for unprefixed values was added."}},"status":{"experimental":true,"standard_track":true,"deprecated":false}},"multiple_mask_images":{"__compat":{"description":"Multiple mask images","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"53"},"firefox_android":{"version_added":"53"},"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"version_added":true},"opera_android":{"version_added":false},"safari":{"version_added":"4"},"safari_ios":{"version_added":true}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"svg_masks":{"__compat":{"description":"SVG masks","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"8"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"53"},"firefox_android":{"version_added":"53"},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":true},"opera_android":{"version_added":false},"safari":{"version_added":"4"},"safari_ios":{"version_added":true}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"mask-mode":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/mask-mode","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"53"},"firefox_android":{"version_added":"53"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"mask-origin":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/mask-origin","support":{"webview_android":{"version_added":null},"chrome":{"prefix":"-webkit-","version_added":true,"notes":"The <code>margin-box</code> value is unsupported."},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"53"},"firefox_android":{"version_added":"53"},"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"prefix":"-webkit-","version_added":true,"notes":"The <code>margin-box</code> value is unsupported."},"opera_android":{"version_added":null},"safari":{"prefix":"-webkit-","version_added":true,"notes":"The <code>margin-box</code> value is unsupported."},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}},"fill-box":{"__compat":{"description":"<code>fill-box</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"stroke-box":{"__compat":{"description":"<code>stroke-box</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"view-box":{"__compat":{"description":"<code>view-box</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"non_standard_values":{"__compat":{"description":"Non-standard values <code>content</code>, <code>padding</code>, <code>border</code>","support":{"webview_android":{"prefix":"-webkit-","version_added":"2.1"},"chrome":{"prefix":"-webkit-","version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"prefix":"-webkit-","version_added":"4"},"safari_ios":{"prefix":"-webkit-","version_added":"3.2"}},"status":{"experimental":true,"standard_track":false,"deprecated":false}}}},"mask-position":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/mask-position","support":{"webview_android":{"version_added":null},"chrome":{"prefix":"-webkit-","version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"53"},"firefox_android":{"version_added":"53"},"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"prefix":"-webkit-","version_added":"4"},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"mask-repeat":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/mask-repeat","support":{"webview_android":{"prefix":"-webkit-","version_added":"2.1"},"chrome":{"prefix":"-webkit-","version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"53"},"firefox_android":{"version_added":"53"},"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"prefix":"-webkit-","version_added":"4"},"safari_ios":{"prefix":"-webkit-","version_added":"3.2"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"mask-type":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/mask-type","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"24"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"35"},{"version_added":"20","version_removed":"52","flag":{"type":"preference","name":"layout.css.masking.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"35"},{"version_added":"20","version_removed":"52","flag":{"type":"preference","name":"layout.css.masking.enabled","value_to_set":"true"}}],"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"applies_to_html":{"__compat":{"description":"Applies to HTML elements","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"20"},"firefox_android":{"version_added":"20"},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"mask":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/mask","support":{"webview_android":[{"version_added":"2.1"},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"1","partial_implementation":true,"notes":"While the property is recognized, values applied to it don't have any effect."},{"prefix":"-webkit-","version_added":true,"notes":"The prefixed property can be used with SVG and HTML with a slightly different syntax, which allows setting the non-standard <a href='https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-attachment'><code>-webkit-mask-attachment</code></a> property."}],"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":true,"notes":"From Firefox 10, the default color space when handling masks is sRGB. Previously, the default and only supported color space was linear RGB. This changes the appearance of mask effects, but brings Firefox into compliance with the second edition of the SVG 1.1 specification."},"firefox_android":{"version_added":true},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":[{"version_added":true,"partial_implementation":true,"notes":"While the property is recognized, values applied to it don't have any effect."},{"prefix":"-webkit-","version_added":true,"notes":"The prefixed property can be used with SVG and HTML with a slightly different syntax, which allows setting the non-standard <a href='https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-attachment'><code>-webkit-mask-attachment</code></a> property."}],"opera_android":{"version_added":null},"safari":[{"version_added":"4","partial_implementation":true,"notes":"While the property is recognized, values applied to it don't have any effect."},{"prefix":"-webkit-","version_added":true,"notes":"The prefixed property can be used with SVG and HTML with a slightly different syntax, which allows setting the non-standard <a href='https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-attachment'><code>-webkit-mask-attachment</code></a> property."}],"safari_ios":{"prefix":"-webkit-","version_added":"3.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"applies_to_html_elements":{"__compat":{"description":"Applies to HTML elements","support":{"webview_android":{"version_added":null},"chrome":{"prefix":"-webkit-","version_added":true},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"3.5"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"prefix":"-webkit-","version_added":true},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"shorthand_for_mask_properties":{"__compat":{"description":"Shorthand for <code>mask-*</code> properties","support":{"webview_android":{"version_added":null},"chrome":{"prefix":"-webkit-","version_added":true},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"53"},"firefox_android":{"version_added":"53"},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"prefix":"-webkit-","version_added":true},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"order":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/order","support":{"webview_android":{"version_added":null},"chrome":[{"version_added":"29"},{"prefix":"-webkit-","version_added":"21"}],"chrome_android":{"version_added":null},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"20","notes":"Since Firefox 28, multi-line flexbox is supported."},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"48","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"version_added":"18","version_removed":"28","flag":{"type":"preference","name":"layout.css.flexbox.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"20","notes":"Since Firefox 28, multi-line flexbox is supported."},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"48","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}},{"version_added":"18","version_removed":"28","flag":{"type":"preference","name":"layout.css.flexbox.enabled","value_to_set":"true"}}],"ie":[{"version_added":"11"},{"prefix":"-ms-","version_added":"10"}],"ie_mobile":{"version_added":null},"opera":{"version_added":"12.1"},"opera_android":{"version_added":"12.1"},"safari":[{"version_added":"9"},{"prefix":"-webkit-","version_added":"7"}],"safari_ios":[{"version_added":"9"},{"prefix":"-webkit-","version_added":"7"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"absolutely_positioned_flex_children":{"__compat":{"description":"Absolutely-positioned flex children","support":{"webview_android":{"version_added":null},"chrome":{"version_added":true},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":null},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":"10"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":"12.1"},"opera_android":{"version_added":"12.1"},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"padding-block-end":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/padding-block-end","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"padding-block-start":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/padding-block-start","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"padding-bottom":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/padding-bottom","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"padding-inline-end":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/padding-inline-end","support":{"webview_android":{"alternative_name":"-webkit-padding-end","version_added":true},"chrome":{"alternative_name":"-webkit-padding-end","version_added":"2"},"chrome_android":{"alternative_name":"-webkit-padding-end","version_added":"2"},"edge":{"version_added":null},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}},{"alternative_name":"-moz-padding-end","version_added":"3"}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}},{"alternative_name":"-moz-padding-end","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"alternative_name":"-webkit-padding-end","version_added":"15"},"opera_android":{"alternative_name":"-webkit-padding-end","version_added":"15"},"safari":{"alternative_name":"-webkit-padding-end","version_added":"3"},"safari_ios":{"alternative_name":"-webkit-padding-end","version_added":true}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"padding-inline-start":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/padding-inline-start","support":{"webview_android":{"alternative_name":"-webkit-padding-end","version_added":true},"chrome":{"alternative_name":"-webkit-padding-start","version_added":"2"},"chrome_android":{"alternative_name":"-webkit-padding-end","version_added":true},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}},{"alternative_name":"-moz-padding-start","version_added":"3"}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}},{"alternative_name":"-moz-padding-start","version_added":"4"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"alternative_name":"-webkit-padding-end","version_added":true},"opera_android":{"alternative_name":"-webkit-padding-end","version_added":true},"safari":{"alternative_name":"-webkit-padding-start","version_added":"3"},"safari_ios":{"alternative_name":"-webkit-padding-end","version_added":true}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"padding-left":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/padding-left","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"padding-right":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/padding-right","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"padding-top":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/padding-top","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"padding":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/padding","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"perspective-origin":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/perspective-origin","support":{"webview_android":{"prefix":"-webkit-","version_added":"3"},"chrome":{"prefix":"-webkit-","version_added":"12"},"chrome_android":{"version_added":null},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"prefix":"-moz-","version_added":"10"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"45","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"16"},{"prefix":"-moz-","version_added":"10"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"45","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":"8.1"},"opera":{"prefix":"-webkit-","version_added":"15"},"opera_android":{"prefix":"-webkit-","version_added":true},"safari":{"prefix":"-webkit-","version_added":true},"safari_ios":{"prefix":"-webkit-","version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"perspective":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/perspective","support":{"webview_android":{"prefix":"-webkit-","version_added":"3"},"chrome":[{"version_added":"45"},{"prefix":"-webkit-","version_added":"12"}],"chrome_android":{"version_added":null},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"prefix":"-moz-","version_added":"10"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"45","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"16"},{"prefix":"-moz-","version_added":"10"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"45","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":"8.1"},"opera":{"prefix":"-webkit-","version_added":"15"},"opera_android":{"prefix":"-webkit-","version_added":true},"safari":{"prefix":"-webkit-","version_added":true},"safari_ios":{"prefix":"-webkit-","version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"position":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/position","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1","notes":"Before Firefox 57, absolute positioning did not work correctly when applied to elements inside tables that have <a href='https://developer.mozilla.org/docs/Web/CSS/border-collapse'><code>border-collapse</code></a> applied to them (<a href='https://bugzil.la/1379306'>bug 1379306</a>)."},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4","notes":"In Internet Explorer, fixed positioning doesn't work if the document is in <a href='http://msdn.microsoft.com/en-us/library/ie/ms531140(v=vs.85).aspx'>quirks mode</a>."},"ie_mobile":{"version_added":null},"opera":{"version_added":"4"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"fixed":{"__compat":{"description":"<code>fixed</code>","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1","notes":"Before Firefox 44, <code>position: fixed</code> didn't create a stacking context in most cases. Firefox and the specification have been modified to mimic Chrome and Safari's long-time behavior."},"firefox_android":{"version_added":null},"ie":{"version_added":"7"},"ie_mobile":{"version_added":null},"opera":{"version_added":"4"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"sticky":{"__compat":{"description":"<code>sticky</code>","support":{"webview_android":{"version_added":"56"},"chrome":{"version_added":"56"},"chrome_android":{"version_added":"56"},"edge":{"version_added":"16"},"edge_mobile":{"version_added":"16"},"firefox":[{"version_added":"32"},{"version_added":"26","version_removed":"48","flag":{"type":"preference","name":"layout.css.sticky.enabled","value_to_set":"true"}}],"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":"43"},"opera_android":{"version_added":"43"},"safari":{"prefix":"-webkit-","version_added":"6.1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"position_relative_table_elements":{"__compat":{"description":"Table elements as absolute positioning containers","support":{"webview_android":{"version_added":null},"chrome":{"version_added":null},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"30","notes":"Firefox later helps developers transition to the new behavior and detect any rendering issues it may cause on their sites by printing the following warning to the JavaScript console: &quot;Relative positioning of table rows and row groups is now supported. This site may need to be updated because it may depend on this feature having no effect.&quot;"},"firefox_android":{"version_added":"30","notes":"Firefox helps developers transition to the new behavior and detect any rendering issues it may cause on their sites by printing the following warning to the JavaScript console: &quot;Relative positioning of table rows and row groups is now supported. This site may need to be updated because it may depend on this feature having no effect.&quot;"},"ie":{"version_added":null},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"right":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/right","support":{"webview_android":{"version_added":"1"},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"5.5"},"ie_mobile":{"version_added":"6"},"opera":{"version_added":"5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":"1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"scroll-behavior":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/scroll-behavior","support":{"webview_android":{"version_added":false},"chrome":{"version_added":"61","flag":{"type":"preference","name":"Enable experimental web platform features","value_to_set":"true"}},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"36"},"firefox_android":{"version_added":"36"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":true,"flag":{"type":"preference","name":"Smooth Scrolling","value_to_set":"true"}},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"scroll-snap-coordinate":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-coordinate","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"39"},"firefox_android":[{"version_added":"46"},{"version_added":"39","flag":{"type":"preference","name":"layout.css.scroll-snap.enabled","value_to_set":"true"}}],"ie_mobile":{"version_added":false},"ie":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":true}}},"scroll-snap-destination":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-destination","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"39"},"firefox_android":[{"version_added":"46"},{"version_added":"39","flag":{"type":"preference","name":"layout.css.scroll-snap.enabled","value_to_set":"true"}}],"ie_mobile":{"version_added":false},"ie":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":true}}},"scroll-snap-points-x":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-x","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"39"},"firefox_android":[{"version_added":"46"},{"version_added":"39","flag":{"type":"preference","name":"layout.css.scroll-snap.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9","prefix":"-webkit-"},"safari_ios":{"version_added":"9","prefix":"-webkit-"}},"status":{"experimental":false,"standard_track":false,"deprecated":true}}},"scroll-snap-points-y":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-y","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"39"},"firefox_android":[{"version_added":"46"},{"version_added":"39","flag":{"type":"preference","name":"layout.css.scroll-snap.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9","prefix":"-webkit-"},"safari_ios":{"version_added":"9","prefix":"-webkit-"}},"status":{"experimental":false,"standard_track":false,"deprecated":true}}},"scroll-snap-type-x":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-x","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"39"},"firefox_android":[{"version_added":"46"},{"version_added":"39","flag":{"type":"preference","name":"layout.css.scroll-snap.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9"},"safari_ios":{"version_added":"9"}},"status":{"experimental":false,"standard_track":false,"deprecated":true}}},"scroll-snap-type-y":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-y","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"39"},"firefox_android":[{"version_added":"46"},{"version_added":"39","flag":{"type":"preference","name":"layout.css.scroll-snap.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":false,"deprecated":true}}},"scroll-snap-type":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":"12","prefix":"-ms-"},"edge_mobile":{"version_added":"12","prefix":"-ms-"},"firefox":{"version_added":"39"},"firefox_android":[{"version_added":"46"},{"version_added":"39","flag":{"type":"preference","name":"layout.css.scroll-snap.enabled","value_to_set":"true"}}],"ie":{"version_added":"10","prefix":"-ms-"},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"9","prefix":"-webkit-"},"safari_ios":{"version_added":"9","prefix":"-webkit-"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"text-align-last":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-align-last","support":{"webview_android":{"version_added":false},"chrome":[{"version_added":"35","version_removed":"47","flag":{"type":"preference","name":"Enable Experimental Web Platform Features","value_to_set":"true"}},{"version_added":"47"}],"chrome_android":[{"version_added":"35","version_removed":"47","flag":{"type":"preference","name":"Enable Experimental Web Platform Features","value_to_set":"true"}},{"version_added":"47"}],"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"prefix":"-moz-","version_added":"12","version_removed":"53"},{"version_added":"49"}],"firefox_android":[{"prefix":"-moz-","version_added":"14","version_removed":"53"},{"version_added":"49"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":false,"notes":"See Webkit bug 76173."},"safari_ios":{"version_added":false,"notes":"See Webkit bug 76173."}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"text-align":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-align","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"3"},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"block_alignment_values":{"__compat":{"description":"Prefixed <code>center</code>, <code>left</code>, and <code>right</code> values for block alignment","support":{"webview_android":{"version_added":null},"chrome":{"prefix":"-webkit-","version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"prefix":"-moz-","version_added":"1"},"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":[{"prefix":"-webkit-","version_added":"1.3"},{"prefix":"-khtml-","version_added":"1"}],"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":false,"deprecated":true}}},"flow_relative_values_start_and_end":{"__compat":{"description":"Flow-relative values <code>start</code> and <code>end</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":null},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":"3.1"},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"match-parent":{"__compat":{"description":"<code>match-parent</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":"16"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"40"},"firefox_android":{"version_added":"40"},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":false},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"justify-all":{"__compat":{"description":"<code>justify-all</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"text-combine-upright":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-combine-upright","support":{"webview_android":{"version_added":"48"},"chrome":[{"version_added":"48"},{"partial_implementation":true,"alternative_name":"-webkit-text-combine","version_added":true,"notes":"This property was initially named <code>-webkit-text-combine</code> according to a <a href='http://www.w3.org/TR/2011/WD-css3-writing-modes-20110531/#text-combine'>2011 version of the CSS3 Writing Modes specification</a>, supporting the values <code>none</code> and <code>horizontal</code> without <code>digits</code>."}],"chrome_android":{"version_added":"48"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"48","notes":"Before version 48, Firefox did not implement layout support for tate-chū-yoko."},{"version_added":"41","flag":{"type":"preference","name":"layout.css.text-combine-upright.enabled","value_to_set":"true"}},{"version_added":"31","version_removed":true,"flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}},{"version_added":"26","version_removed":"31","alternative_name":"text-combine-horizontal","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"48","notes":"Before version 48, Firefox did not implement layout support for tate-chū-yoko."},{"version_added":"41","flag":{"type":"preference","name":"layout.css.text-combine-upright.enabled","value_to_set":"true"}},{"version_added":"31","version_removed":true,"flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}},{"version_added":"26","version_removed":"31","alternative_name":"text-combine-horizontal","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":"11","alternative_name":"-ms-text-combine-horizontal"},"ie_mobile":{"version_added":false},"opera":[{"version_added":true},{"partial_implementation":true,"alternative_name":"-webkit-text-combine","version_added":true,"notes":"This property was initially named <code>-webkit-text-combine</code> according to a <a href='http://www.w3.org/TR/2011/WD-css3-writing-modes-20110531/#text-combine'>2011 version of the CSS3 Writing Modes specification</a>, supporting the values <code>none</code> and <code>horizontal</code> without digits."}],"opera_android":{"version_added":false},"safari":{"partial_implementation":true,"alternative_name":"-webkit-text-combine","version_added":true,"notes":"This property was initially named <code>-webkit-text-combine</code> according to a <a href='http://www.w3.org/TR/2011/WD-css3-writing-modes-20110531/#text-combine'>2011 version of the CSS3 Writing Modes specification</a>, supporting the values <code>none</code> and <code>horizontal</code> without digits."},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"digits":{"__compat":{"description":"<code>digits</code>","support":{"webview_android":{"version_added":null},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"48","flag":{"type":"preference","name":"layout.css.text-combine-upright-digits.enabled","value_to_set":"true"},"notes":"Firefox recognizes this value but does not yet implement layout support for tate-chū-yoko (see <a href='https://bugzil.la/1258635'> bug 1258635</a>)."},"firefox_android":{"version_added":"48","flag":{"type":"preference","name":"layout.css.text-combine-upright-digits.enabled","value_to_set":"true"},"notes":"Firefox recognizes this value but does not yet implement layout support for tate-chū-yoko (see <a href='https://bugzil.la/1258635'> bug 1258635</a>)."},"ie":{"version_added":true},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"text-decoration-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-decoration-color","support":{"webview_android":{"version_added":"57"},"chrome":{"version_added":"57"},"chrome_android":{"version_added":"57"},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"36"},{"prefix":"-moz-","version_added":"6","version_removed":"39"}],"firefox_android":[{"version_added":"36"},{"prefix":"-moz-","version_added":"6","version_removed":"39"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"44"},"opera_android":{"version_added":"44"},"safari":{"prefix":"-webkit-","version_added":true},"safari_ios":{"prefix":"-webkit-","version_added":"8"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"text-decoration-line":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-decoration-line","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"chrome_android":{"version_added":true},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"36"},{"prefix":"-moz-","version_added":"6","version_removed":"39"}],"firefox_android":[{"version_added":"36"},{"prefix":"-moz-","version_added":"6","version_removed":"39"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"prefix":"-webkit-","version_added":true},"safari_ios":{"prefix":"-webkit-","version_added":"8"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"blink":{"__compat":{"description":"<code>blink</code>","support":{"webview_android":{"version_added":"57","notes":"The <code>blink</code> value does not have any effect."},"chrome":{"version_added":"57","notes":"The <code>blink</code> value does not have any effect."},"chrome_android":{"version_added":"57","notes":"The <code>blink</code> value does not have any effect."},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"26","notes":"The <code>blink</code> value does not have any effect."},"firefox_android":{"version_added":"26","notes":"The <code>blink</code> value does not have any effect."},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"44"},"opera_android":{"version_added":"44"},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":true}}}},"text-decoration-skip-ink":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink","support":{"webview_android":{"version_added":"64"},"chrome":{"version_added":"64"},"chrome_android":{"version_added":"64"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"50"},"opera_android":{"version_added":"50"},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"text-decoration-skip":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip","support":{"webview_android":{"version_added":"57"},"chrome":{"version_added":"57"},"chrome_android":{"version_added":"57"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"44"},"opera_android":{"version_added":"44"},"safari":{"version_added":"8","prefix":"-webkit-","notes":"Only supports the <code>none</code> and <code>skip</code> values; all other values behave like those two values."},"safari_ios":{"version_added":"8","prefix":"-webkit-","notes":"Only supports the <code>none</code> and <code>skip</code> values; all other values behave like those two values."}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"text-decoration-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-decoration-style","support":{"webview_android":{"version_added":"57"},"chrome":{"version_added":"57"},"chrome_android":{"version_added":"57"},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"36"},{"prefix":"-moz-","version_added":"6","version_removed":"39"}],"firefox_android":[{"version_added":"36"},{"prefix":"-moz-","version_added":"6","version_removed":"39"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"44"},"opera_android":{"version_added":"44"},"safari":{"prefix":"-webkit-","version_added":true},"safari_ios":{"prefix":"-webkit-","version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"wavy":{"__compat":{"description":"<code>wavy</code>","support":{"webview_android":{"version_added":"57"},"chrome":{"version_added":"57"},"chrome_android":{"version_added":"57"},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"6"},"firefox_android":{"version_added":"6"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"44"},"opera_android":{"version_added":"44"},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"text-decoration":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-decoration","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"3"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"blink":{"__compat":{"description":"<code>blink</code>","support":{"webview_android":{"version_added":"57","notes":"The <code>blink</code> value does not have any effect."},"chrome":{"version_added":"57","notes":"The <code>blink</code> value does not have any effect."},"chrome_android":{"version_added":"57","notes":"The <code>blink</code> value does not have any effect."},"edge":{"version_added":true,"notes":"The <code>blink</code> value does not have any effect."},"edge_mobile":{"version_added":true,"notes":"The <code>blink</code> value does not have any effect."},"firefox":[{"version_added":"23","notes":"The <code>blink</code> value does not have any effect."},{"version_added":"1"}],"firefox_android":[{"version_added":"23","notes":"The <code>blink</code> value does not have any effect."},{"version_added":"4"}],"ie":{"version_added":true,"notes":"The <code>blink</code> value does not have any effect."},"ie_mobile":{"version_added":true,"notes":"The <code>blink</code> value does not have any effect."},"opera":[{"version_added":"15","notes":"The <code>blink</code> value does not have any effect."},{"version_added":"4"}],"opera_android":{"version_added":"4","notes":"The <code>blink</code> value does not have any effect."},"safari":{"version_added":true,"notes":"The <code>blink</code> value does not have any effect."},"safari_ios":{"version_added":true,"notes":"The <code>blink</code> value does not have any effect."}},"status":{"experimental":false,"standard_track":true,"deprecated":true}}},"shorthand":{"__compat":{"description":"Shorthand","support":{"webview_android":{"version_added":null},"chrome":{"version_added":null},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"36"},{"partial_implementation":true,"version_added":"6"}],"firefox_android":[{"version_added":"36"},{"partial_implementation":true,"version_added":"6"}],"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":null},"safari":{"version_added":true,"notes":"Safari doesn't support <a href='https://developer.mozilla.org/docs/Web/CSS/text-decoration-style'><code>text-decoration-style</code></a>."},"safari_ios":{"version_added":"8","notes":"Safari doesn't support <a href='https://developer.mozilla.org/docs/Web/CSS/text-decoration-style'><code>text-decoration-style</code></a>."}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"text-emphasis-color":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color","support":{"webview_android":{"prefix":"-webkit-","version_added":"4.4"},"chrome":{"prefix":"-webkit-","version_added":"25"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"46"},{"version_added":"45","version_removed":"49","flag":{"type":"preference","name":"layout.css.text-emphasis.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"46"},{"version_added":"45","version_removed":"49","flag":{"type":"preference","name":"layout.css.text-emphasis.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"prefix":"-webkit-","version_added":"15"},"opera_android":{"prefix":"-webkit-","version_added":"33"},"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"6.1"}],"safari_ios":{"version_added":"7.1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"text-emphasis-position":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position","support":{"webview_android":[{"version_added":true},{"prefix":"-webkit-","version_added":"4.4"}],"chrome":[{"version_added":true},{"prefix":"-webkit-","version_added":"25"}],"chrome_android":{"version_added":true},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"46"},{"version_added":"45","version_removed":"49","flag":{"type":"preference","name":"layout.css.text-emphasis.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"46"},{"version_added":"45","version_removed":"49","flag":{"type":"preference","name":"layout.css.text-emphasis.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":[{"version_added":true},{"prefix":"-webkit-","version_added":"15"}],"opera_android":[{"version_added":true},{"prefix":"-webkit-","version_added":"33"}],"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"6.1"}],"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"left_and_right":{"__compat":{"description":"<code>left</code> and <code>right</code>","support":{"webview_android":{"version_added":"62"},"chrome":{"version_added":"62"},"chrome_android":{"version_added":"62"},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"46"},"firefox_android":{"version_added":"46"},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":"49"},"opera_android":{"version_added":"49"},"safari":{"version_added":true},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"text-emphasis-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style","support":{"webview_android":{"prefix":"-webkit-","version_added":"4.4"},"chrome":{"prefix":"-webkit-","version_added":"25"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"46"},{"version_added":"45","version_removed":"49","flag":{"type":"preference","name":"layout.css.text-emphasis.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"46"},{"version_added":"45","version_removed":"49","flag":{"type":"preference","name":"layout.css.text-emphasis.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"prefix":"-webkit-","version_added":"15"},"opera_android":{"prefix":"-webkit-","version_added":"33"},"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"6.1"}],"safari_ios":{"version_added":"7.1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"text-emphasis":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-emphasis","support":{"webview_android":{"prefix":"-webkit-","version_added":"4.4"},"chrome":{"prefix":"-webkit-","version_added":"25"},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"46"},{"version_added":"45","version_removed":"49","flag":{"type":"preference","name":"layout.css.text-emphasis.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"46"},{"version_added":"45","version_removed":"49","flag":{"type":"preference","name":"layout.css.text-emphasis.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"prefix":"-webkit-","version_added":"15"},"opera_android":{"prefix":"-webkit-","version_added":"33"},"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"6.1"}],"safari_ios":{"version_added":"7.1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"text-indent":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-indent","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"3"},"ie_mobile":{"version_added":true},"opera":{"version_added":"3.5"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"each-line":{"__compat":{"description":"<code>each-line</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"hanging":{"__compat":{"description":"<code>hanging</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"text-justify":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-justify","support":{"webview_android":{"version_added":false},"chrome":{"version_added":true,"flag":{"type":"preference","name":"Enable Experimental Web Platform Features","value_to_set":"true"},"notes":"<code>inter-word</code> and <code>distribute</code> (deprecated) values are supported, but <code>distribute</code> behavior is buggy."},"chrome_android":{"version_added":true,"flag":{"type":"preference","name":"Enable Experimental Web Platform Features","value_to_set":"true"},"notes":"<code>inter-word</code> and <code>distribute</code> (deprecated) values are supported, but <code>distribute</code> behavior is buggy."},"edge":{"version_added":"14","notes":"Standard values <code>inter-character</code> and <code>none</code> are supported. The deprecated <code>distribute</code> value is also supported."},"edge_mobile":{"version_added":"14","notes":"Standard values <code>inter-character</code> and <code>none</code> are supported. The deprecated <code>distribute</code> value is also supported."},"firefox":{"version_added":"55"},"firefox_android":{"version_added":"55"},"ie":{"version_added":"11","notes":"Standard values <code>inter-character</code> and <code>none</code> are supported. The deprecated <code>distribute</code> value is also supported."},"ie_mobile":{"version_added":null},"opera":{"version_added":true,"flag":{"type":"preference","name":"Enable Experimental Web Platform Features","value_to_set":"true"},"notes":"<code>inter-word</code> and <code>distribute</code> (deprecated) values are supported, but <code>distribute</code> behavior is buggy."},"opera_android":{"version_added":true,"flag":{"type":"preference","name":"Enable Experimental Web Platform Features","value_to_set":"true"},"notes":"<code>inter-word</code> and <code>distribute</code> (deprecated) values are supported, but <code>distribute</code> behavior is buggy."},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"text-orientation":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-orientation","support":{"webview_android":[{"version_added":"48"},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"48"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"48"},{"prefix":"-webkit-","version_added":true}],"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"41"},{"version_added":"38","version_removed":"51","flag":{"type":"preference","name":"layout.css.vertical-text.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"prefix":"-webkit-","version_added":true},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"sideways":{"__compat":{"description":"<code>sideways</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"44","notes":"<code>sideways-right</code> has become an alias of <code>sideways</code>."},"firefox_android":{"version_added":"44","notes":"<code>sideways-right</code> has become an alias of <code>sideways</code>."},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"text-overflow":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/text-overflow","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"7","notes":"Until Firefox 10, handling of <code>text-overflow</code> on blocks with inline overflow on both horizontal sides was incorrect. Before Firefox 10, if only one value was specified (such as <code>text-overflow: ellipsis;</code>), text was ellipsed on both sides of the block, instead of only the end edge based on the block's text direction."},"firefox_android":{"version_added":"7","notes":"Until Firefox 10, handling of <code>text-overflow</code> on blocks with inline overflow on both horizontal sides was incorrect. Before Firefox 10, if only one value was specified (such as <code>text-overflow: ellipsis;</code>), text was ellipsed on both sides of the block, instead of only the end edge based on the block's text direction."},"ie":[{"version_added":"6"},{"prefix":"-ms-","version_added":"8"}],"ie_mobile":{"version_added":null},"opera":[{"version_added":"11"},{"prefix":"-o-","version_added":"9"}],"opera_android":{"version_added":true},"safari":{"version_added":"1.3"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"two_value_syntax":{"__compat":{"description":"Two-value syntax","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"9"},"firefox_android":{"version_added":"9"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"string":{"__compat":{"description":"&lt;string&gt;","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"9"},"firefox_android":{"version_added":"9"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"fade_value":{"__compat":{"description":"<code>fade</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"fade_function":{"__compat":{"description":"<code>fade()</code>","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"top":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/top","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"5","notes":"In Internet Explorer versions before 7, when both <code>top</code> and <code>bottom</code> are specified, the element position is overconstrained and the <code>top</code> property has precedence; the computed value of <code>bottom</code> is set to <code>-top</code>, while its specified value is ignored."},"ie_mobile":{"version_added":true},"opera":{"version_added":"6"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"touch-action":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/touch-action","description":"Level 1 values","support":{"webview_android":{"version_added":"36"},"chrome":{"version_added":"36"},"chrome_android":{"version_added":"36"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"52","notes":"Not applicable to Firefox platforms that support neither pointer nor touch events."},{"version_added":"29","flag":{"type":"preference","name":"layout.css.touch_action.enabled","value_to_set":"true"},"notes":"Not applicable to Firefox platforms that support neither pointer nor touch events."}],"firefox_android":[{"version_added":"52"},{"version_added":"29","flag":{"type":"preference","name":"layout.css.touch_action.enabled","value_to_set":"true"}}],"ie":[{"version_added":"11"},{"version_added":"10","prefix":"-ms-"}],"ie_mobile":[{"version_added":"11"},{"version_added":"10","prefix":"-ms-"}],"opera":{"version_added":"23"},"opera_android":{"version_added":true},"safari":{"version_added":false,"notes":"See <a href='https://bugs.webkit.org/show_bug.cgi?id=133112'>WebKit bug 133112</a>."},"safari_ios":{"version_added":false,"notes":"See <a href='https://bugs.webkit.org/show_bug.cgi?id=133112'>WebKit bug 133112</a>."}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"manipulation":{"__compat":{"support":{"webview_android":{"version_added":"36"},"chrome":{"version_added":"36"},"chrome_android":{"version_added":"36"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":[{"version_added":"52","notes":"Not applicable to Firefox platforms that support neither pointer nor touch events."},{"version_added":"29","flag":{"type":"preference","name":"layout.css.touch_action.enabled","value_to_set":"true"},"notes":"Not applicable to Firefox platforms that support neither pointer nor touch events."}],"firefox_android":[{"version_added":"52"},{"version_added":"29","flag":{"type":"preference","name":"layout.css.touch_action.enabled","value_to_set":"true"}}],"ie":[{"version_added":"11"},{"version_added":"10","prefix":"-ms-"}],"ie_mobile":[{"version_added":"11"},{"version_added":"10","prefix":"-ms-"}],"opera":{"version_added":"23"},"opera_android":{"version_added":true},"safari":{"version_added":false},"safari_ios":{"version_added":"9.1"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"double-tap-zoom":{"__compat":{"support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":[{"version_added":"11"},{"version_added":"10","prefix":"-ms-"}],"ie_mobile":[{"version_added":"11"},{"version_added":"10","prefix":"-ms-"}],"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":false,"deprecated":false}}},"pinch-zoom":{"__compat":{"support":{"webview_android":{"version_added":"56"},"chrome":{"version_added":"56"},"chrome_android":{"version_added":"56"},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":false,"notes":"See <a href='https://bugzil.la/1285685'>bug 1285685</a>."},"firefox_android":{"version_added":false,"notes":"See <a href='https://bugzil.la/1285685'>bug 1285685</a>."},"ie":[{"version_added":"11"},{"version_added":"10","prefix":"-ms-"}],"ie_mobile":[{"version_added":"11"},{"version_added":"10","prefix":"-ms-"}],"opera":{"version_added":"43"},"opera_android":{"version_added":"43"},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"unidirectional-pan":{"__compat":{"description":"<code>pan-up</code>, <code>pan-down</code>, <code>pan-left</code> and <code>pan-right</code>","support":{"webview_android":{"version_added":"55"},"chrome":{"version_added":"55"},"chrome_android":{"version_added":"55"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":false,"notes":"See <a href='https://bugzil.la/1285685'>bug 1285685</a>."},"firefox_android":{"version_added":false,"notes":"See <a href='https://bugzil.la/1285685'>bug 1285685</a>."},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"42"},"opera_android":{"version_added":"42"},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"transform-box":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/transform-box","support":{"webview_android":{"version_added":"64"},"chrome":{"version_added":"64"},"chrome_android":{"version_added":"64"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"version_added":"55"},{"version_added":"43","flag":{"type":"preference","name":"svg.transform-box.enabled","value_to_set":"true"}},{"version_added":"41","version_removed":"43","flag":{"type":"preference","name":"svg.transform-origin.enabled","value_to_set":"true"}}],"firefox_android":[{"version_added":"55"},{"version_added":"43","flag":{"type":"preference","name":"svg.transform-box.enabled","value_to_set":"true"}},{"version_added":"41","version_removed":true,"flag":{"type":"preference","name":"svg.transform-origin.enabled","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"51"},"opera_android":{"version_added":"51"},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"transform-origin":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/transform-origin","support":{"webview_android":{"version_added":null},"chrome":{"prefix":"-webkit-","version_added":true},"chrome_android":{"version_added":null},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"prefix":"-moz-","version_added":"3.5"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"16"},{"prefix":"-moz-","version_added":"4"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":[{"version_added":"10"},{"prefix":"-ms-","version_added":"9"}],"ie_mobile":{"prefix":"-webkit-","version_added":"8.1"},"opera":[{"version_added":"12.1"},{"prefix":"-o-","version_added":"10.5"}],"opera_android":{"version_added":null},"safari":{"prefix":"-webkit-","version_added":"3.1"},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"three_value_syntax":{"__compat":{"description":"Three-value syntax","support":{"webview_android":{"version_added":null},"chrome":{"version_added":true},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":"10"},"firefox_android":{"version_added":null},"ie":{"version_added":"9"},"ie_mobile":{"version_added":null},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":true},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"support_in_svg":{"__compat":{"description":"Support in SVG","support":{"webview_android":{"version_added":null},"chrome":{"version_added":true},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":[{"version_added":"43","notes":"Keywords and percentages refer to the canvas instead of the object itself. See <a href='https://bugzil.la/1209061'>bug 1209061</a>."},{"version_added":"41","version_removed":true,"flag":{"type":"preference","name":"svg.transform-origin.enabled","value_to_set":"true"},"notes":"Keywords and percentages refer to the canvas instead of the object itself. See <a href='https://bugzil.la/1209061'>bug 1209061</a>."}],"firefox_android":{"version_added":null},"ie":{"version_added":false},"ie_mobile":{"version_added":null},"opera":{"version_added":true},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"transform-style":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/transform-style","support":{"webview_android":{"prefix":"-webkit-","version_added":"3"},"chrome":{"prefix":"-webkit-","version_added":"12"},"chrome_android":{"version_added":null},"edge":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"edge_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"firefox":[{"version_added":"16"},{"prefix":"-moz-","version_added":"10"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"16"},{"prefix":"-moz-","version_added":"10"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"prefix":"-webkit-","version_added":"15"},"opera_android":{"prefix":"-webkit-","version_added":true},"safari":{"prefix":"-webkit-","version_added":true},"safari_ios":{"prefix":"-webkit-","version_added":true}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}},"transform":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/transform","support":{"webview_android":{"prefix":"-webkit-","version_added":"2.1","notes":"Android 2.3 has a bug where input forms will \"jump\" when typing, if any container element has a <code>-webkit-transform</code>."},"chrome":[{"version_added":"36"},{"prefix":"-webkit-","version_added":true}],"chrome_android":{"prefix":"-webkit-","version_added":true},"edge":{"prefix":"-webkit-","version_added":true},"edge_mobile":{"prefix":"-webkit-","version_added":true},"firefox":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"16"},{"prefix":"-webkit-","version_added":"49"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":[{"version_added":"10","notes":"Internet Explorer does not support the global values <code>initial</code> and <code>unset</code>."},{"prefix":"-webkit-","version_added":"11"},{"prefix":"-ms-","version_added":"9","notes":"Internet Explorer 5.5 or later supports a proprietary <a href='https://msdn.microsoft.com/en-us/library/ms533014(VS.85,loband).aspx'>Matrix Filter</a> which can be used to achieve a similar effect."}],"ie_mobile":[{"version_added":true},{"prefix":"-webkit-","version_added":"11"}],"opera":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"10.5","version_removed":"15"}],"opera_android":{"prefix":"-webkit-","version_added":"11.5"},"safari":[{"version_added":"9"},{"prefix":"-webkit-","version_added":"3.1"}],"safari_ios":[{"version_added":"9"},{"prefix":"-webkit-","version_added":"3.2"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"3d":{"__compat":{"description":"3D support","support":{"webview_android":{"prefix":"-webkit-","version_added":"3"},"chrome":{"version_added":"12"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"10"},"firefox_android":{"version_added":true},"ie":{"version_added":"10","notes":"Internet Explorer 9.0 or earlier has no support for 3D transforms. Mixing 3D and 2D transform functions, such as <code>-ms-transform:rotate(10deg) translateZ(0);</code>, will prevent the entire property from being applied."},"ie_mobile":{"version_added":true},"opera":{"version_added":"15"},"opera_android":{"version_added":"22"},"safari":{"version_added":"4"},"safari_ios":{"version_added":"3.2"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"transition-delay":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/transition-delay","support":{"webview_android":[{"version_added":true},{"prefix":"-webkit-","version_added":"2.1"}],"chrome":[{"version_added":"26"},{"prefix":"-webkit-","version_added":"1"}],"chrome_android":[{"version_added":"26"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":"12"},{"prefix":"-webkit-","version_added":"12"}],"edge_mobile":[{"version_added":"12"},{"prefix":"-webkit-","version_added":"12"}],"firefox":[{"version_added":"16"},{"prefix":"-moz-","version_added":"4"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"16"},{"prefix":"-moz-","version_added":"4"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":null},"opera":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"11.6","version_removed":"15"}],"opera_android":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"10","version_removed":"15"}],"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"3"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":"3.2"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"transition-duration":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/transition-duration","support":{"webview_android":[{"version_added":true},{"prefix":"-webkit-","version_added":"2.1"}],"chrome":[{"version_added":"26"},{"prefix":"-webkit-","version_added":"1"}],"chrome_android":[{"version_added":"26"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":"12"},{"prefix":"-webkit-","version_added":"12"}],"edge_mobile":[{"version_added":"12"},{"prefix":"-webkit-","version_added":"12"}],"firefox":[{"version_added":"16"},{"prefix":"-moz-","version_added":"4"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"16"},{"prefix":"-moz-","version_added":"4"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":null},"opera":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"10","version_removed":"15"}],"opera_android":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"10","version_removed":"15"}],"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":"3"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":"3.2"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"transition-property":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/transition-property","support":{"webview_android":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"26"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"26"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":"12"},{"prefix":"-webkit-","version_added":"12"}],"edge_mobile":[{"version_added":"12"},{"prefix":"-webkit-","version_added":"12"}],"firefox":[{"version_added":"16"},{"prefix":"-moz-","version_added":"4"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"16"},{"prefix":"-moz-","version_added":"4"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":null},"opera":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"11.6","version_removed":"15"}],"opera_android":{"version_added":null},"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"IDENT_value":{"__compat":{"description":"<code>IDENT</code> value","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"chrome_android":{"version_added":true},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox":{"version_added":true},"firefox_android":{"version_added":true},"ie":{"version_added":true},"ie_mobile":{"version_added":null},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"transition-timing-function":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/transition-timing-function","support":{"webview_android":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"chrome":[{"version_added":"26"},{"prefix":"-webkit-","version_added":true}],"chrome_android":[{"version_added":"26"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":"12"},{"prefix":"-webkit-","version_added":"12"}],"edge_mobile":[{"version_added":"12"},{"prefix":"-webkit-","version_added":"12"}],"firefox":[{"version_added":"16"},{"prefix":"-moz-","version_added":"4"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"16"},{"prefix":"-moz-","version_added":"4"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":null},"opera":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"11.6","version_removed":"15"}],"opera_android":{"version_added":null},"safari":[{"version_added":true},{"prefix":"-webkit-","version_added":true}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":true}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"transition":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/transition","support":{"webview_android":[{"version_added":true},{"prefix":"-webkit-","version_added":"2.1"}],"chrome":[{"version_added":"26"},{"prefix":"-webkit-","version_added":"1"}],"chrome_android":[{"version_added":"26"},{"prefix":"-webkit-","version_added":true}],"edge":[{"version_added":"12"},{"prefix":"-webkit-","version_added":"12"}],"edge_mobile":[{"version_added":"12"},{"prefix":"-webkit-","version_added":"12"}],"firefox":[{"version_added":"16","notes":["Before Firefox 57, transitions do not work when transitioning from a <a href='https://developer.mozilla.org/docs/Web/CSS/text-shadow'><code>text-shadow</code></a> with a color specified to a <code>text-shadow</code> without a color specified (see <A href='https://bugzil.la/726550'>bug 726550</a>).","Before Firefox 57, cancelling a filling animation (for example, with <code>animation-fill-mode: forwards</code> set) can trigger a transition set on the same element, although only once (see <a href='https://bugzil.la/1192592'>bug 1192592</a> and <a href='https://bug1192592.bmoattachments.org/attachment.cgi?id=8843824'>these test cases</a> for more information).","Before Firefox 57, the <a href='https://developer.mozilla.org/docs/Web/CSS/background-position'><code>background-position</code></a> property can't be transitioned between two values containing different numbers of <a href='https://developer.mozilla.org/docs/Web/CSS/position_value' t><code>&lt;position&gt;</code></a> values, for example <code>background-position: 10px 10px;</code> and <code>background-position: 20px 20px, 30px 30px;</code> (see <a href='https://bugzil.la/1390446'>bug 1390446</a>)."]},{"prefix":"-moz-","version_added":"4"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"firefox_android":[{"version_added":"16","notes":["Before Firefox 57, transitions do not work when transitioning from a <a href='https://developer.mozilla.org/docs/Web/CSS/text-shadow'><code>text-shadow</code></a> with a color specified to a <code>text-shadow</code> without a color specified (see <A href='https://bugzil.la/726550'>bug 726550</a>).","Before Firefox 57, cancelling a filling animation (for example, with <code>animation-fill-mode: forwards</code> set) can trigger a transition set on the same element, although only once (see <a href='https://bugzil.la/1192592'>bug 1192592</a> and <a href='https://bug1192592.bmoattachments.org/attachment.cgi?id=8843824'>these test cases</a> for more information).","Before Firefox 57, the <a href='https://developer.mozilla.org/docs/Web/CSS/background-position'><code>background-position</code></a> property can't be transitioned between two values containing different numbers of <a href='https://developer.mozilla.org/docs/Web/CSS/position_value' t><code>&lt;position&gt;</code></a> values, for example <code>background-position: 10px 10px;</code> and <code>background-position: 20px 20px, 30px 30px;</code> (see <a href='https://bugzil.la/1390446'>bug 1390446</a>)."]},{"prefix":"-moz-","version_added":"4"},{"version_added":"49","prefix":"-webkit-"},{"prefix":"-webkit-","version_added":"44","flag":{"type":"preference","name":"layout.css.prefixes.webkit","value_to_set":"true"}}],"ie":{"version_added":"10"},"ie_mobile":{"version_added":"10"},"opera":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"10.1","version_removed":"15"}],"opera_android":[{"version_added":"12.1"},{"prefix":"-webkit-","version_added":"15"},{"prefix":"-o-","version_added":"10.1","version_removed":"15"}],"safari":[{"version_added":"6.1"},{"prefix":"-webkit-","version_added":"3"}],"safari_ios":[{"version_added":true},{"prefix":"-webkit-","version_added":"3.2"}]},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"gradients":{"__compat":{"description":"Gradients","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":null},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":"10"},"ie_mobile":{"version_added":"10"},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":false},"safari_ios":{"version_added":false}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"z-index":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/z-index","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"4"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"negative_values":{"__compat":{"description":"Negative values","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3"},"firefox_android":{"version_added":true},"ie":{"version_added":"4"},"ie_mobile":{"version_added":true},"opera":{"version_added":"4"},"opera_android":{"version_added":true},"safari":{"version_added":"1"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}}},"selectors":{"adjacent_sibling":{"__compat":{"description":"Adjacent sibling combinator (<code>A + B</code>)","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/Adjacent_sibling_selectors","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"7","notes":["Internet Explorer 7 doesn't update the style correctly when an element is dynamically placed before an element that matched the selector.","In Internet Explorer 8, if an element is inserted dynamically by clicking on a link the first-child style isn't applied until the link loses focus."]},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"any-link":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/:any-link","support":{"webview_android":{"prefix":"-webkit-","version_added":true},"chrome":{"prefix":"-webkit-","version_added":true},"chrome_android":{"prefix":"-webkit-","version_added":true},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":[{"prefix":"-moz-","version_added":true},{"version_added":"50"}],"firefox_android":[{"prefix":"-moz-","version_added":true},{"version_added":"50"}],"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"prefix":"-webkit-","version_added":true},"opera_android":{"prefix":"-webkit-","version_added":true},"safari":{"prefix":"-webkit-","version_added":true},"safari_ios":{"prefix":"-webkit-","version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"attribute":{"__compat":{"description":"Attribute selector (<code>[attr=value]</code>)","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/Attribute_selectors","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"7"},"ie_mobile":{"version_added":true},"opera":{"version_added":"9"},"opera_android":{"version_added":true},"safari":{"version_added":"3"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"case_sensitive_modifier":{"__compat":{"description":"Case-insensitive modifier (<code>i</code>)","support":{"webview_android":{"version_added":"49"},"chrome":{"version_added":"49"},"chrome_android":{"version_added":"49"},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":"47"},"firefox_android":{"version_added":"47"},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":"36"},"opera_android":{"version_added":true},"safari":{"version_added":"9"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"child":{"__compat":{"description":"Child combinator (<code>A &gt; B</code>)","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/Child_selectors","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"7"},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"class":{"__compat":{"description":"Class selector (<code>.className</code>)","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/Class_selectors","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":true},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"cue":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/::cue","support":{"webview_android":{"version_added":null},"chrome":{"version_added":true},"chrome_android":{"version_added":null},"edge":{"version_added":null},"edge_mobile":{"version_added":null},"firefox_android":{"version_added":"55"},"firefox":{"version_added":"55","notes":["Firefox currently does not support a parameter on <code>::cue</code>."]},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":null},"opera_android":{"version_added":null},"safari":{"version_added":null},"safari_ios":{"version_added":null}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"descendant":{"__compat":{"description":"Descendant combinator (<code>A B</code>)","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/Descendant_selectors","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":true},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"two_greater_than_syntax":{"__compat":{"description":"<code>A &gt;&gt; B</code> syntax","support":{"webview_android":{"version_added":false},"chrome":{"version_added":false},"chrome_android":{"version_added":false},"edge":{"version_added":false},"edge_mobile":{"version_added":false},"firefox":{"version_added":false},"firefox_android":{"version_added":false},"ie":{"version_added":false},"ie_mobile":{"version_added":false},"opera":{"version_added":false},"opera_android":{"version_added":false},"safari":{"version_added":"10"},"safari_ios":{"version_added":"10"}},"status":{"experimental":true,"standard_track":true,"deprecated":false}}}},"general_sibling":{"__compat":{"description":"General sibling combinator (<code>A ~ B</code>)","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/General_sibling_selectors","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"7"},"ie_mobile":{"version_added":true},"opera":{"version_added":"9"},"opera_android":{"version_added":true},"safari":{"version_added":"3"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"id":{"__compat":{"description":"ID selector (<code>#idName</code>)","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/ID_selectors","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":true},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"type":{"__compat":{"description":"Type selector (<code>elementName</code>)","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/Type_selectors","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":true},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"namespaces":{"__compat":{"description":"Nampespaces (<code>ns|elementName</code>)","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":"8"},"opera_android":{"version_added":true},"safari":{"version_added":"1.3"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}},"universal":{"__compat":{"description":"Universal selector (<code>*</code>)","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/Universal_selectors","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"1"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"7"},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":true},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"namespaces":{"__compat":{"description":"Nampespaces (<code>*|*</code>)","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"chrome_android":{"version_added":true},"edge":{"version_added":true},"edge_mobile":{"version_added":true},"firefox":{"version_added":"1"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":"8"},"opera_android":{"version_added":true},"safari":{"version_added":"1.3"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}}},"types":{"angle":{"__compat":{"description":"<code>&lt;angle&gt;</code>","mdn_url":"https://developer.mozilla.org/docs/Web/CSS/angle","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"2"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.6"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":"4"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}},"deg":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/angle#deg","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"2"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.6"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":"4"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"grad":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/angle#grad","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"2"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.6"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":"4"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"rad":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/angle#rad","support":{"webview_android":{"version_added":true},"chrome":{"version_added":"2"},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"3.6"},"firefox_android":{"version_added":"4"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":"4"},"safari_ios":{"version_added":true}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}},"turn":{"__compat":{"mdn_url":"https://developer.mozilla.org/docs/Web/CSS/angle#turn","support":{"webview_android":{"version_added":true},"chrome":{"version_added":true},"chrome_android":{"version_added":true},"edge":{"version_added":"12"},"edge_mobile":{"version_added":true},"firefox":{"version_added":"13"},"firefox_android":{"version_added":"14"},"ie":{"version_added":"9"},"ie_mobile":{"version_added":true},"opera":{"version_added":true},"opera_android":{"version_added":true},"safari":{"version_added":"10"},"safari_ios":{"version_added":"10"}},"status":{"experimental":false,"standard_track":true,"deprecated":false}}}}}}}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var cloneNode = function cloneNode(obj, parent) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
        return obj;
    }

    var cloned = new obj.constructor();

    for (var i in obj) {
        if (!obj.hasOwnProperty(i)) {
            continue;
        }
        var value = obj[i];
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

        if (i === 'parent' && type === 'object') {
            if (parent) {
                cloned[i] = parent;
            }
        } else if (value instanceof Array) {
            cloned[i] = value.map(function (j) {
                return cloneNode(j, cloned);
            });
        } else {
            cloned[i] = cloneNode(value, cloned);
        }
    }

    return cloned;
};

var _class = function () {
    function _class() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, _class);

        Object.assign(this, opts);
        this.spaces = this.spaces || {};
        this.spaces.before = this.spaces.before || '';
        this.spaces.after = this.spaces.after || '';
    }

    _class.prototype.remove = function remove() {
        if (this.parent) {
            this.parent.removeChild(this);
        }
        this.parent = undefined;
        return this;
    };

    _class.prototype.replaceWith = function replaceWith() {
        if (this.parent) {
            for (var index in arguments) {
                this.parent.insertBefore(this, arguments[index]);
            }
            this.remove();
        }
        return this;
    };

    _class.prototype.next = function next() {
        return this.parent.at(this.parent.index(this) + 1);
    };

    _class.prototype.prev = function prev() {
        return this.parent.at(this.parent.index(this) - 1);
    };

    _class.prototype.clone = function clone() {
        var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var cloned = cloneNode(this);
        for (var name in overrides) {
            cloned[name] = overrides[name];
        }
        return cloned;
    };

    _class.prototype.toString = function toString() {
        return [this.spaces.before, String(this.value), this.spaces.after].join('');
    };

    return _class;
}();

exports.default = _class;
module.exports = exports['default'];

/***/ }),
/* 9 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
const EMPTY = {}

/* harmony default export */ __webpack_exports__["default"] = (store => store || EMPTY);


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["closeTab"] = closeTab;
/* harmony export (immutable) */ __webpack_exports__["fetchStylesheets"] = fetchStylesheets;
/* harmony export (immutable) */ __webpack_exports__["openBrowserVersion"] = openBrowserVersion;
/* harmony export (immutable) */ __webpack_exports__["selectTab"] = selectTab;
/* harmony export (immutable) */ __webpack_exports__["setInspectedIssue"] = setInspectedIssue;
/* harmony export (immutable) */ __webpack_exports__["setInspectedStylesheet"] = setInspectedStylesheet;
/* harmony export (immutable) */ __webpack_exports__["toggleSource"] = toggleSource;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_StyleSheet__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_StyleSheet___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__lib_StyleSheet__);


function closeTab(index) {
  return {
    type: 'TAB_CLOSE',
    index
  }
}

function fetchStylesheets(activeSources) {
  const getExternalStyles = () => {
    return Array.from(
      document.getElementsByTagName('link')
    ).filter(node => {
      return node.getAttribute('rel') === 'stylesheet'
    }).map(node => {
      let href = node.getAttribute('href')

      if (href.indexOf('//') === 0) {
        return window.location.protocol + href
      }

      if (href.indexOf('/') === 0) {
        return window.location.origin + href
      }

      return href
    })
  }

  const getInlineStyles = () => {
    return Array.from(
      document.getElementsByTagName('style')
    ).map(node => {
      return node.innerText
    }).filter(content => {
      return content.length > 0
    })
  }

  return (dispatch, getState) => {
    dispatch({
      type: 'SET_DATA',
      status: 'STATUS_LOADING'
    })

    const getExternalStylesFn = '(' + getExternalStyles.toString() + ')()'
    const getInlineStylesFn = '(' + getInlineStyles.toString() + ')()'
    const stylesheets = new __WEBPACK_IMPORTED_MODULE_0__lib_StyleSheet___default.a()

    let inlineSources = []
    let failedSources = []

    return browser.devtools.inspectedWindow
      .eval(getExternalStylesFn)
      .then(response => {
        // Check is for compatibility with Chrome and Firefox.
        const stylesheetUrls = Array.isArray(response[0])
          ? response[0]
          : response
        const queue = stylesheetUrls.map(url => {
          return fetch(url)
            .then(response => response.text())
            .then(response => ({
              url,
              content: response
            }))
            .catch(err => {
              console.log('Could not fetch source:', url)

              failedSources.push(url)
            })
        })

        return Promise.all(queue).then(results => {
          return results.filter(Boolean)
        })
      }).then(sources => {
        const stylesheets = new __WEBPACK_IMPORTED_MODULE_0__lib_StyleSheet___default.a()

        sources.forEach(source => {
          if (activeSources && !activeSources.includes(source.url)) {
            return
          }

          stylesheets.add({
            id: source.url,
            content: source.content,
            external: true
          })
        })

        return browser.devtools.inspectedWindow
          .eval(getInlineStylesFn)
          .then(response => {
            // Check is for compatibility with Chrome and Firefox.
            const inlineStylesheets = Array.isArray(response[0])
              ? response[0]
              : response

            inlineStylesheets.forEach((content, index) => {
              if (typeof content !== 'string' || content.length === 0) {
                return
              }

              const index1 = index + 1
              const isEnabled = !activeSources || activeSources.includes(index1)

              inlineSources.push({
                enabled: isEnabled,
                external: false,
                id: index1
              })

              if (!isEnabled) {
                return
              }

              stylesheets.add({
                id: index1,
                content,
                external: false
              })
            })
          }).then(() => {
            return stylesheets.parse()
          }).then(({data, failedSources, stylesheets}) => {
            const sourcesArray = sources.filter(source => {
              return !failedSources.includes(source.url)
            }).map(source => ({
              enabled: !activeSources || activeSources.includes(source.url),
              external: true,
              id: source.url
            })).concat(inlineSources)

            dispatch({
              data,
              sources: sourcesArray,
              status: 'STATUS_SUCCESS',
              stylesheets,
              type: 'SET_DATA'
            })
          })
      }).catch(err => {
        console.log(err)

        dispatch({
          type: 'SET_DATA',
          status: 'STATUS_ERROR'
        })
      })
  }
}

function openBrowserVersion(browser, version) {
  return {
    type: 'OPEN_BROWSER_VERSION',
    browser,
    version
  }
}

function selectTab(index) {
  return {
    type: 'TAB_SELECT',
    index
  }
}

function setInspectedIssue(issue, tab) {
  return {
    type: 'SET_INSPECTED_ISSUE',
    issue,
    tab
  }
}

function setInspectedStylesheet(stylesheet, tab) {
  return {
    type: 'SET_INSPECTED_STYLESHEET',
    stylesheet,
    tab
  }
}

function toggleSource(source, activate) {
  return (dispatch, getState) => {
    let enabledSources = getState().sources
      .filter(source => source.enabled)
      .map(source => source.id)
      .filter(sourceId => {
        return activate || source !== sourceId
      })

    if (activate) {
      enabledSources.push(source)
    }

    dispatch(fetchStylesheets(enabledSources))
  }
}


/***/ }),
/* 12 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _node = __webpack_require__(8);

var _node2 = _interopRequireDefault(_node);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Namespace = function (_Node) {
    _inherits(Namespace, _Node);

    function Namespace() {
        _classCallCheck(this, Namespace);

        return _possibleConstructorReturn(this, _Node.apply(this, arguments));
    }

    Namespace.prototype.qualifiedName = function qualifiedName(value) {
        if (this.namespace) {
            return this.namespaceString + '|' + value;
        } else {
            return value;
        }
    };

    Namespace.prototype.toString = function toString() {
        return [this.spaces.before, this.qualifiedName(this.value), this.spaces.after].join('');
    };

    _createClass(Namespace, [{
        key: 'namespace',
        get: function get() {
            return this._namespace;
        },
        set: function set(namespace) {
            this._namespace = namespace;
            if (this.raws) {
                delete this.raws.namespace;
            }
        }
    }, {
        key: 'ns',
        get: function get() {
            return this._namespace;
        },
        set: function set(namespace) {
            this._namespace = namespace;
            if (this.raws) {
                delete this.raws.namespace;
            }
        }
    }, {
        key: 'namespaceString',
        get: function get() {
            if (this.namespace) {
                var ns = this.raws && this.raws.namespace || this.namespace;
                if (ns === true) {
                    return '';
                } else {
                    return ns;
                }
            } else {
                return '';
            }
        }
    }]);

    return Namespace;
}(_node2.default);

exports.default = Namespace;
;
module.exports = exports['default'];

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

const browsers = __webpack_require__(4)

const Helpers = function () {}

Helpers.prototype.getUnsupportedVersions = function ({
  browser,
  added,
  removed
}) {
  const browserData = browsers.get(browser)

  if (
    !browserData ||
    added === true
  ) {
    return []
  }

  const indexAdded = browserData.findIndex(key => key === added)
  const indexRemoved = browserData.findIndex(key => key === removed)

  let versions = browserData

  if (indexAdded !== -1) {
    versions = versions.slice(indexAdded + 1)
  }

  if (indexRemoved !== -1) {
    versions = browserData.slice(0, indexRemoved + 1).concat(versions)
  }

  return versions
}

module.exports = new Helpers()


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _container = __webpack_require__(24);

var _container2 = _interopRequireDefault(_container);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Represents an at-rule.
 *
 * If it’s followed in the CSS by a {} block, this node will have
 * a nodes property representing its children.
 *
 * @extends Container
 *
 * @example
 * const root = postcss.parse('@charset "UTF-8"; @media print {}');
 *
 * const charset = root.first;
 * charset.type  //=> 'atrule'
 * charset.nodes //=> undefined
 *
 * const media = root.last;
 * media.nodes   //=> []
 */
var AtRule = function (_Container) {
  _inherits(AtRule, _Container);

  function AtRule(defaults) {
    _classCallCheck(this, AtRule);

    var _this = _possibleConstructorReturn(this, _Container.call(this, defaults));

    _this.type = 'atrule';
    return _this;
  }

  AtRule.prototype.append = function append() {
    var _Container$prototype$;

    if (!this.nodes) this.nodes = [];

    for (var _len = arguments.length, children = Array(_len), _key = 0; _key < _len; _key++) {
      children[_key] = arguments[_key];
    }

    return (_Container$prototype$ = _Container.prototype.append).call.apply(_Container$prototype$, [this].concat(children));
  };

  AtRule.prototype.prepend = function prepend() {
    var _Container$prototype$2;

    if (!this.nodes) this.nodes = [];

    for (var _len2 = arguments.length, children = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      children[_key2] = arguments[_key2];
    }

    return (_Container$prototype$2 = _Container.prototype.prepend).call.apply(_Container$prototype$2, [this].concat(children));
  };

  /**
   * @memberof AtRule#
   * @member {string} name - the at-rule’s name immediately follows the `@`
   *
   * @example
   * const root  = postcss.parse('@media print {}');
   * media.name //=> 'media'
   * const media = root.first;
   */

  /**
   * @memberof AtRule#
   * @member {string} params - the at-rule’s parameters, the values
   *                           that follow the at-rule’s name but precede
   *                           any {} block
   *
   * @example
   * const root  = postcss.parse('@media print, screen {}');
   * const media = root.first;
   * media.params //=> 'print, screen'
   */

  /**
   * @memberof AtRule#
   * @member {object} raws - Information to generate byte-to-byte equal
   *                         node string as it was in the origin input.
   *
   * Every parser saves its own properties,
   * but the default CSS parser uses:
   *
   * * `before`: the space symbols before the node. It also stores `*`
   *   and `_` symbols before the declaration (IE hack).
   * * `after`: the space symbols after the last child of the node
   *   to the end of the node.
   * * `between`: the symbols between the property and value
   *   for declarations, selector and `{` for rules, or last parameter
   *   and `{` for at-rules.
   * * `semicolon`: contains true if the last child has
   *   an (optional) semicolon.
   * * `afterName`: the space between the at-rule name and its parameters.
   *
   * PostCSS cleans at-rule parameters from comments and extra spaces,
   * but it stores origin content in raws properties.
   * As such, if you don’t change a declaration’s value,
   * PostCSS will use the raw value with comments.
   *
   * @example
   * const root = postcss.parse('  @media\nprint {\n}')
   * root.first.first.raws //=> { before: '  ',
   *                       //     between: ' ',
   *                       //     afterName: '\n',
   *                       //     after: '\n' }
   */


  return AtRule;
}(_container2.default);

exports.default = AtRule;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF0LXJ1bGUuZXM2Il0sIm5hbWVzIjpbIkF0UnVsZSIsImRlZmF1bHRzIiwidHlwZSIsImFwcGVuZCIsIm5vZGVzIiwiY2hpbGRyZW4iLCJwcmVwZW5kIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFrQk1BLE07OztBQUVGLGtCQUFZQyxRQUFaLEVBQXNCO0FBQUE7O0FBQUEsaURBQ2xCLHNCQUFNQSxRQUFOLENBRGtCOztBQUVsQixVQUFLQyxJQUFMLEdBQVksUUFBWjtBQUZrQjtBQUdyQjs7bUJBRURDLE0scUJBQW9CO0FBQUE7O0FBQ2hCLFFBQUssQ0FBQyxLQUFLQyxLQUFYLEVBQW1CLEtBQUtBLEtBQUwsR0FBYSxFQUFiOztBQURILHNDQUFWQyxRQUFVO0FBQVZBLGNBQVU7QUFBQTs7QUFFaEIsV0FBTyw4Q0FBTUYsTUFBTixrREFBZ0JFLFFBQWhCLEVBQVA7QUFDSCxHOzttQkFFREMsTyxzQkFBcUI7QUFBQTs7QUFDakIsUUFBSyxDQUFDLEtBQUtGLEtBQVgsRUFBbUIsS0FBS0EsS0FBTCxHQUFhLEVBQWI7O0FBREYsdUNBQVZDLFFBQVU7QUFBVkEsY0FBVTtBQUFBOztBQUVqQixXQUFPLCtDQUFNQyxPQUFOLG1EQUFpQkQsUUFBakIsRUFBUDtBQUNILEc7O0FBRUQ7Ozs7Ozs7Ozs7QUFVQTs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkFpQ1dMLE0iLCJmaWxlIjoiYXQtcnVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250YWluZXIgZnJvbSAnLi9jb250YWluZXInO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gYXQtcnVsZS5cbiAqXG4gKiBJZiBpdOKAmXMgZm9sbG93ZWQgaW4gdGhlIENTUyBieSBhIHt9IGJsb2NrLCB0aGlzIG5vZGUgd2lsbCBoYXZlXG4gKiBhIG5vZGVzIHByb3BlcnR5IHJlcHJlc2VudGluZyBpdHMgY2hpbGRyZW4uXG4gKlxuICogQGV4dGVuZHMgQ29udGFpbmVyXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKCdAY2hhcnNldCBcIlVURi04XCI7IEBtZWRpYSBwcmludCB7fScpO1xuICpcbiAqIGNvbnN0IGNoYXJzZXQgPSByb290LmZpcnN0O1xuICogY2hhcnNldC50eXBlICAvLz0+ICdhdHJ1bGUnXG4gKiBjaGFyc2V0Lm5vZGVzIC8vPT4gdW5kZWZpbmVkXG4gKlxuICogY29uc3QgbWVkaWEgPSByb290Lmxhc3Q7XG4gKiBtZWRpYS5ub2RlcyAgIC8vPT4gW11cbiAqL1xuY2xhc3MgQXRSdWxlIGV4dGVuZHMgQ29udGFpbmVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgICAgIHN1cGVyKGRlZmF1bHRzKTtcbiAgICAgICAgdGhpcy50eXBlID0gJ2F0cnVsZSc7XG4gICAgfVxuXG4gICAgYXBwZW5kKC4uLmNoaWxkcmVuKSB7XG4gICAgICAgIGlmICggIXRoaXMubm9kZXMgKSB0aGlzLm5vZGVzID0gW107XG4gICAgICAgIHJldHVybiBzdXBlci5hcHBlbmQoLi4uY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHByZXBlbmQoLi4uY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCAhdGhpcy5ub2RlcyApIHRoaXMubm9kZXMgPSBbXTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnByZXBlbmQoLi4uY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBBdFJ1bGUjXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSBuYW1lIC0gdGhlIGF0LXJ1bGXigJlzIG5hbWUgaW1tZWRpYXRlbHkgZm9sbG93cyB0aGUgYEBgXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IHJvb3QgID0gcG9zdGNzcy5wYXJzZSgnQG1lZGlhIHByaW50IHt9Jyk7XG4gICAgICogbWVkaWEubmFtZSAvLz0+ICdtZWRpYSdcbiAgICAgKiBjb25zdCBtZWRpYSA9IHJvb3QuZmlyc3Q7XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQXRSdWxlI1xuICAgICAqIEBtZW1iZXIge3N0cmluZ30gcGFyYW1zIC0gdGhlIGF0LXJ1bGXigJlzIHBhcmFtZXRlcnMsIHRoZSB2YWx1ZXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgZm9sbG93IHRoZSBhdC1ydWxl4oCZcyBuYW1lIGJ1dCBwcmVjZWRlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBhbnkge30gYmxvY2tcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3Qgcm9vdCAgPSBwb3N0Y3NzLnBhcnNlKCdAbWVkaWEgcHJpbnQsIHNjcmVlbiB7fScpO1xuICAgICAqIGNvbnN0IG1lZGlhID0gcm9vdC5maXJzdDtcbiAgICAgKiBtZWRpYS5wYXJhbXMgLy89PiAncHJpbnQsIHNjcmVlbidcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBBdFJ1bGUjXG4gICAgICogQG1lbWJlciB7b2JqZWN0fSByYXdzIC0gSW5mb3JtYXRpb24gdG8gZ2VuZXJhdGUgYnl0ZS10by1ieXRlIGVxdWFsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSBzdHJpbmcgYXMgaXQgd2FzIGluIHRoZSBvcmlnaW4gaW5wdXQuXG4gICAgICpcbiAgICAgKiBFdmVyeSBwYXJzZXIgc2F2ZXMgaXRzIG93biBwcm9wZXJ0aWVzLFxuICAgICAqIGJ1dCB0aGUgZGVmYXVsdCBDU1MgcGFyc2VyIHVzZXM6XG4gICAgICpcbiAgICAgKiAqIGBiZWZvcmVgOiB0aGUgc3BhY2Ugc3ltYm9scyBiZWZvcmUgdGhlIG5vZGUuIEl0IGFsc28gc3RvcmVzIGAqYFxuICAgICAqICAgYW5kIGBfYCBzeW1ib2xzIGJlZm9yZSB0aGUgZGVjbGFyYXRpb24gKElFIGhhY2spLlxuICAgICAqICogYGFmdGVyYDogdGhlIHNwYWNlIHN5bWJvbHMgYWZ0ZXIgdGhlIGxhc3QgY2hpbGQgb2YgdGhlIG5vZGVcbiAgICAgKiAgIHRvIHRoZSBlbmQgb2YgdGhlIG5vZGUuXG4gICAgICogKiBgYmV0d2VlbmA6IHRoZSBzeW1ib2xzIGJldHdlZW4gdGhlIHByb3BlcnR5IGFuZCB2YWx1ZVxuICAgICAqICAgZm9yIGRlY2xhcmF0aW9ucywgc2VsZWN0b3IgYW5kIGB7YCBmb3IgcnVsZXMsIG9yIGxhc3QgcGFyYW1ldGVyXG4gICAgICogICBhbmQgYHtgIGZvciBhdC1ydWxlcy5cbiAgICAgKiAqIGBzZW1pY29sb25gOiBjb250YWlucyB0cnVlIGlmIHRoZSBsYXN0IGNoaWxkIGhhc1xuICAgICAqICAgYW4gKG9wdGlvbmFsKSBzZW1pY29sb24uXG4gICAgICogKiBgYWZ0ZXJOYW1lYDogdGhlIHNwYWNlIGJldHdlZW4gdGhlIGF0LXJ1bGUgbmFtZSBhbmQgaXRzIHBhcmFtZXRlcnMuXG4gICAgICpcbiAgICAgKiBQb3N0Q1NTIGNsZWFucyBhdC1ydWxlIHBhcmFtZXRlcnMgZnJvbSBjb21tZW50cyBhbmQgZXh0cmEgc3BhY2VzLFxuICAgICAqIGJ1dCBpdCBzdG9yZXMgb3JpZ2luIGNvbnRlbnQgaW4gcmF3cyBwcm9wZXJ0aWVzLlxuICAgICAqIEFzIHN1Y2gsIGlmIHlvdSBkb27igJl0IGNoYW5nZSBhIGRlY2xhcmF0aW9u4oCZcyB2YWx1ZSxcbiAgICAgKiBQb3N0Q1NTIHdpbGwgdXNlIHRoZSByYXcgdmFsdWUgd2l0aCBjb21tZW50cy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJyAgQG1lZGlhXFxucHJpbnQge1xcbn0nKVxuICAgICAqIHJvb3QuZmlyc3QuZmlyc3QucmF3cyAvLz0+IHsgYmVmb3JlOiAnICAnLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgYmV0d2VlbjogJyAnLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgYWZ0ZXJOYW1lOiAnXFxuJyxcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGFmdGVyOiAnXFxuJyB9XG4gICAgICovXG59XG5cbmV4cG9ydCBkZWZhdWx0IEF0UnVsZTtcbiJdfQ==


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _container = __webpack_require__(24);

var _container2 = _interopRequireDefault(_container);

var _list = __webpack_require__(46);

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Represents a CSS rule: a selector followed by a declaration block.
 *
 * @extends Container
 *
 * @example
 * const root = postcss.parse('a{}');
 * const rule = root.first;
 * rule.type       //=> 'rule'
 * rule.toString() //=> 'a{}'
 */
var Rule = function (_Container) {
  _inherits(Rule, _Container);

  function Rule(defaults) {
    _classCallCheck(this, Rule);

    var _this = _possibleConstructorReturn(this, _Container.call(this, defaults));

    _this.type = 'rule';
    if (!_this.nodes) _this.nodes = [];
    return _this;
  }

  /**
   * An array containing the rule’s individual selectors.
   * Groups of selectors are split at commas.
   *
   * @type {string[]}
   *
   * @example
   * const root = postcss.parse('a, b { }');
   * const rule = root.first;
   *
   * rule.selector  //=> 'a, b'
   * rule.selectors //=> ['a', 'b']
   *
   * rule.selectors = ['a', 'strong'];
   * rule.selector //=> 'a, strong'
   */


  _createClass(Rule, [{
    key: 'selectors',
    get: function get() {
      return _list2.default.comma(this.selector);
    },
    set: function set(values) {
      var match = this.selector ? this.selector.match(/,\s*/) : null;
      var sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen');
      this.selector = values.join(sep);
    }

    /**
     * @memberof Rule#
     * @member {string} selector - the rule’s full selector represented
     *                             as a string
     *
     * @example
     * const root = postcss.parse('a, b { }');
     * const rule = root.first;
     * rule.selector //=> 'a, b'
     */

    /**
     * @memberof Rule#
     * @member {object} raws - Information to generate byte-to-byte equal
     *                         node string as it was in the origin input.
     *
     * Every parser saves its own properties,
     * but the default CSS parser uses:
     *
     * * `before`: the space symbols before the node. It also stores `*`
     *   and `_` symbols before the declaration (IE hack).
     * * `after`: the space symbols after the last child of the node
     *   to the end of the node.
     * * `between`: the symbols between the property and value
     *   for declarations, selector and `{` for rules, or last parameter
     *   and `{` for at-rules.
     * * `semicolon`: contains `true` if the last child has
     *   an (optional) semicolon.
     * * `ownSemicolon`: contains `true` if there is semicolon after rule.
     *
     * PostCSS cleans selectors from comments and extra spaces,
     * but it stores origin content in raws properties.
     * As such, if you don’t change a declaration’s value,
     * PostCSS will use the raw value with comments.
     *
     * @example
     * const root = postcss.parse('a {\n  color:black\n}')
     * root.first.first.raws //=> { before: '', between: ' ', after: '\n' }
     */

  }]);

  return Rule;
}(_container2.default);

exports.default = Rule;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGUuZXM2Il0sIm5hbWVzIjpbIlJ1bGUiLCJkZWZhdWx0cyIsInR5cGUiLCJub2RlcyIsImNvbW1hIiwic2VsZWN0b3IiLCJ2YWx1ZXMiLCJtYXRjaCIsInNlcCIsInJhdyIsImpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUVBOzs7Ozs7Ozs7OztJQVdNQSxJOzs7QUFFRixnQkFBWUMsUUFBWixFQUFzQjtBQUFBOztBQUFBLGlEQUNsQixzQkFBTUEsUUFBTixDQURrQjs7QUFFbEIsVUFBS0MsSUFBTCxHQUFZLE1BQVo7QUFDQSxRQUFLLENBQUMsTUFBS0MsS0FBWCxFQUFtQixNQUFLQSxLQUFMLEdBQWEsRUFBYjtBQUhEO0FBSXJCOztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFnQmdCO0FBQ1osYUFBTyxlQUFLQyxLQUFMLENBQVcsS0FBS0MsUUFBaEIsQ0FBUDtBQUNILEs7c0JBRWFDLE0sRUFBUTtBQUNsQixVQUFJQyxRQUFRLEtBQUtGLFFBQUwsR0FBZ0IsS0FBS0EsUUFBTCxDQUFjRSxLQUFkLENBQW9CLE1BQXBCLENBQWhCLEdBQThDLElBQTFEO0FBQ0EsVUFBSUMsTUFBUUQsUUFBUUEsTUFBTSxDQUFOLENBQVIsR0FBbUIsTUFBTSxLQUFLRSxHQUFMLENBQVMsU0FBVCxFQUFvQixZQUFwQixDQUFyQztBQUNBLFdBQUtKLFFBQUwsR0FBZ0JDLE9BQU9JLElBQVAsQ0FBWUYsR0FBWixDQUFoQjtBQUNIOztBQUVEOzs7Ozs7Ozs7OztBQVdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQStCV1IsSSIsImZpbGUiOiJydWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQgbGlzdCAgICAgIGZyb20gJy4vbGlzdCc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIENTUyBydWxlOiBhIHNlbGVjdG9yIGZvbGxvd2VkIGJ5IGEgZGVjbGFyYXRpb24gYmxvY2suXG4gKlxuICogQGV4dGVuZHMgQ29udGFpbmVyXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKCdhe30nKTtcbiAqIGNvbnN0IHJ1bGUgPSByb290LmZpcnN0O1xuICogcnVsZS50eXBlICAgICAgIC8vPT4gJ3J1bGUnXG4gKiBydWxlLnRvU3RyaW5nKCkgLy89PiAnYXt9J1xuICovXG5jbGFzcyBSdWxlIGV4dGVuZHMgQ29udGFpbmVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgICAgIHN1cGVyKGRlZmF1bHRzKTtcbiAgICAgICAgdGhpcy50eXBlID0gJ3J1bGUnO1xuICAgICAgICBpZiAoICF0aGlzLm5vZGVzICkgdGhpcy5ub2RlcyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHJ1bGXigJlzIGluZGl2aWR1YWwgc2VsZWN0b3JzLlxuICAgICAqIEdyb3VwcyBvZiBzZWxlY3RvcnMgYXJlIHNwbGl0IGF0IGNvbW1hcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmdbXX1cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2EsIGIgeyB9Jyk7XG4gICAgICogY29uc3QgcnVsZSA9IHJvb3QuZmlyc3Q7XG4gICAgICpcbiAgICAgKiBydWxlLnNlbGVjdG9yICAvLz0+ICdhLCBiJ1xuICAgICAqIHJ1bGUuc2VsZWN0b3JzIC8vPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogcnVsZS5zZWxlY3RvcnMgPSBbJ2EnLCAnc3Ryb25nJ107XG4gICAgICogcnVsZS5zZWxlY3RvciAvLz0+ICdhLCBzdHJvbmcnXG4gICAgICovXG4gICAgZ2V0IHNlbGVjdG9ycygpIHtcbiAgICAgICAgcmV0dXJuIGxpc3QuY29tbWEodGhpcy5zZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgc2V0IHNlbGVjdG9ycyh2YWx1ZXMpIHtcbiAgICAgICAgbGV0IG1hdGNoID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IubWF0Y2goLyxcXHMqLykgOiBudWxsO1xuICAgICAgICBsZXQgc2VwICAgPSBtYXRjaCA/IG1hdGNoWzBdIDogJywnICsgdGhpcy5yYXcoJ2JldHdlZW4nLCAnYmVmb3JlT3BlbicpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gdmFsdWVzLmpvaW4oc2VwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUnVsZSNcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHNlbGVjdG9yIC0gdGhlIHJ1bGXigJlzIGZ1bGwgc2VsZWN0b3IgcmVwcmVzZW50ZWRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXMgYSBzdHJpbmdcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2EsIGIgeyB9Jyk7XG4gICAgICogY29uc3QgcnVsZSA9IHJvb3QuZmlyc3Q7XG4gICAgICogcnVsZS5zZWxlY3RvciAvLz0+ICdhLCBiJ1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFJ1bGUjXG4gICAgICogQG1lbWJlciB7b2JqZWN0fSByYXdzIC0gSW5mb3JtYXRpb24gdG8gZ2VuZXJhdGUgYnl0ZS10by1ieXRlIGVxdWFsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSBzdHJpbmcgYXMgaXQgd2FzIGluIHRoZSBvcmlnaW4gaW5wdXQuXG4gICAgICpcbiAgICAgKiBFdmVyeSBwYXJzZXIgc2F2ZXMgaXRzIG93biBwcm9wZXJ0aWVzLFxuICAgICAqIGJ1dCB0aGUgZGVmYXVsdCBDU1MgcGFyc2VyIHVzZXM6XG4gICAgICpcbiAgICAgKiAqIGBiZWZvcmVgOiB0aGUgc3BhY2Ugc3ltYm9scyBiZWZvcmUgdGhlIG5vZGUuIEl0IGFsc28gc3RvcmVzIGAqYFxuICAgICAqICAgYW5kIGBfYCBzeW1ib2xzIGJlZm9yZSB0aGUgZGVjbGFyYXRpb24gKElFIGhhY2spLlxuICAgICAqICogYGFmdGVyYDogdGhlIHNwYWNlIHN5bWJvbHMgYWZ0ZXIgdGhlIGxhc3QgY2hpbGQgb2YgdGhlIG5vZGVcbiAgICAgKiAgIHRvIHRoZSBlbmQgb2YgdGhlIG5vZGUuXG4gICAgICogKiBgYmV0d2VlbmA6IHRoZSBzeW1ib2xzIGJldHdlZW4gdGhlIHByb3BlcnR5IGFuZCB2YWx1ZVxuICAgICAqICAgZm9yIGRlY2xhcmF0aW9ucywgc2VsZWN0b3IgYW5kIGB7YCBmb3IgcnVsZXMsIG9yIGxhc3QgcGFyYW1ldGVyXG4gICAgICogICBhbmQgYHtgIGZvciBhdC1ydWxlcy5cbiAgICAgKiAqIGBzZW1pY29sb25gOiBjb250YWlucyBgdHJ1ZWAgaWYgdGhlIGxhc3QgY2hpbGQgaGFzXG4gICAgICogICBhbiAob3B0aW9uYWwpIHNlbWljb2xvbi5cbiAgICAgKiAqIGBvd25TZW1pY29sb25gOiBjb250YWlucyBgdHJ1ZWAgaWYgdGhlcmUgaXMgc2VtaWNvbG9uIGFmdGVyIHJ1bGUuXG4gICAgICpcbiAgICAgKiBQb3N0Q1NTIGNsZWFucyBzZWxlY3RvcnMgZnJvbSBjb21tZW50cyBhbmQgZXh0cmEgc3BhY2VzLFxuICAgICAqIGJ1dCBpdCBzdG9yZXMgb3JpZ2luIGNvbnRlbnQgaW4gcmF3cyBwcm9wZXJ0aWVzLlxuICAgICAqIEFzIHN1Y2gsIGlmIHlvdSBkb27igJl0IGNoYW5nZSBhIGRlY2xhcmF0aW9u4oCZcyB2YWx1ZSxcbiAgICAgKiBQb3N0Q1NTIHdpbGwgdXNlIHRoZSByYXcgdmFsdWUgd2l0aCBjb21tZW50cy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2Ege1xcbiAgY29sb3I6YmxhY2tcXG59JylcbiAgICAgKiByb290LmZpcnN0LmZpcnN0LnJhd3MgLy89PiB7IGJlZm9yZTogJycsIGJldHdlZW46ICcgJywgYWZ0ZXI6ICdcXG4nIH1cbiAgICAgKi9cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSdWxlO1xuIl19


/***/ }),
/* 17 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _node = __webpack_require__(19);

var _node2 = _interopRequireDefault(_node);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Represents a CSS declaration.
 *
 * @extends Node
 *
 * @example
 * const root = postcss.parse('a { color: black }');
 * const decl = root.first.first;
 * decl.type       //=> 'decl'
 * decl.toString() //=> ' color: black'
 */
var Declaration = function (_Node) {
  _inherits(Declaration, _Node);

  function Declaration(defaults) {
    _classCallCheck(this, Declaration);

    var _this = _possibleConstructorReturn(this, _Node.call(this, defaults));

    _this.type = 'decl';
    return _this;
  }

  /**
   * @memberof Declaration#
   * @member {string} prop - the declaration’s property name
   *
   * @example
   * const root = postcss.parse('a { color: black }');
   * const decl = root.first.first;
   * decl.prop //=> 'color'
   */

  /**
   * @memberof Declaration#
   * @member {string} value - the declaration’s value
   *
   * @example
   * const root = postcss.parse('a { color: black }');
   * const decl = root.first.first;
   * decl.value //=> 'black'
   */

  /**
   * @memberof Declaration#
   * @member {boolean} important - `true` if the declaration
   *                               has an !important annotation.
   *
   * @example
   * const root = postcss.parse('a { color: black !important; color: red }');
   * root.first.first.important //=> true
   * root.first.last.important  //=> undefined
   */

  /**
   * @memberof Declaration#
   * @member {object} raws - Information to generate byte-to-byte equal
   *                         node string as it was in the origin input.
   *
   * Every parser saves its own properties,
   * but the default CSS parser uses:
   *
   * * `before`: the space symbols before the node. It also stores `*`
   *   and `_` symbols before the declaration (IE hack).
   * * `between`: the symbols between the property and value
   *   for declarations.
   * * `important`: the content of the important statement,
   *   if it is not just `!important`.
   *
   * PostCSS cleans declaration from comments and extra spaces,
   * but it stores origin content in raws properties.
   * As such, if you don’t change a declaration’s value,
   * PostCSS will use the raw value with comments.
   *
   * @example
   * const root = postcss.parse('a {\n  color:black\n}')
   * root.first.first.raws //=> { before: '\n  ', between: ':' }
   */

  return Declaration;
}(_node2.default);

exports.default = Declaration;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlY2xhcmF0aW9uLmVzNiJdLCJuYW1lcyI6WyJEZWNsYXJhdGlvbiIsImRlZmF1bHRzIiwidHlwZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7SUFXTUEsVzs7O0FBRUYsdUJBQVlDLFFBQVosRUFBc0I7QUFBQTs7QUFBQSxpREFDbEIsaUJBQU1BLFFBQU4sQ0FEa0I7O0FBRWxCLFVBQUtDLElBQUwsR0FBWSxNQUFaO0FBRmtCO0FBR3JCOztBQUVEOzs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7QUFVQTs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkEyQldGLFciLCJmaWxlIjoiZGVjbGFyYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTm9kZSBmcm9tICcuL25vZGUnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBDU1MgZGVjbGFyYXRpb24uXG4gKlxuICogQGV4dGVuZHMgTm9kZVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCByb290ID0gcG9zdGNzcy5wYXJzZSgnYSB7IGNvbG9yOiBibGFjayB9Jyk7XG4gKiBjb25zdCBkZWNsID0gcm9vdC5maXJzdC5maXJzdDtcbiAqIGRlY2wudHlwZSAgICAgICAvLz0+ICdkZWNsJ1xuICogZGVjbC50b1N0cmluZygpIC8vPT4gJyBjb2xvcjogYmxhY2snXG4gKi9cbmNsYXNzIERlY2xhcmF0aW9uIGV4dGVuZHMgTm9kZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihkZWZhdWx0cykge1xuICAgICAgICBzdXBlcihkZWZhdWx0cyk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdkZWNsJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgRGVjbGFyYXRpb24jXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSBwcm9wIC0gdGhlIGRlY2xhcmF0aW9u4oCZcyBwcm9wZXJ0eSBuYW1lXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKCdhIHsgY29sb3I6IGJsYWNrIH0nKTtcbiAgICAgKiBjb25zdCBkZWNsID0gcm9vdC5maXJzdC5maXJzdDtcbiAgICAgKiBkZWNsLnByb3AgLy89PiAnY29sb3InXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgRGVjbGFyYXRpb24jXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSB2YWx1ZSAtIHRoZSBkZWNsYXJhdGlvbuKAmXMgdmFsdWVcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2EgeyBjb2xvcjogYmxhY2sgfScpO1xuICAgICAqIGNvbnN0IGRlY2wgPSByb290LmZpcnN0LmZpcnN0O1xuICAgICAqIGRlY2wudmFsdWUgLy89PiAnYmxhY2snXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgRGVjbGFyYXRpb24jXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn0gaW1wb3J0YW50IC0gYHRydWVgIGlmIHRoZSBkZWNsYXJhdGlvblxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhcyBhbiAhaW1wb3J0YW50IGFubm90YXRpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKCdhIHsgY29sb3I6IGJsYWNrICFpbXBvcnRhbnQ7IGNvbG9yOiByZWQgfScpO1xuICAgICAqIHJvb3QuZmlyc3QuZmlyc3QuaW1wb3J0YW50IC8vPT4gdHJ1ZVxuICAgICAqIHJvb3QuZmlyc3QubGFzdC5pbXBvcnRhbnQgIC8vPT4gdW5kZWZpbmVkXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgRGVjbGFyYXRpb24jXG4gICAgICogQG1lbWJlciB7b2JqZWN0fSByYXdzIC0gSW5mb3JtYXRpb24gdG8gZ2VuZXJhdGUgYnl0ZS10by1ieXRlIGVxdWFsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSBzdHJpbmcgYXMgaXQgd2FzIGluIHRoZSBvcmlnaW4gaW5wdXQuXG4gICAgICpcbiAgICAgKiBFdmVyeSBwYXJzZXIgc2F2ZXMgaXRzIG93biBwcm9wZXJ0aWVzLFxuICAgICAqIGJ1dCB0aGUgZGVmYXVsdCBDU1MgcGFyc2VyIHVzZXM6XG4gICAgICpcbiAgICAgKiAqIGBiZWZvcmVgOiB0aGUgc3BhY2Ugc3ltYm9scyBiZWZvcmUgdGhlIG5vZGUuIEl0IGFsc28gc3RvcmVzIGAqYFxuICAgICAqICAgYW5kIGBfYCBzeW1ib2xzIGJlZm9yZSB0aGUgZGVjbGFyYXRpb24gKElFIGhhY2spLlxuICAgICAqICogYGJldHdlZW5gOiB0aGUgc3ltYm9scyBiZXR3ZWVuIHRoZSBwcm9wZXJ0eSBhbmQgdmFsdWVcbiAgICAgKiAgIGZvciBkZWNsYXJhdGlvbnMuXG4gICAgICogKiBgaW1wb3J0YW50YDogdGhlIGNvbnRlbnQgb2YgdGhlIGltcG9ydGFudCBzdGF0ZW1lbnQsXG4gICAgICogICBpZiBpdCBpcyBub3QganVzdCBgIWltcG9ydGFudGAuXG4gICAgICpcbiAgICAgKiBQb3N0Q1NTIGNsZWFucyBkZWNsYXJhdGlvbiBmcm9tIGNvbW1lbnRzIGFuZCBleHRyYSBzcGFjZXMsXG4gICAgICogYnV0IGl0IHN0b3JlcyBvcmlnaW4gY29udGVudCBpbiByYXdzIHByb3BlcnRpZXMuXG4gICAgICogQXMgc3VjaCwgaWYgeW91IGRvbuKAmXQgY2hhbmdlIGEgZGVjbGFyYXRpb27igJlzIHZhbHVlLFxuICAgICAqIFBvc3RDU1Mgd2lsbCB1c2UgdGhlIHJhdyB2YWx1ZSB3aXRoIGNvbW1lbnRzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBjb25zdCByb290ID0gcG9zdGNzcy5wYXJzZSgnYSB7XFxuICBjb2xvcjpibGFja1xcbn0nKVxuICAgICAqIHJvb3QuZmlyc3QuZmlyc3QucmF3cyAvLz0+IHsgYmVmb3JlOiAnXFxuICAnLCBiZXR3ZWVuOiAnOicgfVxuICAgICAqL1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IERlY2xhcmF0aW9uO1xuIl19


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _cssSyntaxError = __webpack_require__(34);

var _cssSyntaxError2 = _interopRequireDefault(_cssSyntaxError);

var _stringifier = __webpack_require__(43);

var _stringifier2 = _interopRequireDefault(_stringifier);

var _stringify = __webpack_require__(21);

var _stringify2 = _interopRequireDefault(_stringify);

var _warnOnce = __webpack_require__(99);

var _warnOnce2 = _interopRequireDefault(_warnOnce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var cloneNode = function cloneNode(obj, parent) {
    var cloned = new obj.constructor();

    for (var i in obj) {
        if (!obj.hasOwnProperty(i)) continue;
        var value = obj[i];
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

        if (i === 'parent' && type === 'object') {
            if (parent) cloned[i] = parent;
        } else if (i === 'source') {
            cloned[i] = value;
        } else if (value instanceof Array) {
            cloned[i] = value.map(function (j) {
                return cloneNode(j, cloned);
            });
        } else {
            if (type === 'object' && value !== null) value = cloneNode(value);
            cloned[i] = value;
        }
    }

    return cloned;
};

/**
 * All node classes inherit the following common methods.
 *
 * @abstract
 */

var Node = function () {

    /**
     * @param {object} [defaults] - value for node properties
     */
    function Node() {
        var defaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Node);

        this.raws = {};
        if ((typeof defaults === 'undefined' ? 'undefined' : _typeof(defaults)) !== 'object' && typeof defaults !== 'undefined') {
            throw new Error('PostCSS nodes constructor accepts object, not ' + JSON.stringify(defaults));
        }
        for (var name in defaults) {
            this[name] = defaults[name];
        }
    }

    /**
     * Returns a CssSyntaxError instance containing the original position
     * of the node in the source, showing line and column numbers and also
     * a small excerpt to facilitate debugging.
     *
     * If present, an input source map will be used to get the original position
     * of the source, even from a previous compilation step
     * (e.g., from Sass compilation).
     *
     * This method produces very useful error messages.
     *
     * @param {string} message     - error description
     * @param {object} [opts]      - options
     * @param {string} opts.plugin - plugin name that created this error.
     *                               PostCSS will set it automatically.
     * @param {string} opts.word   - a word inside a node’s string that should
     *                               be highlighted as the source of the error
     * @param {number} opts.index  - an index inside a node’s string that should
     *                               be highlighted as the source of the error
     *
     * @return {CssSyntaxError} error object to throw it
     *
     * @example
     * if ( !variables[name] ) {
     *   throw decl.error('Unknown variable ' + name, { word: name });
     *   // CssSyntaxError: postcss-vars:a.sass:4:3: Unknown variable $black
     *   //   color: $black
     *   // a
     *   //          ^
     *   //   background: white
     * }
     */


    Node.prototype.error = function error(message) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.source) {
            var pos = this.positionBy(opts);
            return this.source.input.error(message, pos.line, pos.column, opts);
        } else {
            return new _cssSyntaxError2.default(message);
        }
    };

    /**
     * This method is provided as a convenience wrapper for {@link Result#warn}.
     *
     * @param {Result} result      - the {@link Result} instance
     *                               that will receive the warning
     * @param {string} text        - warning message
     * @param {object} [opts]      - options
     * @param {string} opts.plugin - plugin name that created this warning.
     *                               PostCSS will set it automatically.
     * @param {string} opts.word   - a word inside a node’s string that should
     *                               be highlighted as the source of the warning
     * @param {number} opts.index  - an index inside a node’s string that should
     *                               be highlighted as the source of the warning
     *
     * @return {Warning} created warning object
     *
     * @example
     * const plugin = postcss.plugin('postcss-deprecated', () => {
     *   return (root, result) => {
     *     root.walkDecls('bad', decl => {
     *       decl.warn(result, 'Deprecated property bad');
     *     });
     *   };
     * });
     */


    Node.prototype.warn = function warn(result, text, opts) {
        var data = { node: this };
        for (var i in opts) {
            data[i] = opts[i];
        }return result.warn(text, data);
    };

    /**
     * Removes the node from its parent and cleans the parent properties
     * from the node and its children.
     *
     * @example
     * if ( decl.prop.match(/^-webkit-/) ) {
     *   decl.remove();
     * }
     *
     * @return {Node} node to make calls chain
     */


    Node.prototype.remove = function remove() {
        if (this.parent) {
            this.parent.removeChild(this);
        }
        this.parent = undefined;
        return this;
    };

    /**
     * Returns a CSS string representing the node.
     *
     * @param {stringifier|syntax} [stringifier] - a syntax to use
     *                                             in string generation
     *
     * @return {string} CSS string of this node
     *
     * @example
     * postcss.rule({ selector: 'a' }).toString() //=> "a {}"
     */


    Node.prototype.toString = function toString() {
        var stringifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _stringify2.default;

        if (stringifier.stringify) stringifier = stringifier.stringify;
        var result = '';
        stringifier(this, function (i) {
            result += i;
        });
        return result;
    };

    /**
     * Returns a clone of the node.
     *
     * The resulting cloned node and its (cloned) children will have
     * a clean parent and code style properties.
     *
     * @param {object} [overrides] - new properties to override in the clone.
     *
     * @example
     * const cloned = decl.clone({ prop: '-moz-' + decl.prop });
     * cloned.raws.before  //=> undefined
     * cloned.parent       //=> undefined
     * cloned.toString()   //=> -moz-transform: scale(0)
     *
     * @return {Node} clone of the node
     */


    Node.prototype.clone = function clone() {
        var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var cloned = cloneNode(this);
        for (var name in overrides) {
            cloned[name] = overrides[name];
        }
        return cloned;
    };

    /**
     * Shortcut to clone the node and insert the resulting cloned node
     * before the current node.
     *
     * @param {object} [overrides] - new properties to override in the clone.
     *
     * @example
     * decl.cloneBefore({ prop: '-moz-' + decl.prop });
     *
     * @return {Node} - new node
     */


    Node.prototype.cloneBefore = function cloneBefore() {
        var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var cloned = this.clone(overrides);
        this.parent.insertBefore(this, cloned);
        return cloned;
    };

    /**
     * Shortcut to clone the node and insert the resulting cloned node
     * after the current node.
     *
     * @param {object} [overrides] - new properties to override in the clone.
     *
     * @return {Node} - new node
     */


    Node.prototype.cloneAfter = function cloneAfter() {
        var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var cloned = this.clone(overrides);
        this.parent.insertAfter(this, cloned);
        return cloned;
    };

    /**
     * Inserts node(s) before the current node and removes the current node.
     *
     * @param {...Node} nodes - node(s) to replace current one
     *
     * @example
     * if ( atrule.name == 'mixin' ) {
     *   atrule.replaceWith(mixinRules[atrule.params]);
     * }
     *
     * @return {Node} current node to methods chain
     */


    Node.prototype.replaceWith = function replaceWith() {
        if (this.parent) {
            for (var _len = arguments.length, nodes = Array(_len), _key = 0; _key < _len; _key++) {
                nodes[_key] = arguments[_key];
            }

            for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                var node = _ref;

                this.parent.insertBefore(this, node);
            }

            this.remove();
        }

        return this;
    };

    Node.prototype.moveTo = function moveTo(newParent) {
        (0, _warnOnce2.default)('Node#moveTo was deprecated. Use Container#append.');
        this.cleanRaws(this.root() === newParent.root());
        this.remove();
        newParent.append(this);
        return this;
    };

    Node.prototype.moveBefore = function moveBefore(otherNode) {
        (0, _warnOnce2.default)('Node#moveBefore was deprecated. Use Node#before.');
        this.cleanRaws(this.root() === otherNode.root());
        this.remove();
        otherNode.parent.insertBefore(otherNode, this);
        return this;
    };

    Node.prototype.moveAfter = function moveAfter(otherNode) {
        (0, _warnOnce2.default)('Node#moveAfter was deprecated. Use Node#after.');
        this.cleanRaws(this.root() === otherNode.root());
        this.remove();
        otherNode.parent.insertAfter(otherNode, this);
        return this;
    };

    /**
     * Returns the next child of the node’s parent.
     * Returns `undefined` if the current node is the last child.
     *
     * @return {Node|undefined} next node
     *
     * @example
     * if ( comment.text === 'delete next' ) {
     *   const next = comment.next();
     *   if ( next ) {
     *     next.remove();
     *   }
     * }
     */


    Node.prototype.next = function next() {
        var index = this.parent.index(this);
        return this.parent.nodes[index + 1];
    };

    /**
     * Returns the previous child of the node’s parent.
     * Returns `undefined` if the current node is the first child.
     *
     * @return {Node|undefined} previous node
     *
     * @example
     * const annotation = decl.prev();
     * if ( annotation.type == 'comment' ) {
     *  readAnnotation(annotation.text);
     * }
     */


    Node.prototype.prev = function prev() {
        var index = this.parent.index(this);
        return this.parent.nodes[index - 1];
    };

    /**
     * Insert new node before current node to current node’s parent.
     *
     * Just alias for `node.parent.insertBefore(node, add)`.
     *
     * @param {Node|object|string|Node[]} add - new node
     *
     * @return {Node} this node for methods chain.
     *
     * @example
     * decl.before('content: ""');
     */


    Node.prototype.before = function before(add) {
        this.parent.insertBefore(this, add);
        return this;
    };

    /**
     * Insert new node after current node to current node’s parent.
     *
     * Just alias for `node.parent.insertAfter(node, add)`.
     *
     * @param {Node|object|string|Node[]} add - new node
     *
     * @return {Node} this node for methods chain.
     *
     * @example
     * decl.after('color: black');
     */


    Node.prototype.after = function after(add) {
        this.parent.insertAfter(this, add);
        return this;
    };

    Node.prototype.toJSON = function toJSON() {
        var fixed = {};

        for (var name in this) {
            if (!this.hasOwnProperty(name)) continue;
            if (name === 'parent') continue;
            var value = this[name];

            if (value instanceof Array) {
                fixed[name] = value.map(function (i) {
                    if ((typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object' && i.toJSON) {
                        return i.toJSON();
                    } else {
                        return i;
                    }
                });
            } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.toJSON) {
                fixed[name] = value.toJSON();
            } else {
                fixed[name] = value;
            }
        }

        return fixed;
    };

    /**
     * Returns a {@link Node#raws} value. If the node is missing
     * the code style property (because the node was manually built or cloned),
     * PostCSS will try to autodetect the code style property by looking
     * at other nodes in the tree.
     *
     * @param {string} prop          - name of code style property
     * @param {string} [defaultType] - name of default value, it can be missed
     *                                 if the value is the same as prop
     *
     * @example
     * const root = postcss.parse('a { background: white }');
     * root.nodes[0].append({ prop: 'color', value: 'black' });
     * root.nodes[0].nodes[1].raws.before   //=> undefined
     * root.nodes[0].nodes[1].raw('before') //=> ' '
     *
     * @return {string} code style value
     */


    Node.prototype.raw = function raw(prop, defaultType) {
        var str = new _stringifier2.default();
        return str.raw(this, prop, defaultType);
    };

    /**
     * Finds the Root instance of the node’s tree.
     *
     * @example
     * root.nodes[0].nodes[0].root() === root
     *
     * @return {Root} root parent
     */


    Node.prototype.root = function root() {
        var result = this;
        while (result.parent) {
            result = result.parent;
        }return result;
    };

    Node.prototype.cleanRaws = function cleanRaws(keepBetween) {
        delete this.raws.before;
        delete this.raws.after;
        if (!keepBetween) delete this.raws.between;
    };

    Node.prototype.positionInside = function positionInside(index) {
        var string = this.toString();
        var column = this.source.start.column;
        var line = this.source.start.line;

        for (var i = 0; i < index; i++) {
            if (string[i] === '\n') {
                column = 1;
                line += 1;
            } else {
                column += 1;
            }
        }

        return { line: line, column: column };
    };

    Node.prototype.positionBy = function positionBy(opts) {
        var pos = this.source.start;
        if (opts.index) {
            pos = this.positionInside(opts.index);
        } else if (opts.word) {
            var index = this.toString().indexOf(opts.word);
            if (index !== -1) pos = this.positionInside(index);
        }
        return pos;
    };

    /**
     * @memberof Node#
     * @member {string} type - String representing the node’s type.
     *                         Possible values are `root`, `atrule`, `rule`,
     *                         `decl`, or `comment`.
     *
     * @example
     * postcss.decl({ prop: 'color', value: 'black' }).type //=> 'decl'
     */

    /**
     * @memberof Node#
     * @member {Container} parent - the node’s parent node.
     *
     * @example
     * root.nodes[0].parent == root;
     */

    /**
     * @memberof Node#
     * @member {source} source - the input source of the node
     *
     * The property is used in source map generation.
     *
     * If you create a node manually (e.g., with `postcss.decl()`),
     * that node will not have a `source` property and will be absent
     * from the source map. For this reason, the plugin developer should
     * consider cloning nodes to create new ones (in which case the new node’s
     * source will reference the original, cloned node) or setting
     * the `source` property manually.
     *
     * ```js
     * // Bad
     * const prefixed = postcss.decl({
     *   prop: '-moz-' + decl.prop,
     *   value: decl.value
     * });
     *
     * // Good
     * const prefixed = decl.clone({ prop: '-moz-' + decl.prop });
     * ```
     *
     * ```js
     * if ( atrule.name == 'add-link' ) {
     *   const rule = postcss.rule({ selector: 'a', source: atrule.source });
     *   atrule.parent.insertBefore(atrule, rule);
     * }
     * ```
     *
     * @example
     * decl.source.input.from //=> '/home/ai/a.sass'
     * decl.source.start      //=> { line: 10, column: 2 }
     * decl.source.end        //=> { line: 10, column: 12 }
     */

    /**
     * @memberof Node#
     * @member {object} raws - Information to generate byte-to-byte equal
     *                         node string as it was in the origin input.
     *
     * Every parser saves its own properties,
     * but the default CSS parser uses:
     *
     * * `before`: the space symbols before the node. It also stores `*`
     *   and `_` symbols before the declaration (IE hack).
     * * `after`: the space symbols after the last child of the node
     *   to the end of the node.
     * * `between`: the symbols between the property and value
     *   for declarations, selector and `{` for rules, or last parameter
     *   and `{` for at-rules.
     * * `semicolon`: contains true if the last child has
     *   an (optional) semicolon.
     * * `afterName`: the space between the at-rule name and its parameters.
     * * `left`: the space symbols between `/*` and the comment’s text.
     * * `right`: the space symbols between the comment’s text
     *   and <code>*&#47;</code>.
     * * `important`: the content of the important statement,
     *   if it is not just `!important`.
     *
     * PostCSS cleans selectors, declaration values and at-rule parameters
     * from comments and extra spaces, but it stores origin content in raws
     * properties. As such, if you don’t change a declaration’s value,
     * PostCSS will use the raw value with comments.
     *
     * @example
     * const root = postcss.parse('a {\n  color:black\n}')
     * root.first.first.raws //=> { before: '\n  ', between: ':' }
     */

    return Node;
}();

exports.default = Node;

/**
 * @typedef {object} position
 * @property {number} line   - source line in file
 * @property {number} column - source column in file
 */

/**
 * @typedef {object} source
 * @property {Input} input    - {@link Input} with input file
 * @property {position} start - The starting position of the node’s source
 * @property {position} end   - The ending position of the node’s source
 */

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGUuZXM2Il0sIm5hbWVzIjpbImNsb25lTm9kZSIsIm9iaiIsInBhcmVudCIsImNsb25lZCIsImNvbnN0cnVjdG9yIiwiaSIsImhhc093blByb3BlcnR5IiwidmFsdWUiLCJ0eXBlIiwiQXJyYXkiLCJtYXAiLCJqIiwiTm9kZSIsImRlZmF1bHRzIiwicmF3cyIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5hbWUiLCJlcnJvciIsIm1lc3NhZ2UiLCJvcHRzIiwic291cmNlIiwicG9zIiwicG9zaXRpb25CeSIsImlucHV0IiwibGluZSIsImNvbHVtbiIsIndhcm4iLCJyZXN1bHQiLCJ0ZXh0IiwiZGF0YSIsIm5vZGUiLCJyZW1vdmUiLCJyZW1vdmVDaGlsZCIsInVuZGVmaW5lZCIsInRvU3RyaW5nIiwic3RyaW5naWZpZXIiLCJjbG9uZSIsIm92ZXJyaWRlcyIsImNsb25lQmVmb3JlIiwiaW5zZXJ0QmVmb3JlIiwiY2xvbmVBZnRlciIsImluc2VydEFmdGVyIiwicmVwbGFjZVdpdGgiLCJub2RlcyIsIm1vdmVUbyIsIm5ld1BhcmVudCIsImNsZWFuUmF3cyIsInJvb3QiLCJhcHBlbmQiLCJtb3ZlQmVmb3JlIiwib3RoZXJOb2RlIiwibW92ZUFmdGVyIiwibmV4dCIsImluZGV4IiwicHJldiIsImJlZm9yZSIsImFkZCIsImFmdGVyIiwidG9KU09OIiwiZml4ZWQiLCJyYXciLCJwcm9wIiwiZGVmYXVsdFR5cGUiLCJzdHIiLCJrZWVwQmV0d2VlbiIsImJldHdlZW4iLCJwb3NpdGlvbkluc2lkZSIsInN0cmluZyIsInN0YXJ0Iiwid29yZCIsImluZGV4T2YiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBLElBQUlBLFlBQVksU0FBWkEsU0FBWSxDQUFVQyxHQUFWLEVBQWVDLE1BQWYsRUFBdUI7QUFDbkMsUUFBSUMsU0FBUyxJQUFJRixJQUFJRyxXQUFSLEVBQWI7O0FBRUEsU0FBTSxJQUFJQyxDQUFWLElBQWVKLEdBQWYsRUFBcUI7QUFDakIsWUFBSyxDQUFDQSxJQUFJSyxjQUFKLENBQW1CRCxDQUFuQixDQUFOLEVBQThCO0FBQzlCLFlBQUlFLFFBQVFOLElBQUlJLENBQUosQ0FBWjtBQUNBLFlBQUlHLGNBQWVELEtBQWYseUNBQWVBLEtBQWYsQ0FBSjs7QUFFQSxZQUFLRixNQUFNLFFBQU4sSUFBa0JHLFNBQVMsUUFBaEMsRUFBMkM7QUFDdkMsZ0JBQUlOLE1BQUosRUFBWUMsT0FBT0UsQ0FBUCxJQUFZSCxNQUFaO0FBQ2YsU0FGRCxNQUVPLElBQUtHLE1BQU0sUUFBWCxFQUFzQjtBQUN6QkYsbUJBQU9FLENBQVAsSUFBWUUsS0FBWjtBQUNILFNBRk0sTUFFQSxJQUFLQSxpQkFBaUJFLEtBQXRCLEVBQThCO0FBQ2pDTixtQkFBT0UsQ0FBUCxJQUFZRSxNQUFNRyxHQUFOLENBQVc7QUFBQSx1QkFBS1YsVUFBVVcsQ0FBVixFQUFhUixNQUFiLENBQUw7QUFBQSxhQUFYLENBQVo7QUFDSCxTQUZNLE1BRUE7QUFDSCxnQkFBS0ssU0FBUyxRQUFULElBQXFCRCxVQUFVLElBQXBDLEVBQTJDQSxRQUFRUCxVQUFVTyxLQUFWLENBQVI7QUFDM0NKLG1CQUFPRSxDQUFQLElBQVlFLEtBQVo7QUFDSDtBQUNKOztBQUVELFdBQU9KLE1BQVA7QUFDSCxDQXJCRDs7QUF1QkE7Ozs7OztJQUtNUyxJOztBQUVGOzs7QUFHQSxvQkFBNEI7QUFBQSxZQUFoQkMsUUFBZ0IsdUVBQUwsRUFBSzs7QUFBQTs7QUFDeEIsYUFBS0MsSUFBTCxHQUFZLEVBQVo7QUFDQSxZQUFLLFFBQU9ELFFBQVAseUNBQU9BLFFBQVAsT0FBb0IsUUFBcEIsSUFBZ0MsT0FBT0EsUUFBUCxLQUFvQixXQUF6RCxFQUF1RTtBQUNuRSxrQkFBTSxJQUFJRSxLQUFKLENBQ0YsbURBQ0FDLEtBQUtDLFNBQUwsQ0FBZUosUUFBZixDQUZFLENBQU47QUFHSDtBQUNELGFBQU0sSUFBSUssSUFBVixJQUFrQkwsUUFBbEIsRUFBNkI7QUFDekIsaUJBQUtLLElBQUwsSUFBYUwsU0FBU0ssSUFBVCxDQUFiO0FBQ0g7QUFDSjs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQkFnQ0FDLEssa0JBQU1DLE8sRUFBcUI7QUFBQSxZQUFaQyxJQUFZLHVFQUFMLEVBQUs7O0FBQ3ZCLFlBQUssS0FBS0MsTUFBVixFQUFtQjtBQUNmLGdCQUFJQyxNQUFNLEtBQUtDLFVBQUwsQ0FBZ0JILElBQWhCLENBQVY7QUFDQSxtQkFBTyxLQUFLQyxNQUFMLENBQVlHLEtBQVosQ0FBa0JOLEtBQWxCLENBQXdCQyxPQUF4QixFQUFpQ0csSUFBSUcsSUFBckMsRUFBMkNILElBQUlJLE1BQS9DLEVBQXVETixJQUF2RCxDQUFQO0FBQ0gsU0FIRCxNQUdPO0FBQ0gsbUJBQU8sNkJBQW1CRCxPQUFuQixDQUFQO0FBQ0g7QUFDSixLOztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUJBeUJBUSxJLGlCQUFLQyxNLEVBQVFDLEksRUFBTVQsSSxFQUFNO0FBQ3JCLFlBQUlVLE9BQU8sRUFBRUMsTUFBTSxJQUFSLEVBQVg7QUFDQSxhQUFNLElBQUkzQixDQUFWLElBQWVnQixJQUFmO0FBQXNCVSxpQkFBSzFCLENBQUwsSUFBVWdCLEtBQUtoQixDQUFMLENBQVY7QUFBdEIsU0FDQSxPQUFPd0IsT0FBT0QsSUFBUCxDQUFZRSxJQUFaLEVBQWtCQyxJQUFsQixDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7Ozs7OzttQkFXQUUsTSxxQkFBUztBQUNMLFlBQUssS0FBSy9CLE1BQVYsRUFBbUI7QUFDZixpQkFBS0EsTUFBTCxDQUFZZ0MsV0FBWixDQUF3QixJQUF4QjtBQUNIO0FBQ0QsYUFBS2hDLE1BQUwsR0FBY2lDLFNBQWQ7QUFDQSxlQUFPLElBQVA7QUFDSCxLOztBQUVEOzs7Ozs7Ozs7Ozs7O21CQVdBQyxRLHVCQUFrQztBQUFBLFlBQXpCQyxXQUF5Qjs7QUFDOUIsWUFBS0EsWUFBWXBCLFNBQWpCLEVBQTZCb0IsY0FBY0EsWUFBWXBCLFNBQTFCO0FBQzdCLFlBQUlZLFNBQVUsRUFBZDtBQUNBUSxvQkFBWSxJQUFaLEVBQWtCLGFBQUs7QUFDbkJSLHNCQUFVeEIsQ0FBVjtBQUNILFNBRkQ7QUFHQSxlQUFPd0IsTUFBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQkFnQkFTLEssb0JBQXVCO0FBQUEsWUFBakJDLFNBQWlCLHVFQUFMLEVBQUs7O0FBQ25CLFlBQUlwQyxTQUFTSCxVQUFVLElBQVYsQ0FBYjtBQUNBLGFBQU0sSUFBSWtCLElBQVYsSUFBa0JxQixTQUFsQixFQUE4QjtBQUMxQnBDLG1CQUFPZSxJQUFQLElBQWVxQixVQUFVckIsSUFBVixDQUFmO0FBQ0g7QUFDRCxlQUFPZixNQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7Ozs7OzttQkFXQXFDLFcsMEJBQTZCO0FBQUEsWUFBakJELFNBQWlCLHVFQUFMLEVBQUs7O0FBQ3pCLFlBQUlwQyxTQUFTLEtBQUttQyxLQUFMLENBQVdDLFNBQVgsQ0FBYjtBQUNBLGFBQUtyQyxNQUFMLENBQVl1QyxZQUFaLENBQXlCLElBQXpCLEVBQStCdEMsTUFBL0I7QUFDQSxlQUFPQSxNQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7OzttQkFRQXVDLFUseUJBQTRCO0FBQUEsWUFBakJILFNBQWlCLHVFQUFMLEVBQUs7O0FBQ3hCLFlBQUlwQyxTQUFTLEtBQUttQyxLQUFMLENBQVdDLFNBQVgsQ0FBYjtBQUNBLGFBQUtyQyxNQUFMLENBQVl5QyxXQUFaLENBQXdCLElBQXhCLEVBQThCeEMsTUFBOUI7QUFDQSxlQUFPQSxNQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7bUJBWUF5QyxXLDBCQUFzQjtBQUNsQixZQUFJLEtBQUsxQyxNQUFULEVBQWlCO0FBQUEsOENBRE4yQyxLQUNNO0FBRE5BLHFCQUNNO0FBQUE7O0FBQ2IsaUNBQWlCQSxLQUFqQixrSEFBd0I7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLG9CQUFmYixJQUFlOztBQUNwQixxQkFBSzlCLE1BQUwsQ0FBWXVDLFlBQVosQ0FBeUIsSUFBekIsRUFBK0JULElBQS9CO0FBQ0g7O0FBRUQsaUJBQUtDLE1BQUw7QUFDSDs7QUFFRCxlQUFPLElBQVA7QUFDSCxLOzttQkFFRGEsTSxtQkFBT0MsUyxFQUFXO0FBQ2QsZ0NBQVMsbURBQVQ7QUFDQSxhQUFLQyxTQUFMLENBQWUsS0FBS0MsSUFBTCxPQUFnQkYsVUFBVUUsSUFBVixFQUEvQjtBQUNBLGFBQUtoQixNQUFMO0FBQ0FjLGtCQUFVRyxNQUFWLENBQWlCLElBQWpCO0FBQ0EsZUFBTyxJQUFQO0FBQ0gsSzs7bUJBRURDLFUsdUJBQVdDLFMsRUFBVztBQUNsQixnQ0FBUyxrREFBVDtBQUNBLGFBQUtKLFNBQUwsQ0FBZSxLQUFLQyxJQUFMLE9BQWdCRyxVQUFVSCxJQUFWLEVBQS9CO0FBQ0EsYUFBS2hCLE1BQUw7QUFDQW1CLGtCQUFVbEQsTUFBVixDQUFpQnVDLFlBQWpCLENBQThCVyxTQUE5QixFQUF5QyxJQUF6QztBQUNBLGVBQU8sSUFBUDtBQUNILEs7O21CQUVEQyxTLHNCQUFVRCxTLEVBQVc7QUFDakIsZ0NBQVMsZ0RBQVQ7QUFDQSxhQUFLSixTQUFMLENBQWUsS0FBS0MsSUFBTCxPQUFnQkcsVUFBVUgsSUFBVixFQUEvQjtBQUNBLGFBQUtoQixNQUFMO0FBQ0FtQixrQkFBVWxELE1BQVYsQ0FBaUJ5QyxXQUFqQixDQUE2QlMsU0FBN0IsRUFBd0MsSUFBeEM7QUFDQSxlQUFPLElBQVA7QUFDSCxLOztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7O21CQWNBRSxJLG1CQUFPO0FBQ0gsWUFBSUMsUUFBUSxLQUFLckQsTUFBTCxDQUFZcUQsS0FBWixDQUFrQixJQUFsQixDQUFaO0FBQ0EsZUFBTyxLQUFLckQsTUFBTCxDQUFZMkMsS0FBWixDQUFrQlUsUUFBUSxDQUExQixDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7bUJBWUFDLEksbUJBQU87QUFDSCxZQUFJRCxRQUFRLEtBQUtyRCxNQUFMLENBQVlxRCxLQUFaLENBQWtCLElBQWxCLENBQVo7QUFDQSxlQUFPLEtBQUtyRCxNQUFMLENBQVkyQyxLQUFaLENBQWtCVSxRQUFRLENBQTFCLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7Ozs7Ozs7OzttQkFZQUUsTSxtQkFBT0MsRyxFQUFLO0FBQ1IsYUFBS3hELE1BQUwsQ0FBWXVDLFlBQVosQ0FBeUIsSUFBekIsRUFBK0JpQixHQUEvQjtBQUNBLGVBQU8sSUFBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7O21CQVlBQyxLLGtCQUFNRCxHLEVBQUs7QUFDUCxhQUFLeEQsTUFBTCxDQUFZeUMsV0FBWixDQUF3QixJQUF4QixFQUE4QmUsR0FBOUI7QUFDQSxlQUFPLElBQVA7QUFDSCxLOzttQkFFREUsTSxxQkFBUztBQUNMLFlBQUlDLFFBQVEsRUFBWjs7QUFFQSxhQUFNLElBQUkzQyxJQUFWLElBQWtCLElBQWxCLEVBQXlCO0FBQ3JCLGdCQUFLLENBQUMsS0FBS1osY0FBTCxDQUFvQlksSUFBcEIsQ0FBTixFQUFrQztBQUNsQyxnQkFBS0EsU0FBUyxRQUFkLEVBQXlCO0FBQ3pCLGdCQUFJWCxRQUFRLEtBQUtXLElBQUwsQ0FBWjs7QUFFQSxnQkFBS1gsaUJBQWlCRSxLQUF0QixFQUE4QjtBQUMxQm9ELHNCQUFNM0MsSUFBTixJQUFjWCxNQUFNRyxHQUFOLENBQVcsYUFBSztBQUMxQix3QkFBSyxRQUFPTCxDQUFQLHlDQUFPQSxDQUFQLE9BQWEsUUFBYixJQUF5QkEsRUFBRXVELE1BQWhDLEVBQXlDO0FBQ3JDLCtCQUFPdkQsRUFBRXVELE1BQUYsRUFBUDtBQUNILHFCQUZELE1BRU87QUFDSCwrQkFBT3ZELENBQVA7QUFDSDtBQUNKLGlCQU5hLENBQWQ7QUFPSCxhQVJELE1BUU8sSUFBSyxRQUFPRSxLQUFQLHlDQUFPQSxLQUFQLE9BQWlCLFFBQWpCLElBQTZCQSxNQUFNcUQsTUFBeEMsRUFBaUQ7QUFDcERDLHNCQUFNM0MsSUFBTixJQUFjWCxNQUFNcUQsTUFBTixFQUFkO0FBQ0gsYUFGTSxNQUVBO0FBQ0hDLHNCQUFNM0MsSUFBTixJQUFjWCxLQUFkO0FBQ0g7QUFDSjs7QUFFRCxlQUFPc0QsS0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21CQWtCQUMsRyxnQkFBSUMsSSxFQUFNQyxXLEVBQWE7QUFDbkIsWUFBSUMsTUFBTSwyQkFBVjtBQUNBLGVBQU9BLElBQUlILEdBQUosQ0FBUSxJQUFSLEVBQWNDLElBQWQsRUFBb0JDLFdBQXBCLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7Ozs7O21CQVFBZixJLG1CQUFPO0FBQ0gsWUFBSXBCLFNBQVMsSUFBYjtBQUNBLGVBQVFBLE9BQU8zQixNQUFmO0FBQXdCMkIscUJBQVNBLE9BQU8zQixNQUFoQjtBQUF4QixTQUNBLE9BQU8yQixNQUFQO0FBQ0gsSzs7bUJBRURtQixTLHNCQUFVa0IsVyxFQUFhO0FBQ25CLGVBQU8sS0FBS3BELElBQUwsQ0FBVTJDLE1BQWpCO0FBQ0EsZUFBTyxLQUFLM0MsSUFBTCxDQUFVNkMsS0FBakI7QUFDQSxZQUFLLENBQUNPLFdBQU4sRUFBb0IsT0FBTyxLQUFLcEQsSUFBTCxDQUFVcUQsT0FBakI7QUFDdkIsSzs7bUJBRURDLGMsMkJBQWViLEssRUFBTztBQUNsQixZQUFJYyxTQUFTLEtBQUtqQyxRQUFMLEVBQWI7QUFDQSxZQUFJVCxTQUFTLEtBQUtMLE1BQUwsQ0FBWWdELEtBQVosQ0FBa0IzQyxNQUEvQjtBQUNBLFlBQUlELE9BQVMsS0FBS0osTUFBTCxDQUFZZ0QsS0FBWixDQUFrQjVDLElBQS9COztBQUVBLGFBQU0sSUFBSXJCLElBQUksQ0FBZCxFQUFpQkEsSUFBSWtELEtBQXJCLEVBQTRCbEQsR0FBNUIsRUFBa0M7QUFDOUIsZ0JBQUtnRSxPQUFPaEUsQ0FBUCxNQUFjLElBQW5CLEVBQTBCO0FBQ3RCc0IseUJBQVMsQ0FBVDtBQUNBRCx3QkFBUyxDQUFUO0FBQ0gsYUFIRCxNQUdPO0FBQ0hDLDBCQUFVLENBQVY7QUFDSDtBQUNKOztBQUVELGVBQU8sRUFBRUQsVUFBRixFQUFRQyxjQUFSLEVBQVA7QUFDSCxLOzttQkFFREgsVSx1QkFBV0gsSSxFQUFNO0FBQ2IsWUFBSUUsTUFBTSxLQUFLRCxNQUFMLENBQVlnRCxLQUF0QjtBQUNBLFlBQUtqRCxLQUFLa0MsS0FBVixFQUFrQjtBQUNkaEMsa0JBQU0sS0FBSzZDLGNBQUwsQ0FBb0IvQyxLQUFLa0MsS0FBekIsQ0FBTjtBQUNILFNBRkQsTUFFTyxJQUFLbEMsS0FBS2tELElBQVYsRUFBaUI7QUFDcEIsZ0JBQUloQixRQUFRLEtBQUtuQixRQUFMLEdBQWdCb0MsT0FBaEIsQ0FBd0JuRCxLQUFLa0QsSUFBN0IsQ0FBWjtBQUNBLGdCQUFLaEIsVUFBVSxDQUFDLENBQWhCLEVBQW9CaEMsTUFBTSxLQUFLNkMsY0FBTCxDQUFvQmIsS0FBcEIsQ0FBTjtBQUN2QjtBQUNELGVBQU9oQyxHQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7OztBQVVBOzs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQW9DV1gsSTs7QUFFZjs7Ozs7O0FBTUEiLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDc3NTeW50YXhFcnJvciBmcm9tICcuL2Nzcy1zeW50YXgtZXJyb3InO1xuaW1wb3J0IFN0cmluZ2lmaWVyICAgIGZyb20gJy4vc3RyaW5naWZpZXInO1xuaW1wb3J0IHN0cmluZ2lmeSAgICAgIGZyb20gJy4vc3RyaW5naWZ5JztcbmltcG9ydCB3YXJuT25jZSAgICAgICBmcm9tICcuL3dhcm4tb25jZSc7XG5cbmxldCBjbG9uZU5vZGUgPSBmdW5jdGlvbiAob2JqLCBwYXJlbnQpIHtcbiAgICBsZXQgY2xvbmVkID0gbmV3IG9iai5jb25zdHJ1Y3RvcigpO1xuXG4gICAgZm9yICggbGV0IGkgaW4gb2JqICkge1xuICAgICAgICBpZiAoICFvYmouaGFzT3duUHJvcGVydHkoaSkgKSBjb250aW51ZTtcbiAgICAgICAgbGV0IHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBsZXQgdHlwZSAgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICAgICAgaWYgKCBpID09PSAncGFyZW50JyAmJiB0eXBlID09PSAnb2JqZWN0JyApIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnQpIGNsb25lZFtpXSA9IHBhcmVudDtcbiAgICAgICAgfSBlbHNlIGlmICggaSA9PT0gJ3NvdXJjZScgKSB7XG4gICAgICAgICAgICBjbG9uZWRbaV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmICggdmFsdWUgaW5zdGFuY2VvZiBBcnJheSApIHtcbiAgICAgICAgICAgIGNsb25lZFtpXSA9IHZhbHVlLm1hcCggaiA9PiBjbG9uZU5vZGUoaiwgY2xvbmVkKSApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCB0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCApIHZhbHVlID0gY2xvbmVOb2RlKHZhbHVlKTtcbiAgICAgICAgICAgIGNsb25lZFtpXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lZDtcbn07XG5cbi8qKlxuICogQWxsIG5vZGUgY2xhc3NlcyBpbmhlcml0IHRoZSBmb2xsb3dpbmcgY29tbW9uIG1ldGhvZHMuXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIE5vZGUge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtkZWZhdWx0c10gLSB2YWx1ZSBmb3Igbm9kZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGVmYXVsdHMgPSB7IH0pIHtcbiAgICAgICAgdGhpcy5yYXdzID0geyB9O1xuICAgICAgICBpZiAoIHR5cGVvZiBkZWZhdWx0cyAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIGRlZmF1bHRzICE9PSAndW5kZWZpbmVkJyApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAnUG9zdENTUyBub2RlcyBjb25zdHJ1Y3RvciBhY2NlcHRzIG9iamVjdCwgbm90ICcgK1xuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGRlZmF1bHRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICggbGV0IG5hbWUgaW4gZGVmYXVsdHMgKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gZGVmYXVsdHNbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ3NzU3ludGF4RXJyb3IgaW5zdGFuY2UgY29udGFpbmluZyB0aGUgb3JpZ2luYWwgcG9zaXRpb25cbiAgICAgKiBvZiB0aGUgbm9kZSBpbiB0aGUgc291cmNlLCBzaG93aW5nIGxpbmUgYW5kIGNvbHVtbiBudW1iZXJzIGFuZCBhbHNvXG4gICAgICogYSBzbWFsbCBleGNlcnB0IHRvIGZhY2lsaXRhdGUgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogSWYgcHJlc2VudCwgYW4gaW5wdXQgc291cmNlIG1hcCB3aWxsIGJlIHVzZWQgdG8gZ2V0IHRoZSBvcmlnaW5hbCBwb3NpdGlvblxuICAgICAqIG9mIHRoZSBzb3VyY2UsIGV2ZW4gZnJvbSBhIHByZXZpb3VzIGNvbXBpbGF0aW9uIHN0ZXBcbiAgICAgKiAoZS5nLiwgZnJvbSBTYXNzIGNvbXBpbGF0aW9uKS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHByb2R1Y2VzIHZlcnkgdXNlZnVsIGVycm9yIG1lc3NhZ2VzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgICAgIC0gZXJyb3IgZGVzY3JpcHRpb25cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdHNdICAgICAgLSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMucGx1Z2luIC0gcGx1Z2luIG5hbWUgdGhhdCBjcmVhdGVkIHRoaXMgZXJyb3IuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9zdENTUyB3aWxsIHNldCBpdCBhdXRvbWF0aWNhbGx5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLndvcmQgICAtIGEgd29yZCBpbnNpZGUgYSBub2Rl4oCZcyBzdHJpbmcgdGhhdCBzaG91bGRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBoaWdobGlnaHRlZCBhcyB0aGUgc291cmNlIG9mIHRoZSBlcnJvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLmluZGV4ICAtIGFuIGluZGV4IGluc2lkZSBhIG5vZGXigJlzIHN0cmluZyB0aGF0IHNob3VsZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGhpZ2hsaWdodGVkIGFzIHRoZSBzb3VyY2Ugb2YgdGhlIGVycm9yXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtDc3NTeW50YXhFcnJvcn0gZXJyb3Igb2JqZWN0IHRvIHRocm93IGl0XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGlmICggIXZhcmlhYmxlc1tuYW1lXSApIHtcbiAgICAgKiAgIHRocm93IGRlY2wuZXJyb3IoJ1Vua25vd24gdmFyaWFibGUgJyArIG5hbWUsIHsgd29yZDogbmFtZSB9KTtcbiAgICAgKiAgIC8vIENzc1N5bnRheEVycm9yOiBwb3N0Y3NzLXZhcnM6YS5zYXNzOjQ6MzogVW5rbm93biB2YXJpYWJsZSAkYmxhY2tcbiAgICAgKiAgIC8vICAgY29sb3I6ICRibGFja1xuICAgICAqICAgLy8gYVxuICAgICAqICAgLy8gICAgICAgICAgXlxuICAgICAqICAgLy8gICBiYWNrZ3JvdW5kOiB3aGl0ZVxuICAgICAqIH1cbiAgICAgKi9cbiAgICBlcnJvcihtZXNzYWdlLCBvcHRzID0geyB9KSB7XG4gICAgICAgIGlmICggdGhpcy5zb3VyY2UgKSB7XG4gICAgICAgICAgICBsZXQgcG9zID0gdGhpcy5wb3NpdGlvbkJ5KG9wdHMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLmlucHV0LmVycm9yKG1lc3NhZ2UsIHBvcy5saW5lLCBwb3MuY29sdW1uLCBvcHRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ3NzU3ludGF4RXJyb3IobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBhIGNvbnZlbmllbmNlIHdyYXBwZXIgZm9yIHtAbGluayBSZXN1bHQjd2Fybn0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1Jlc3VsdH0gcmVzdWx0ICAgICAgLSB0aGUge0BsaW5rIFJlc3VsdH0gaW5zdGFuY2VcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgd2FybmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0ICAgICAgICAtIHdhcm5pbmcgbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0c10gICAgICAtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5wbHVnaW4gLSBwbHVnaW4gbmFtZSB0aGF0IGNyZWF0ZWQgdGhpcyB3YXJuaW5nLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvc3RDU1Mgd2lsbCBzZXQgaXQgYXV0b21hdGljYWxseS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy53b3JkICAgLSBhIHdvcmQgaW5zaWRlIGEgbm9kZeKAmXMgc3RyaW5nIHRoYXQgc2hvdWxkXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgaGlnaGxpZ2h0ZWQgYXMgdGhlIHNvdXJjZSBvZiB0aGUgd2FybmluZ1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLmluZGV4ICAtIGFuIGluZGV4IGluc2lkZSBhIG5vZGXigJlzIHN0cmluZyB0aGF0IHNob3VsZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGhpZ2hsaWdodGVkIGFzIHRoZSBzb3VyY2Ugb2YgdGhlIHdhcm5pbmdcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1dhcm5pbmd9IGNyZWF0ZWQgd2FybmluZyBvYmplY3RcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3QgcGx1Z2luID0gcG9zdGNzcy5wbHVnaW4oJ3Bvc3Rjc3MtZGVwcmVjYXRlZCcsICgpID0+IHtcbiAgICAgKiAgIHJldHVybiAocm9vdCwgcmVzdWx0KSA9PiB7XG4gICAgICogICAgIHJvb3Qud2Fsa0RlY2xzKCdiYWQnLCBkZWNsID0+IHtcbiAgICAgKiAgICAgICBkZWNsLndhcm4ocmVzdWx0LCAnRGVwcmVjYXRlZCBwcm9wZXJ0eSBiYWQnKTtcbiAgICAgKiAgICAgfSk7XG4gICAgICogICB9O1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHdhcm4ocmVzdWx0LCB0ZXh0LCBvcHRzKSB7XG4gICAgICAgIGxldCBkYXRhID0geyBub2RlOiB0aGlzIH07XG4gICAgICAgIGZvciAoIGxldCBpIGluIG9wdHMgKSBkYXRhW2ldID0gb3B0c1tpXTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC53YXJuKHRleHQsIGRhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIG5vZGUgZnJvbSBpdHMgcGFyZW50IGFuZCBjbGVhbnMgdGhlIHBhcmVudCBwcm9wZXJ0aWVzXG4gICAgICogZnJvbSB0aGUgbm9kZSBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBpZiAoIGRlY2wucHJvcC5tYXRjaCgvXi13ZWJraXQtLykgKSB7XG4gICAgICogICBkZWNsLnJlbW92ZSgpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge05vZGV9IG5vZGUgdG8gbWFrZSBjYWxscyBjaGFpblxuICAgICAqL1xuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgaWYgKCB0aGlzLnBhcmVudCApIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ1NTIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ2lmaWVyfHN5bnRheH0gW3N0cmluZ2lmaWVyXSAtIGEgc3ludGF4IHRvIHVzZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gc3RyaW5nIGdlbmVyYXRpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gQ1NTIHN0cmluZyBvZiB0aGlzIG5vZGVcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogcG9zdGNzcy5ydWxlKHsgc2VsZWN0b3I6ICdhJyB9KS50b1N0cmluZygpIC8vPT4gXCJhIHt9XCJcbiAgICAgKi9cbiAgICB0b1N0cmluZyhzdHJpbmdpZmllciA9IHN0cmluZ2lmeSkge1xuICAgICAgICBpZiAoIHN0cmluZ2lmaWVyLnN0cmluZ2lmeSApIHN0cmluZ2lmaWVyID0gc3RyaW5naWZpZXIuc3RyaW5naWZ5O1xuICAgICAgICBsZXQgcmVzdWx0ICA9ICcnO1xuICAgICAgICBzdHJpbmdpZmllcih0aGlzLCBpID0+IHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgY2xvbmUgb2YgdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBUaGUgcmVzdWx0aW5nIGNsb25lZCBub2RlIGFuZCBpdHMgKGNsb25lZCkgY2hpbGRyZW4gd2lsbCBoYXZlXG4gICAgICogYSBjbGVhbiBwYXJlbnQgYW5kIGNvZGUgc3R5bGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3ZlcnJpZGVzXSAtIG5ldyBwcm9wZXJ0aWVzIHRvIG92ZXJyaWRlIGluIHRoZSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3QgY2xvbmVkID0gZGVjbC5jbG9uZSh7IHByb3A6ICctbW96LScgKyBkZWNsLnByb3AgfSk7XG4gICAgICogY2xvbmVkLnJhd3MuYmVmb3JlICAvLz0+IHVuZGVmaW5lZFxuICAgICAqIGNsb25lZC5wYXJlbnQgICAgICAgLy89PiB1bmRlZmluZWRcbiAgICAgKiBjbG9uZWQudG9TdHJpbmcoKSAgIC8vPT4gLW1vei10cmFuc2Zvcm06IHNjYWxlKDApXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOb2RlfSBjbG9uZSBvZiB0aGUgbm9kZVxuICAgICAqL1xuICAgIGNsb25lKG92ZXJyaWRlcyA9IHsgfSkge1xuICAgICAgICBsZXQgY2xvbmVkID0gY2xvbmVOb2RlKHRoaXMpO1xuICAgICAgICBmb3IgKCBsZXQgbmFtZSBpbiBvdmVycmlkZXMgKSB7XG4gICAgICAgICAgICBjbG9uZWRbbmFtZV0gPSBvdmVycmlkZXNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG9ydGN1dCB0byBjbG9uZSB0aGUgbm9kZSBhbmQgaW5zZXJ0IHRoZSByZXN1bHRpbmcgY2xvbmVkIG5vZGVcbiAgICAgKiBiZWZvcmUgdGhlIGN1cnJlbnQgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3ZlcnJpZGVzXSAtIG5ldyBwcm9wZXJ0aWVzIHRvIG92ZXJyaWRlIGluIHRoZSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogZGVjbC5jbG9uZUJlZm9yZSh7IHByb3A6ICctbW96LScgKyBkZWNsLnByb3AgfSk7XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOb2RlfSAtIG5ldyBub2RlXG4gICAgICovXG4gICAgY2xvbmVCZWZvcmUob3ZlcnJpZGVzID0geyB9KSB7XG4gICAgICAgIGxldCBjbG9uZWQgPSB0aGlzLmNsb25lKG92ZXJyaWRlcyk7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBjbG9uZWQpO1xuICAgICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3J0Y3V0IHRvIGNsb25lIHRoZSBub2RlIGFuZCBpbnNlcnQgdGhlIHJlc3VsdGluZyBjbG9uZWQgbm9kZVxuICAgICAqIGFmdGVyIHRoZSBjdXJyZW50IG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW292ZXJyaWRlc10gLSBuZXcgcHJvcGVydGllcyB0byBvdmVycmlkZSBpbiB0aGUgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOb2RlfSAtIG5ldyBub2RlXG4gICAgICovXG4gICAgY2xvbmVBZnRlcihvdmVycmlkZXMgPSB7IH0pIHtcbiAgICAgICAgbGV0IGNsb25lZCA9IHRoaXMuY2xvbmUob3ZlcnJpZGVzKTtcbiAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QWZ0ZXIodGhpcywgY2xvbmVkKTtcbiAgICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIG5vZGUocykgYmVmb3JlIHRoZSBjdXJyZW50IG5vZGUgYW5kIHJlbW92ZXMgdGhlIGN1cnJlbnQgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Li4uTm9kZX0gbm9kZXMgLSBub2RlKHMpIHRvIHJlcGxhY2UgY3VycmVudCBvbmVcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogaWYgKCBhdHJ1bGUubmFtZSA9PSAnbWl4aW4nICkge1xuICAgICAqICAgYXRydWxlLnJlcGxhY2VXaXRoKG1peGluUnVsZXNbYXRydWxlLnBhcmFtc10pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge05vZGV9IGN1cnJlbnQgbm9kZSB0byBtZXRob2RzIGNoYWluXG4gICAgICovXG4gICAgcmVwbGFjZVdpdGgoLi4ubm9kZXMpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBub2RlIG9mIG5vZGVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIG5vZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbW92ZVRvKG5ld1BhcmVudCkge1xuICAgICAgICB3YXJuT25jZSgnTm9kZSNtb3ZlVG8gd2FzIGRlcHJlY2F0ZWQuIFVzZSBDb250YWluZXIjYXBwZW5kLicpO1xuICAgICAgICB0aGlzLmNsZWFuUmF3cyh0aGlzLnJvb3QoKSA9PT0gbmV3UGFyZW50LnJvb3QoKSk7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIG5ld1BhcmVudC5hcHBlbmQodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG1vdmVCZWZvcmUob3RoZXJOb2RlKSB7XG4gICAgICAgIHdhcm5PbmNlKCdOb2RlI21vdmVCZWZvcmUgd2FzIGRlcHJlY2F0ZWQuIFVzZSBOb2RlI2JlZm9yZS4nKTtcbiAgICAgICAgdGhpcy5jbGVhblJhd3ModGhpcy5yb290KCkgPT09IG90aGVyTm9kZS5yb290KCkpO1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICBvdGhlck5vZGUucGFyZW50Lmluc2VydEJlZm9yZShvdGhlck5vZGUsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtb3ZlQWZ0ZXIob3RoZXJOb2RlKSB7XG4gICAgICAgIHdhcm5PbmNlKCdOb2RlI21vdmVBZnRlciB3YXMgZGVwcmVjYXRlZC4gVXNlIE5vZGUjYWZ0ZXIuJyk7XG4gICAgICAgIHRoaXMuY2xlYW5SYXdzKHRoaXMucm9vdCgpID09PSBvdGhlck5vZGUucm9vdCgpKTtcbiAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgb3RoZXJOb2RlLnBhcmVudC5pbnNlcnRBZnRlcihvdGhlck5vZGUsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuZXh0IGNoaWxkIG9mIHRoZSBub2Rl4oCZcyBwYXJlbnQuXG4gICAgICogUmV0dXJucyBgdW5kZWZpbmVkYCBpZiB0aGUgY3VycmVudCBub2RlIGlzIHRoZSBsYXN0IGNoaWxkLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Tm9kZXx1bmRlZmluZWR9IG5leHQgbm9kZVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBpZiAoIGNvbW1lbnQudGV4dCA9PT0gJ2RlbGV0ZSBuZXh0JyApIHtcbiAgICAgKiAgIGNvbnN0IG5leHQgPSBjb21tZW50Lm5leHQoKTtcbiAgICAgKiAgIGlmICggbmV4dCApIHtcbiAgICAgKiAgICAgbmV4dC5yZW1vdmUoKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICovXG4gICAgbmV4dCgpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5wYXJlbnQuaW5kZXgodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5ub2Rlc1tpbmRleCArIDFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHByZXZpb3VzIGNoaWxkIG9mIHRoZSBub2Rl4oCZcyBwYXJlbnQuXG4gICAgICogUmV0dXJucyBgdW5kZWZpbmVkYCBpZiB0aGUgY3VycmVudCBub2RlIGlzIHRoZSBmaXJzdCBjaGlsZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge05vZGV8dW5kZWZpbmVkfSBwcmV2aW91cyBub2RlXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IGFubm90YXRpb24gPSBkZWNsLnByZXYoKTtcbiAgICAgKiBpZiAoIGFubm90YXRpb24udHlwZSA9PSAnY29tbWVudCcgKSB7XG4gICAgICogIHJlYWRBbm5vdGF0aW9uKGFubm90YXRpb24udGV4dCk7XG4gICAgICogfVxuICAgICAqL1xuICAgIHByZXYoKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMucGFyZW50LmluZGV4KHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQubm9kZXNbaW5kZXggLSAxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgbmV3IG5vZGUgYmVmb3JlIGN1cnJlbnQgbm9kZSB0byBjdXJyZW50IG5vZGXigJlzIHBhcmVudC5cbiAgICAgKlxuICAgICAqIEp1c3QgYWxpYXMgZm9yIGBub2RlLnBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgYWRkKWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05vZGV8b2JqZWN0fHN0cmluZ3xOb2RlW119IGFkZCAtIG5ldyBub2RlXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOb2RlfSB0aGlzIG5vZGUgZm9yIG1ldGhvZHMgY2hhaW4uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGRlY2wuYmVmb3JlKCdjb250ZW50OiBcIlwiJyk7XG4gICAgICovXG4gICAgYmVmb3JlKGFkZCkge1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUodGhpcywgYWRkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0IG5ldyBub2RlIGFmdGVyIGN1cnJlbnQgbm9kZSB0byBjdXJyZW50IG5vZGXigJlzIHBhcmVudC5cbiAgICAgKlxuICAgICAqIEp1c3QgYWxpYXMgZm9yIGBub2RlLnBhcmVudC5pbnNlcnRBZnRlcihub2RlLCBhZGQpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZXxvYmplY3R8c3RyaW5nfE5vZGVbXX0gYWRkIC0gbmV3IG5vZGVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge05vZGV9IHRoaXMgbm9kZSBmb3IgbWV0aG9kcyBjaGFpbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogZGVjbC5hZnRlcignY29sb3I6IGJsYWNrJyk7XG4gICAgICovXG4gICAgYWZ0ZXIoYWRkKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEFmdGVyKHRoaXMsIGFkZCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgbGV0IGZpeGVkID0geyB9O1xuXG4gICAgICAgIGZvciAoIGxldCBuYW1lIGluIHRoaXMgKSB7XG4gICAgICAgICAgICBpZiAoICF0aGlzLmhhc093blByb3BlcnR5KG5hbWUpICkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoIG5hbWUgPT09ICdwYXJlbnQnICkgY29udGludWU7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzW25hbWVdO1xuXG4gICAgICAgICAgICBpZiAoIHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgKSB7XG4gICAgICAgICAgICAgICAgZml4ZWRbbmFtZV0gPSB2YWx1ZS5tYXAoIGkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiBpID09PSAnb2JqZWN0JyAmJiBpLnRvSlNPTiApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLnRvSlNPTigpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUudG9KU09OICkge1xuICAgICAgICAgICAgICAgIGZpeGVkW25hbWVdID0gdmFsdWUudG9KU09OKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpeGVkW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZml4ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHtAbGluayBOb2RlI3Jhd3N9IHZhbHVlLiBJZiB0aGUgbm9kZSBpcyBtaXNzaW5nXG4gICAgICogdGhlIGNvZGUgc3R5bGUgcHJvcGVydHkgKGJlY2F1c2UgdGhlIG5vZGUgd2FzIG1hbnVhbGx5IGJ1aWx0IG9yIGNsb25lZCksXG4gICAgICogUG9zdENTUyB3aWxsIHRyeSB0byBhdXRvZGV0ZWN0IHRoZSBjb2RlIHN0eWxlIHByb3BlcnR5IGJ5IGxvb2tpbmdcbiAgICAgKiBhdCBvdGhlciBub2RlcyBpbiB0aGUgdHJlZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wICAgICAgICAgIC0gbmFtZSBvZiBjb2RlIHN0eWxlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtkZWZhdWx0VHlwZV0gLSBuYW1lIG9mIGRlZmF1bHQgdmFsdWUsIGl0IGNhbiBiZSBtaXNzZWRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSBhcyBwcm9wXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKCdhIHsgYmFja2dyb3VuZDogd2hpdGUgfScpO1xuICAgICAqIHJvb3Qubm9kZXNbMF0uYXBwZW5kKHsgcHJvcDogJ2NvbG9yJywgdmFsdWU6ICdibGFjaycgfSk7XG4gICAgICogcm9vdC5ub2Rlc1swXS5ub2Rlc1sxXS5yYXdzLmJlZm9yZSAgIC8vPT4gdW5kZWZpbmVkXG4gICAgICogcm9vdC5ub2Rlc1swXS5ub2Rlc1sxXS5yYXcoJ2JlZm9yZScpIC8vPT4gJyAnXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGNvZGUgc3R5bGUgdmFsdWVcbiAgICAgKi9cbiAgICByYXcocHJvcCwgZGVmYXVsdFR5cGUpIHtcbiAgICAgICAgbGV0IHN0ciA9IG5ldyBTdHJpbmdpZmllcigpO1xuICAgICAgICByZXR1cm4gc3RyLnJhdyh0aGlzLCBwcm9wLCBkZWZhdWx0VHlwZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIFJvb3QgaW5zdGFuY2Ugb2YgdGhlIG5vZGXigJlzIHRyZWUuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHJvb3Qubm9kZXNbMF0ubm9kZXNbMF0ucm9vdCgpID09PSByb290XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtSb290fSByb290IHBhcmVudFxuICAgICAqL1xuICAgIHJvb3QoKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzO1xuICAgICAgICB3aGlsZSAoIHJlc3VsdC5wYXJlbnQgKSByZXN1bHQgPSByZXN1bHQucGFyZW50O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGNsZWFuUmF3cyhrZWVwQmV0d2Vlbikge1xuICAgICAgICBkZWxldGUgdGhpcy5yYXdzLmJlZm9yZTtcbiAgICAgICAgZGVsZXRlIHRoaXMucmF3cy5hZnRlcjtcbiAgICAgICAgaWYgKCAha2VlcEJldHdlZW4gKSBkZWxldGUgdGhpcy5yYXdzLmJldHdlZW47XG4gICAgfVxuXG4gICAgcG9zaXRpb25JbnNpZGUoaW5kZXgpIHtcbiAgICAgICAgbGV0IHN0cmluZyA9IHRoaXMudG9TdHJpbmcoKTtcbiAgICAgICAgbGV0IGNvbHVtbiA9IHRoaXMuc291cmNlLnN0YXJ0LmNvbHVtbjtcbiAgICAgICAgbGV0IGxpbmUgICA9IHRoaXMuc291cmNlLnN0YXJ0LmxpbmU7XG5cbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgaW5kZXg7IGkrKyApIHtcbiAgICAgICAgICAgIGlmICggc3RyaW5nW2ldID09PSAnXFxuJyApIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSAxO1xuICAgICAgICAgICAgICAgIGxpbmUgICs9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbHVtbiArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgbGluZSwgY29sdW1uIH07XG4gICAgfVxuXG4gICAgcG9zaXRpb25CeShvcHRzKSB7XG4gICAgICAgIGxldCBwb3MgPSB0aGlzLnNvdXJjZS5zdGFydDtcbiAgICAgICAgaWYgKCBvcHRzLmluZGV4ICkge1xuICAgICAgICAgICAgcG9zID0gdGhpcy5wb3NpdGlvbkluc2lkZShvcHRzLmluZGV4KTtcbiAgICAgICAgfSBlbHNlIGlmICggb3B0cy53b3JkICkge1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy50b1N0cmluZygpLmluZGV4T2Yob3B0cy53b3JkKTtcbiAgICAgICAgICAgIGlmICggaW5kZXggIT09IC0xICkgcG9zID0gdGhpcy5wb3NpdGlvbkluc2lkZShpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgTm9kZSNcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHR5cGUgLSBTdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBub2Rl4oCZcyB0eXBlLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIFBvc3NpYmxlIHZhbHVlcyBhcmUgYHJvb3RgLCBgYXRydWxlYCwgYHJ1bGVgLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIGBkZWNsYCwgb3IgYGNvbW1lbnRgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBwb3N0Y3NzLmRlY2woeyBwcm9wOiAnY29sb3InLCB2YWx1ZTogJ2JsYWNrJyB9KS50eXBlIC8vPT4gJ2RlY2wnXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgTm9kZSNcbiAgICAgKiBAbWVtYmVyIHtDb250YWluZXJ9IHBhcmVudCAtIHRoZSBub2Rl4oCZcyBwYXJlbnQgbm9kZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogcm9vdC5ub2Rlc1swXS5wYXJlbnQgPT0gcm9vdDtcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBOb2RlI1xuICAgICAqIEBtZW1iZXIge3NvdXJjZX0gc291cmNlIC0gdGhlIGlucHV0IHNvdXJjZSBvZiB0aGUgbm9kZVxuICAgICAqXG4gICAgICogVGhlIHByb3BlcnR5IGlzIHVzZWQgaW4gc291cmNlIG1hcCBnZW5lcmF0aW9uLlxuICAgICAqXG4gICAgICogSWYgeW91IGNyZWF0ZSBhIG5vZGUgbWFudWFsbHkgKGUuZy4sIHdpdGggYHBvc3Rjc3MuZGVjbCgpYCksXG4gICAgICogdGhhdCBub2RlIHdpbGwgbm90IGhhdmUgYSBgc291cmNlYCBwcm9wZXJ0eSBhbmQgd2lsbCBiZSBhYnNlbnRcbiAgICAgKiBmcm9tIHRoZSBzb3VyY2UgbWFwLiBGb3IgdGhpcyByZWFzb24sIHRoZSBwbHVnaW4gZGV2ZWxvcGVyIHNob3VsZFxuICAgICAqIGNvbnNpZGVyIGNsb25pbmcgbm9kZXMgdG8gY3JlYXRlIG5ldyBvbmVzIChpbiB3aGljaCBjYXNlIHRoZSBuZXcgbm9kZeKAmXNcbiAgICAgKiBzb3VyY2Ugd2lsbCByZWZlcmVuY2UgdGhlIG9yaWdpbmFsLCBjbG9uZWQgbm9kZSkgb3Igc2V0dGluZ1xuICAgICAqIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBtYW51YWxseS5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gQmFkXG4gICAgICogY29uc3QgcHJlZml4ZWQgPSBwb3N0Y3NzLmRlY2woe1xuICAgICAqICAgcHJvcDogJy1tb3otJyArIGRlY2wucHJvcCxcbiAgICAgKiAgIHZhbHVlOiBkZWNsLnZhbHVlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiAvLyBHb29kXG4gICAgICogY29uc3QgcHJlZml4ZWQgPSBkZWNsLmNsb25lKHsgcHJvcDogJy1tb3otJyArIGRlY2wucHJvcCB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogaWYgKCBhdHJ1bGUubmFtZSA9PSAnYWRkLWxpbmsnICkge1xuICAgICAqICAgY29uc3QgcnVsZSA9IHBvc3Rjc3MucnVsZSh7IHNlbGVjdG9yOiAnYScsIHNvdXJjZTogYXRydWxlLnNvdXJjZSB9KTtcbiAgICAgKiAgIGF0cnVsZS5wYXJlbnQuaW5zZXJ0QmVmb3JlKGF0cnVsZSwgcnVsZSk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBkZWNsLnNvdXJjZS5pbnB1dC5mcm9tIC8vPT4gJy9ob21lL2FpL2Euc2FzcydcbiAgICAgKiBkZWNsLnNvdXJjZS5zdGFydCAgICAgIC8vPT4geyBsaW5lOiAxMCwgY29sdW1uOiAyIH1cbiAgICAgKiBkZWNsLnNvdXJjZS5lbmQgICAgICAgIC8vPT4geyBsaW5lOiAxMCwgY29sdW1uOiAxMiB9XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgTm9kZSNcbiAgICAgKiBAbWVtYmVyIHtvYmplY3R9IHJhd3MgLSBJbmZvcm1hdGlvbiB0byBnZW5lcmF0ZSBieXRlLXRvLWJ5dGUgZXF1YWxcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBub2RlIHN0cmluZyBhcyBpdCB3YXMgaW4gdGhlIG9yaWdpbiBpbnB1dC5cbiAgICAgKlxuICAgICAqIEV2ZXJ5IHBhcnNlciBzYXZlcyBpdHMgb3duIHByb3BlcnRpZXMsXG4gICAgICogYnV0IHRoZSBkZWZhdWx0IENTUyBwYXJzZXIgdXNlczpcbiAgICAgKlxuICAgICAqICogYGJlZm9yZWA6IHRoZSBzcGFjZSBzeW1ib2xzIGJlZm9yZSB0aGUgbm9kZS4gSXQgYWxzbyBzdG9yZXMgYCpgXG4gICAgICogICBhbmQgYF9gIHN5bWJvbHMgYmVmb3JlIHRoZSBkZWNsYXJhdGlvbiAoSUUgaGFjaykuXG4gICAgICogKiBgYWZ0ZXJgOiB0aGUgc3BhY2Ugc3ltYm9scyBhZnRlciB0aGUgbGFzdCBjaGlsZCBvZiB0aGUgbm9kZVxuICAgICAqICAgdG8gdGhlIGVuZCBvZiB0aGUgbm9kZS5cbiAgICAgKiAqIGBiZXR3ZWVuYDogdGhlIHN5bWJvbHMgYmV0d2VlbiB0aGUgcHJvcGVydHkgYW5kIHZhbHVlXG4gICAgICogICBmb3IgZGVjbGFyYXRpb25zLCBzZWxlY3RvciBhbmQgYHtgIGZvciBydWxlcywgb3IgbGFzdCBwYXJhbWV0ZXJcbiAgICAgKiAgIGFuZCBge2AgZm9yIGF0LXJ1bGVzLlxuICAgICAqICogYHNlbWljb2xvbmA6IGNvbnRhaW5zIHRydWUgaWYgdGhlIGxhc3QgY2hpbGQgaGFzXG4gICAgICogICBhbiAob3B0aW9uYWwpIHNlbWljb2xvbi5cbiAgICAgKiAqIGBhZnRlck5hbWVgOiB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgYXQtcnVsZSBuYW1lIGFuZCBpdHMgcGFyYW1ldGVycy5cbiAgICAgKiAqIGBsZWZ0YDogdGhlIHNwYWNlIHN5bWJvbHMgYmV0d2VlbiBgLypgIGFuZCB0aGUgY29tbWVudOKAmXMgdGV4dC5cbiAgICAgKiAqIGByaWdodGA6IHRoZSBzcGFjZSBzeW1ib2xzIGJldHdlZW4gdGhlIGNvbW1lbnTigJlzIHRleHRcbiAgICAgKiAgIGFuZCA8Y29kZT4qJiM0Nzs8L2NvZGU+LlxuICAgICAqICogYGltcG9ydGFudGA6IHRoZSBjb250ZW50IG9mIHRoZSBpbXBvcnRhbnQgc3RhdGVtZW50LFxuICAgICAqICAgaWYgaXQgaXMgbm90IGp1c3QgYCFpbXBvcnRhbnRgLlxuICAgICAqXG4gICAgICogUG9zdENTUyBjbGVhbnMgc2VsZWN0b3JzLCBkZWNsYXJhdGlvbiB2YWx1ZXMgYW5kIGF0LXJ1bGUgcGFyYW1ldGVyc1xuICAgICAqIGZyb20gY29tbWVudHMgYW5kIGV4dHJhIHNwYWNlcywgYnV0IGl0IHN0b3JlcyBvcmlnaW4gY29udGVudCBpbiByYXdzXG4gICAgICogcHJvcGVydGllcy4gQXMgc3VjaCwgaWYgeW91IGRvbuKAmXQgY2hhbmdlIGEgZGVjbGFyYXRpb27igJlzIHZhbHVlLFxuICAgICAqIFBvc3RDU1Mgd2lsbCB1c2UgdGhlIHJhdyB2YWx1ZSB3aXRoIGNvbW1lbnRzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBjb25zdCByb290ID0gcG9zdGNzcy5wYXJzZSgnYSB7XFxuICBjb2xvcjpibGFja1xcbn0nKVxuICAgICAqIHJvb3QuZmlyc3QuZmlyc3QucmF3cyAvLz0+IHsgYmVmb3JlOiAnXFxuICAnLCBiZXR3ZWVuOiAnOicgfVxuICAgICAqL1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGU7XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gcG9zaXRpb25cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsaW5lICAgLSBzb3VyY2UgbGluZSBpbiBmaWxlXG4gKiBAcHJvcGVydHkge251bWJlcn0gY29sdW1uIC0gc291cmNlIGNvbHVtbiBpbiBmaWxlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBzb3VyY2VcbiAqIEBwcm9wZXJ0eSB7SW5wdXR9IGlucHV0ICAgIC0ge0BsaW5rIElucHV0fSB3aXRoIGlucHV0IGZpbGVcbiAqIEBwcm9wZXJ0eSB7cG9zaXRpb259IHN0YXJ0IC0gVGhlIHN0YXJ0aW5nIHBvc2l0aW9uIG9mIHRoZSBub2Rl4oCZcyBzb3VyY2VcbiAqIEBwcm9wZXJ0eSB7cG9zaXRpb259IGVuZCAgIC0gVGhlIGVuZGluZyBwb3NpdGlvbiBvZiB0aGUgbm9kZeKAmXMgc291cmNlXG4gKi9cbiJdfQ==


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = stringify;

var _stringifier = __webpack_require__(43);

var _stringifier2 = _interopRequireDefault(_stringifier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringify(node, builder) {
    var str = new _stringifier2.default(builder);
    str.stringify(node);
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmluZ2lmeS5lczYiXSwibmFtZXMiOlsic3RyaW5naWZ5Iiwibm9kZSIsImJ1aWxkZXIiLCJzdHIiXSwibWFwcGluZ3MiOiI7OztrQkFFd0JBLFM7O0FBRnhCOzs7Ozs7QUFFZSxTQUFTQSxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsT0FBekIsRUFBa0M7QUFDN0MsUUFBSUMsTUFBTSwwQkFBZ0JELE9BQWhCLENBQVY7QUFDQUMsUUFBSUgsU0FBSixDQUFjQyxJQUFkO0FBQ0giLCJmaWxlIjoic3RyaW5naWZ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0cmluZ2lmaWVyIGZyb20gJy4vc3RyaW5naWZpZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgYnVpbGRlcikge1xuICAgIGxldCBzdHIgPSBuZXcgU3RyaW5naWZpZXIoYnVpbGRlcik7XG4gICAgc3RyLnN0cmluZ2lmeShub2RlKTtcbn1cbiJdfQ==


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = parse;

var _parser = __webpack_require__(103);

var _parser2 = _interopRequireDefault(_parser);

var _input = __webpack_require__(37);

var _input2 = _interopRequireDefault(_input);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(css, opts) {
    if (opts && opts.safe) {
        throw new Error('Option safe was removed. ' + 'Use parser: require("postcss-safe-parser")');
    }

    var input = new _input2.default(css, opts);
    var parser = new _parser2.default(input);
    try {
        parser.parse();
    } catch (e) {
        if (e.name === 'CssSyntaxError' && opts && opts.from) {
            if (/\.scss$/i.test(opts.from)) {
                e.message += '\nYou tried to parse SCSS with ' + 'the standard CSS parser; ' + 'try again with the postcss-scss parser';
            } else if (/\.sass/i.test(opts.from)) {
                e.message += '\nYou tried to parse Sass with ' + 'the standard CSS parser; ' + 'try again with the postcss-sass parser';
            } else if (/\.less$/i.test(opts.from)) {
                e.message += '\nYou tried to parse Less with ' + 'the standard CSS parser; ' + 'try again with the postcss-less parser';
            }
        }
        throw e;
    }

    return parser.root;
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlLmVzNiJdLCJuYW1lcyI6WyJwYXJzZSIsImNzcyIsIm9wdHMiLCJzYWZlIiwiRXJyb3IiLCJpbnB1dCIsInBhcnNlciIsImUiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJtZXNzYWdlIiwicm9vdCJdLCJtYXBwaW5ncyI6Ijs7O2tCQUd3QkEsSzs7QUFIeEI7Ozs7QUFDQTs7Ozs7O0FBRWUsU0FBU0EsS0FBVCxDQUFlQyxHQUFmLEVBQW9CQyxJQUFwQixFQUEwQjtBQUNyQyxRQUFLQSxRQUFRQSxLQUFLQyxJQUFsQixFQUF5QjtBQUNyQixjQUFNLElBQUlDLEtBQUosQ0FBVSw4QkFDQSw0Q0FEVixDQUFOO0FBRUg7O0FBRUQsUUFBSUMsUUFBUSxvQkFBVUosR0FBVixFQUFlQyxJQUFmLENBQVo7QUFDQSxRQUFJSSxTQUFTLHFCQUFXRCxLQUFYLENBQWI7QUFDQSxRQUFJO0FBQ0FDLGVBQU9OLEtBQVA7QUFDSCxLQUZELENBRUUsT0FBT08sQ0FBUCxFQUFVO0FBQ1IsWUFBS0EsRUFBRUMsSUFBRixLQUFXLGdCQUFYLElBQStCTixJQUEvQixJQUF1Q0EsS0FBS08sSUFBakQsRUFBd0Q7QUFDcEQsZ0JBQUssV0FBV0MsSUFBWCxDQUFnQlIsS0FBS08sSUFBckIsQ0FBTCxFQUFrQztBQUM5QkYsa0JBQUVJLE9BQUYsSUFBYSxvQ0FDQSwyQkFEQSxHQUVBLHdDQUZiO0FBR0gsYUFKRCxNQUlPLElBQUssVUFBVUQsSUFBVixDQUFlUixLQUFLTyxJQUFwQixDQUFMLEVBQWlDO0FBQ3BDRixrQkFBRUksT0FBRixJQUFhLG9DQUNBLDJCQURBLEdBRUEsd0NBRmI7QUFHSCxhQUpNLE1BSUEsSUFBSyxXQUFXRCxJQUFYLENBQWdCUixLQUFLTyxJQUFyQixDQUFMLEVBQWtDO0FBQ3JDRixrQkFBRUksT0FBRixJQUFhLG9DQUNBLDJCQURBLEdBRUEsd0NBRmI7QUFHSDtBQUNKO0FBQ0QsY0FBTUosQ0FBTjtBQUNIOztBQUVELFdBQU9ELE9BQU9NLElBQWQ7QUFDSCIsImZpbGUiOiJwYXJzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQYXJzZXIgZnJvbSAnLi9wYXJzZXInO1xuaW1wb3J0IElucHV0ICBmcm9tICcuL2lucHV0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2UoY3NzLCBvcHRzKSB7XG4gICAgaWYgKCBvcHRzICYmIG9wdHMuc2FmZSApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPcHRpb24gc2FmZSB3YXMgcmVtb3ZlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnVXNlIHBhcnNlcjogcmVxdWlyZShcInBvc3Rjc3Mtc2FmZS1wYXJzZXJcIiknKTtcbiAgICB9XG5cbiAgICBsZXQgaW5wdXQgPSBuZXcgSW5wdXQoY3NzLCBvcHRzKTtcbiAgICBsZXQgcGFyc2VyID0gbmV3IFBhcnNlcihpbnB1dCk7XG4gICAgdHJ5IHtcbiAgICAgICAgcGFyc2VyLnBhcnNlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoIGUubmFtZSA9PT0gJ0Nzc1N5bnRheEVycm9yJyAmJiBvcHRzICYmIG9wdHMuZnJvbSApIHtcbiAgICAgICAgICAgIGlmICggL1xcLnNjc3MkL2kudGVzdChvcHRzLmZyb20pICkge1xuICAgICAgICAgICAgICAgIGUubWVzc2FnZSArPSAnXFxuWW91IHRyaWVkIHRvIHBhcnNlIFNDU1Mgd2l0aCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RoZSBzdGFuZGFyZCBDU1MgcGFyc2VyOyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyeSBhZ2FpbiB3aXRoIHRoZSBwb3N0Y3NzLXNjc3MgcGFyc2VyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIC9cXC5zYXNzL2kudGVzdChvcHRzLmZyb20pICkge1xuICAgICAgICAgICAgICAgIGUubWVzc2FnZSArPSAnXFxuWW91IHRyaWVkIHRvIHBhcnNlIFNhc3Mgd2l0aCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RoZSBzdGFuZGFyZCBDU1MgcGFyc2VyOyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyeSBhZ2FpbiB3aXRoIHRoZSBwb3N0Y3NzLXNhc3MgcGFyc2VyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIC9cXC5sZXNzJC9pLnRlc3Qob3B0cy5mcm9tKSApIHtcbiAgICAgICAgICAgICAgICBlLm1lc3NhZ2UgKz0gJ1xcbllvdSB0cmllZCB0byBwYXJzZSBMZXNzIHdpdGggJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aGUgc3RhbmRhcmQgQ1NTIHBhcnNlcjsgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0cnkgYWdhaW4gd2l0aCB0aGUgcG9zdGNzcy1sZXNzIHBhcnNlcic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VyLnJvb3Q7XG59XG4iXX0=


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _node = __webpack_require__(19);

var _node2 = _interopRequireDefault(_node);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Represents a comment between declarations or statements (rule and at-rules).
 *
 * Comments inside selectors, at-rule parameters, or declaration values
 * will be stored in the `raws` properties explained above.
 *
 * @extends Node
 */
var Comment = function (_Node) {
  _inherits(Comment, _Node);

  function Comment(defaults) {
    _classCallCheck(this, Comment);

    var _this = _possibleConstructorReturn(this, _Node.call(this, defaults));

    _this.type = 'comment';
    return _this;
  }

  /**
   * @memberof Comment#
   * @member {string} text - the comment’s text
   */

  /**
   * @memberof Comment#
   * @member {object} raws - Information to generate byte-to-byte equal
   *                         node string as it was in the origin input.
   *
   * Every parser saves its own properties,
   * but the default CSS parser uses:
   *
   * * `before`: the space symbols before the node.
   * * `left`: the space symbols between `/*` and the comment’s text.
   * * `right`: the space symbols between the comment’s text.
   */


  return Comment;
}(_node2.default);

exports.default = Comment;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1lbnQuZXM2Il0sIm5hbWVzIjpbIkNvbW1lbnQiLCJkZWZhdWx0cyIsInR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7Ozs7O0lBUU1BLE87OztBQUVGLG1CQUFZQyxRQUFaLEVBQXNCO0FBQUE7O0FBQUEsaURBQ2xCLGlCQUFNQSxRQUFOLENBRGtCOztBQUVsQixVQUFLQyxJQUFMLEdBQVksU0FBWjtBQUZrQjtBQUdyQjs7QUFFRDs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBY1dGLE8iLCJmaWxlIjoiY29tbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGNvbW1lbnQgYmV0d2VlbiBkZWNsYXJhdGlvbnMgb3Igc3RhdGVtZW50cyAocnVsZSBhbmQgYXQtcnVsZXMpLlxuICpcbiAqIENvbW1lbnRzIGluc2lkZSBzZWxlY3RvcnMsIGF0LXJ1bGUgcGFyYW1ldGVycywgb3IgZGVjbGFyYXRpb24gdmFsdWVzXG4gKiB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYHJhd3NgIHByb3BlcnRpZXMgZXhwbGFpbmVkIGFib3ZlLlxuICpcbiAqIEBleHRlbmRzIE5vZGVcbiAqL1xuY2xhc3MgQ29tbWVudCBleHRlbmRzIE5vZGUge1xuXG4gICAgY29uc3RydWN0b3IoZGVmYXVsdHMpIHtcbiAgICAgICAgc3VwZXIoZGVmYXVsdHMpO1xuICAgICAgICB0aGlzLnR5cGUgPSAnY29tbWVudCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIENvbW1lbnQjXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSB0ZXh0IC0gdGhlIGNvbW1lbnTigJlzIHRleHRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50I1xuICAgICAqIEBtZW1iZXIge29iamVjdH0gcmF3cyAtIEluZm9ybWF0aW9uIHRvIGdlbmVyYXRlIGJ5dGUtdG8tYnl0ZSBlcXVhbFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgc3RyaW5nIGFzIGl0IHdhcyBpbiB0aGUgb3JpZ2luIGlucHV0LlxuICAgICAqXG4gICAgICogRXZlcnkgcGFyc2VyIHNhdmVzIGl0cyBvd24gcHJvcGVydGllcyxcbiAgICAgKiBidXQgdGhlIGRlZmF1bHQgQ1NTIHBhcnNlciB1c2VzOlxuICAgICAqXG4gICAgICogKiBgYmVmb3JlYDogdGhlIHNwYWNlIHN5bWJvbHMgYmVmb3JlIHRoZSBub2RlLlxuICAgICAqICogYGxlZnRgOiB0aGUgc3BhY2Ugc3ltYm9scyBiZXR3ZWVuIGAvKmAgYW5kIHRoZSBjb21tZW504oCZcyB0ZXh0LlxuICAgICAqICogYHJpZ2h0YDogdGhlIHNwYWNlIHN5bWJvbHMgYmV0d2VlbiB0aGUgY29tbWVudOKAmXMgdGV4dC5cbiAgICAgKi9cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29tbWVudDtcbiJdfQ==


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _declaration = __webpack_require__(18);

var _declaration2 = _interopRequireDefault(_declaration);

var _comment = __webpack_require__(23);

var _comment2 = _interopRequireDefault(_comment);

var _node = __webpack_require__(19);

var _node2 = _interopRequireDefault(_node);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function cleanSource(nodes) {
    return nodes.map(function (i) {
        if (i.nodes) i.nodes = cleanSource(i.nodes);
        delete i.source;
        return i;
    });
}

/**
 * The {@link Root}, {@link AtRule}, and {@link Rule} container nodes
 * inherit some common methods to help work with their children.
 *
 * Note that all containers can store any content. If you write a rule inside
 * a rule, PostCSS will parse it.
 *
 * @extends Node
 * @abstract
 */

var Container = function (_Node) {
    _inherits(Container, _Node);

    function Container() {
        _classCallCheck(this, Container);

        return _possibleConstructorReturn(this, _Node.apply(this, arguments));
    }

    Container.prototype.push = function push(child) {
        child.parent = this;
        this.nodes.push(child);
        return this;
    };

    /**
     * Iterates through the container’s immediate children,
     * calling `callback` for each child.
     *
     * Returning `false` in the callback will break iteration.
     *
     * This method only iterates through the container’s immediate children.
     * If you need to recursively iterate through all the container’s descendant
     * nodes, use {@link Container#walk}.
     *
     * Unlike the for `{}`-cycle or `Array#forEach` this iterator is safe
     * if you are mutating the array of child nodes during iteration.
     * PostCSS will adjust the current index to match the mutations.
     *
     * @param {childIterator} callback - iterator receives each node and index
     *
     * @return {false|undefined} returns `false` if iteration was broke
     *
     * @example
     * const root = postcss.parse('a { color: black; z-index: 1 }');
     * const rule = root.first;
     *
     * for ( let decl of rule.nodes ) {
     *     decl.cloneBefore({ prop: '-webkit-' + decl.prop });
     *     // Cycle will be infinite, because cloneBefore moves the current node
     *     // to the next index
     * }
     *
     * rule.each(decl => {
     *     decl.cloneBefore({ prop: '-webkit-' + decl.prop });
     *     // Will be executed only for color and z-index
     * });
     */


    Container.prototype.each = function each(callback) {
        if (!this.lastEach) this.lastEach = 0;
        if (!this.indexes) this.indexes = {};

        this.lastEach += 1;
        var id = this.lastEach;
        this.indexes[id] = 0;

        if (!this.nodes) return undefined;

        var index = void 0,
            result = void 0;
        while (this.indexes[id] < this.nodes.length) {
            index = this.indexes[id];
            result = callback(this.nodes[index], index);
            if (result === false) break;

            this.indexes[id] += 1;
        }

        delete this.indexes[id];

        return result;
    };

    /**
     * Traverses the container’s descendant nodes, calling callback
     * for each node.
     *
     * Like container.each(), this method is safe to use
     * if you are mutating arrays during iteration.
     *
     * If you only need to iterate through the container’s immediate children,
     * use {@link Container#each}.
     *
     * @param {childIterator} callback - iterator receives each node and index
     *
     * @return {false|undefined} returns `false` if iteration was broke
     *
     * @example
     * root.walk(node => {
     *   // Traverses all descendant nodes.
     * });
     */


    Container.prototype.walk = function walk(callback) {
        return this.each(function (child, i) {
            var result = callback(child, i);
            if (result !== false && child.walk) {
                result = child.walk(callback);
            }
            return result;
        });
    };

    /**
     * Traverses the container’s descendant nodes, calling callback
     * for each declaration node.
     *
     * If you pass a filter, iteration will only happen over declarations
     * with matching properties.
     *
     * Like {@link Container#each}, this method is safe
     * to use if you are mutating arrays during iteration.
     *
     * @param {string|RegExp} [prop]   - string or regular expression
     *                                   to filter declarations by property name
     * @param {childIterator} callback - iterator receives each node and index
     *
     * @return {false|undefined} returns `false` if iteration was broke
     *
     * @example
     * root.walkDecls(decl => {
     *   checkPropertySupport(decl.prop);
     * });
     *
     * root.walkDecls('border-radius', decl => {
     *   decl.remove();
     * });
     *
     * root.walkDecls(/^background/, decl => {
     *   decl.value = takeFirstColorFromGradient(decl.value);
     * });
     */


    Container.prototype.walkDecls = function walkDecls(prop, callback) {
        if (!callback) {
            callback = prop;
            return this.walk(function (child, i) {
                if (child.type === 'decl') {
                    return callback(child, i);
                }
            });
        } else if (prop instanceof RegExp) {
            return this.walk(function (child, i) {
                if (child.type === 'decl' && prop.test(child.prop)) {
                    return callback(child, i);
                }
            });
        } else {
            return this.walk(function (child, i) {
                if (child.type === 'decl' && child.prop === prop) {
                    return callback(child, i);
                }
            });
        }
    };

    /**
     * Traverses the container’s descendant nodes, calling callback
     * for each rule node.
     *
     * If you pass a filter, iteration will only happen over rules
     * with matching selectors.
     *
     * Like {@link Container#each}, this method is safe
     * to use if you are mutating arrays during iteration.
     *
     * @param {string|RegExp} [selector] - string or regular expression
     *                                     to filter rules by selector
     * @param {childIterator} callback   - iterator receives each node and index
     *
     * @return {false|undefined} returns `false` if iteration was broke
     *
     * @example
     * const selectors = [];
     * root.walkRules(rule => {
     *   selectors.push(rule.selector);
     * });
     * console.log(`Your CSS uses ${selectors.length} selectors`);
     */


    Container.prototype.walkRules = function walkRules(selector, callback) {
        if (!callback) {
            callback = selector;

            return this.walk(function (child, i) {
                if (child.type === 'rule') {
                    return callback(child, i);
                }
            });
        } else if (selector instanceof RegExp) {
            return this.walk(function (child, i) {
                if (child.type === 'rule' && selector.test(child.selector)) {
                    return callback(child, i);
                }
            });
        } else {
            return this.walk(function (child, i) {
                if (child.type === 'rule' && child.selector === selector) {
                    return callback(child, i);
                }
            });
        }
    };

    /**
     * Traverses the container’s descendant nodes, calling callback
     * for each at-rule node.
     *
     * If you pass a filter, iteration will only happen over at-rules
     * that have matching names.
     *
     * Like {@link Container#each}, this method is safe
     * to use if you are mutating arrays during iteration.
     *
     * @param {string|RegExp} [name]   - string or regular expression
     *                                   to filter at-rules by name
     * @param {childIterator} callback - iterator receives each node and index
     *
     * @return {false|undefined} returns `false` if iteration was broke
     *
     * @example
     * root.walkAtRules(rule => {
     *   if ( isOld(rule.name) ) rule.remove();
     * });
     *
     * let first = false;
     * root.walkAtRules('charset', rule => {
     *   if ( !first ) {
     *     first = true;
     *   } else {
     *     rule.remove();
     *   }
     * });
     */


    Container.prototype.walkAtRules = function walkAtRules(name, callback) {
        if (!callback) {
            callback = name;
            return this.walk(function (child, i) {
                if (child.type === 'atrule') {
                    return callback(child, i);
                }
            });
        } else if (name instanceof RegExp) {
            return this.walk(function (child, i) {
                if (child.type === 'atrule' && name.test(child.name)) {
                    return callback(child, i);
                }
            });
        } else {
            return this.walk(function (child, i) {
                if (child.type === 'atrule' && child.name === name) {
                    return callback(child, i);
                }
            });
        }
    };

    /**
     * Traverses the container’s descendant nodes, calling callback
     * for each comment node.
     *
     * Like {@link Container#each}, this method is safe
     * to use if you are mutating arrays during iteration.
     *
     * @param {childIterator} callback - iterator receives each node and index
     *
     * @return {false|undefined} returns `false` if iteration was broke
     *
     * @example
     * root.walkComments(comment => {
     *   comment.remove();
     * });
     */


    Container.prototype.walkComments = function walkComments(callback) {
        return this.walk(function (child, i) {
            if (child.type === 'comment') {
                return callback(child, i);
            }
        });
    };

    /**
     * Inserts new nodes to the end of the container.
     *
     * @param {...(Node|object|string|Node[])} children - new nodes
     *
     * @return {Node} this node for methods chain
     *
     * @example
     * const decl1 = postcss.decl({ prop: 'color', value: 'black' });
     * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' });
     * rule.append(decl1, decl2);
     *
     * root.append({ name: 'charset', params: '"UTF-8"' });  // at-rule
     * root.append({ selector: 'a' });                       // rule
     * rule.append({ prop: 'color', value: 'black' });       // declaration
     * rule.append({ text: 'Comment' })                      // comment
     *
     * root.append('a {}');
     * root.first.append('color: black; z-index: 1');
     */


    Container.prototype.append = function append() {
        for (var _len = arguments.length, children = Array(_len), _key = 0; _key < _len; _key++) {
            children[_key] = arguments[_key];
        }

        for (var _iterator = children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var child = _ref;

            var nodes = this.normalize(child, this.last);
            for (var _iterator2 = nodes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                var node = _ref2;
                this.nodes.push(node);
            }
        }
        return this;
    };

    /**
     * Inserts new nodes to the start of the container.
     *
     * @param {...(Node|object|string|Node[])} children - new nodes
     *
     * @return {Node} this node for methods chain
     *
     * @example
     * const decl1 = postcss.decl({ prop: 'color', value: 'black' });
     * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' });
     * rule.prepend(decl1, decl2);
     *
     * root.append({ name: 'charset', params: '"UTF-8"' });  // at-rule
     * root.append({ selector: 'a' });                       // rule
     * rule.append({ prop: 'color', value: 'black' });       // declaration
     * rule.append({ text: 'Comment' })                      // comment
     *
     * root.append('a {}');
     * root.first.append('color: black; z-index: 1');
     */


    Container.prototype.prepend = function prepend() {
        for (var _len2 = arguments.length, children = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            children[_key2] = arguments[_key2];
        }

        children = children.reverse();
        for (var _iterator3 = children, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
            } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
            }

            var child = _ref3;

            var nodes = this.normalize(child, this.first, 'prepend').reverse();
            for (var _iterator4 = nodes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                var _ref4;

                if (_isArray4) {
                    if (_i4 >= _iterator4.length) break;
                    _ref4 = _iterator4[_i4++];
                } else {
                    _i4 = _iterator4.next();
                    if (_i4.done) break;
                    _ref4 = _i4.value;
                }

                var node = _ref4;
                this.nodes.unshift(node);
            }for (var id in this.indexes) {
                this.indexes[id] = this.indexes[id] + nodes.length;
            }
        }
        return this;
    };

    Container.prototype.cleanRaws = function cleanRaws(keepBetween) {
        _Node.prototype.cleanRaws.call(this, keepBetween);
        if (this.nodes) {
            for (var _iterator5 = this.nodes, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                var _ref5;

                if (_isArray5) {
                    if (_i5 >= _iterator5.length) break;
                    _ref5 = _iterator5[_i5++];
                } else {
                    _i5 = _iterator5.next();
                    if (_i5.done) break;
                    _ref5 = _i5.value;
                }

                var node = _ref5;
                node.cleanRaws(keepBetween);
            }
        }
    };

    /**
     * Insert new node before old node within the container.
     *
     * @param {Node|number} exist             - child or child’s index.
     * @param {Node|object|string|Node[]} add - new node
     *
     * @return {Node} this node for methods chain
     *
     * @example
     * rule.insertBefore(decl, decl.clone({ prop: '-webkit-' + decl.prop }));
     */


    Container.prototype.insertBefore = function insertBefore(exist, add) {
        exist = this.index(exist);

        var type = exist === 0 ? 'prepend' : false;
        var nodes = this.normalize(add, this.nodes[exist], type).reverse();
        for (var _iterator6 = nodes, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
            var _ref6;

            if (_isArray6) {
                if (_i6 >= _iterator6.length) break;
                _ref6 = _iterator6[_i6++];
            } else {
                _i6 = _iterator6.next();
                if (_i6.done) break;
                _ref6 = _i6.value;
            }

            var node = _ref6;
            this.nodes.splice(exist, 0, node);
        }var index = void 0;
        for (var id in this.indexes) {
            index = this.indexes[id];
            if (exist <= index) {
                this.indexes[id] = index + nodes.length;
            }
        }

        return this;
    };

    /**
     * Insert new node after old node within the container.
     *
     * @param {Node|number} exist             - child or child’s index
     * @param {Node|object|string|Node[]} add - new node
     *
     * @return {Node} this node for methods chain
     */


    Container.prototype.insertAfter = function insertAfter(exist, add) {
        exist = this.index(exist);

        var nodes = this.normalize(add, this.nodes[exist]).reverse();
        for (var _iterator7 = nodes, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
            var _ref7;

            if (_isArray7) {
                if (_i7 >= _iterator7.length) break;
                _ref7 = _iterator7[_i7++];
            } else {
                _i7 = _iterator7.next();
                if (_i7.done) break;
                _ref7 = _i7.value;
            }

            var node = _ref7;
            this.nodes.splice(exist + 1, 0, node);
        }var index = void 0;
        for (var id in this.indexes) {
            index = this.indexes[id];
            if (exist < index) {
                this.indexes[id] = index + nodes.length;
            }
        }

        return this;
    };

    /**
     * Removes node from the container and cleans the parent properties
     * from the node and its children.
     *
     * @param {Node|number} child - child or child’s index
     *
     * @return {Node} this node for methods chain
     *
     * @example
     * rule.nodes.length  //=> 5
     * rule.removeChild(decl);
     * rule.nodes.length  //=> 4
     * decl.parent        //=> undefined
     */


    Container.prototype.removeChild = function removeChild(child) {
        child = this.index(child);
        this.nodes[child].parent = undefined;
        this.nodes.splice(child, 1);

        var index = void 0;
        for (var id in this.indexes) {
            index = this.indexes[id];
            if (index >= child) {
                this.indexes[id] = index - 1;
            }
        }

        return this;
    };

    /**
     * Removes all children from the container
     * and cleans their parent properties.
     *
     * @return {Node} this node for methods chain
     *
     * @example
     * rule.removeAll();
     * rule.nodes.length //=> 0
     */


    Container.prototype.removeAll = function removeAll() {
        for (var _iterator8 = this.nodes, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
            var _ref8;

            if (_isArray8) {
                if (_i8 >= _iterator8.length) break;
                _ref8 = _iterator8[_i8++];
            } else {
                _i8 = _iterator8.next();
                if (_i8.done) break;
                _ref8 = _i8.value;
            }

            var node = _ref8;
            node.parent = undefined;
        }this.nodes = [];
        return this;
    };

    /**
     * Passes all declaration values within the container that match pattern
     * through callback, replacing those values with the returned result
     * of callback.
     *
     * This method is useful if you are using a custom unit or function
     * and need to iterate through all values.
     *
     * @param {string|RegExp} pattern      - replace pattern
     * @param {object} opts                - options to speed up the search
     * @param {string|string[]} opts.props - an array of property names
     * @param {string} opts.fast           - string that’s used
     *                                       to narrow down values and speed up
                                             the regexp search
     * @param {function|string} callback   - string to replace pattern
     *                                       or callback that returns a new
     *                                       value.
     *                                       The callback will receive
     *                                       the same arguments as those
     *                                       passed to a function parameter
     *                                       of `String#replace`.
     *
     * @return {Node} this node for methods chain
     *
     * @example
     * root.replaceValues(/\d+rem/, { fast: 'rem' }, string => {
     *   return 15 * parseInt(string) + 'px';
     * });
     */


    Container.prototype.replaceValues = function replaceValues(pattern, opts, callback) {
        if (!callback) {
            callback = opts;
            opts = {};
        }

        this.walkDecls(function (decl) {
            if (opts.props && opts.props.indexOf(decl.prop) === -1) return;
            if (opts.fast && decl.value.indexOf(opts.fast) === -1) return;

            decl.value = decl.value.replace(pattern, callback);
        });

        return this;
    };

    /**
     * Returns `true` if callback returns `true`
     * for all of the container’s children.
     *
     * @param {childCondition} condition - iterator returns true or false.
     *
     * @return {boolean} is every child pass condition
     *
     * @example
     * const noPrefixes = rule.every(i => i.prop[0] !== '-');
     */


    Container.prototype.every = function every(condition) {
        return this.nodes.every(condition);
    };

    /**
     * Returns `true` if callback returns `true` for (at least) one
     * of the container’s children.
     *
     * @param {childCondition} condition - iterator returns true or false.
     *
     * @return {boolean} is some child pass condition
     *
     * @example
     * const hasPrefix = rule.some(i => i.prop[0] === '-');
     */


    Container.prototype.some = function some(condition) {
        return this.nodes.some(condition);
    };

    /**
     * Returns a `child`’s index within the {@link Container#nodes} array.
     *
     * @param {Node} child - child of the current container.
     *
     * @return {number} child index
     *
     * @example
     * rule.index( rule.nodes[2] ) //=> 2
     */


    Container.prototype.index = function index(child) {
        if (typeof child === 'number') {
            return child;
        } else {
            return this.nodes.indexOf(child);
        }
    };

    /**
     * The container’s first child.
     *
     * @type {Node}
     *
     * @example
     * rule.first == rules.nodes[0];
     */


    Container.prototype.normalize = function normalize(nodes, sample) {
        var _this2 = this;

        if (typeof nodes === 'string') {
            var parse = __webpack_require__(22);
            nodes = cleanSource(parse(nodes).nodes);
        } else if (Array.isArray(nodes)) {
            nodes = nodes.slice(0);
            for (var _iterator9 = nodes, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
                var _ref9;

                if (_isArray9) {
                    if (_i9 >= _iterator9.length) break;
                    _ref9 = _iterator9[_i9++];
                } else {
                    _i9 = _iterator9.next();
                    if (_i9.done) break;
                    _ref9 = _i9.value;
                }

                var i = _ref9;

                if (i.parent) i.parent.removeChild(i, 'ignore');
            }
        } else if (nodes.type === 'root') {
            nodes = nodes.nodes.slice(0);
            for (var _iterator10 = nodes, _isArray10 = Array.isArray(_iterator10), _i11 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;) {
                var _ref10;

                if (_isArray10) {
                    if (_i11 >= _iterator10.length) break;
                    _ref10 = _iterator10[_i11++];
                } else {
                    _i11 = _iterator10.next();
                    if (_i11.done) break;
                    _ref10 = _i11.value;
                }

                var _i10 = _ref10;

                if (_i10.parent) _i10.parent.removeChild(_i10, 'ignore');
            }
        } else if (nodes.type) {
            nodes = [nodes];
        } else if (nodes.prop) {
            if (typeof nodes.value === 'undefined') {
                throw new Error('Value field is missed in node creation');
            } else if (typeof nodes.value !== 'string') {
                nodes.value = String(nodes.value);
            }
            nodes = [new _declaration2.default(nodes)];
        } else if (nodes.selector) {
            var Rule = __webpack_require__(16);
            nodes = [new Rule(nodes)];
        } else if (nodes.name) {
            var AtRule = __webpack_require__(15);
            nodes = [new AtRule(nodes)];
        } else if (nodes.text) {
            nodes = [new _comment2.default(nodes)];
        } else {
            throw new Error('Unknown node type in node creation');
        }

        var processed = nodes.map(function (i) {
            if (typeof i.before !== 'function') i = _this2.rebuild(i);

            if (i.parent) i.parent.removeChild(i);
            if (typeof i.raws.before === 'undefined') {
                if (sample && typeof sample.raws.before !== 'undefined') {
                    i.raws.before = sample.raws.before.replace(/[^\s]/g, '');
                }
            }
            i.parent = _this2;
            return i;
        });

        return processed;
    };

    Container.prototype.rebuild = function rebuild(node, parent) {
        var _this3 = this;

        var fix = void 0;
        if (node.type === 'root') {
            var Root = __webpack_require__(25);
            fix = new Root();
        } else if (node.type === 'atrule') {
            var AtRule = __webpack_require__(15);
            fix = new AtRule();
        } else if (node.type === 'rule') {
            var Rule = __webpack_require__(16);
            fix = new Rule();
        } else if (node.type === 'decl') {
            fix = new _declaration2.default();
        } else if (node.type === 'comment') {
            fix = new _comment2.default();
        }

        for (var i in node) {
            if (i === 'nodes') {
                fix.nodes = node.nodes.map(function (j) {
                    return _this3.rebuild(j, fix);
                });
            } else if (i === 'parent' && parent) {
                fix.parent = parent;
            } else if (node.hasOwnProperty(i)) {
                fix[i] = node[i];
            }
        }

        return fix;
    };

    /**
     * @memberof Container#
     * @member {Node[]} nodes - an array containing the container’s children
     *
     * @example
     * const root = postcss.parse('a { color: black }');
     * root.nodes.length           //=> 1
     * root.nodes[0].selector      //=> 'a'
     * root.nodes[0].nodes[0].prop //=> 'color'
     */

    _createClass(Container, [{
        key: 'first',
        get: function get() {
            if (!this.nodes) return undefined;
            return this.nodes[0];
        }

        /**
         * The container’s last child.
         *
         * @type {Node}
         *
         * @example
         * rule.last == rule.nodes[rule.nodes.length - 1];
         */

    }, {
        key: 'last',
        get: function get() {
            if (!this.nodes) return undefined;
            return this.nodes[this.nodes.length - 1];
        }
    }]);

    return Container;
}(_node2.default);

exports.default = Container;

/**
 * @callback childCondition
 * @param {Node} node    - container child
 * @param {number} index - child index
 * @param {Node[]} nodes - all container children
 * @return {boolean}
 */

/**
 * @callback childIterator
 * @param {Node} node    - container child
 * @param {number} index - child index
 * @return {false|undefined} returning `false` will break iteration
 */

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _container = __webpack_require__(24);

var _container2 = _interopRequireDefault(_container);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Represents a CSS file and contains all its parsed nodes.
 *
 * @extends Container
 *
 * @example
 * const root = postcss.parse('a{color:black} b{z-index:2}');
 * root.type         //=> 'root'
 * root.nodes.length //=> 2
 */
var Root = function (_Container) {
    _inherits(Root, _Container);

    function Root(defaults) {
        _classCallCheck(this, Root);

        var _this = _possibleConstructorReturn(this, _Container.call(this, defaults));

        _this.type = 'root';
        if (!_this.nodes) _this.nodes = [];
        return _this;
    }

    Root.prototype.removeChild = function removeChild(child, ignore) {
        var index = this.index(child);

        if (!ignore && index === 0 && this.nodes.length > 1) {
            this.nodes[1].raws.before = this.nodes[index].raws.before;
        }

        return _Container.prototype.removeChild.call(this, child);
    };

    Root.prototype.normalize = function normalize(child, sample, type) {
        var nodes = _Container.prototype.normalize.call(this, child);

        if (sample) {
            if (type === 'prepend') {
                if (this.nodes.length > 1) {
                    sample.raws.before = this.nodes[1].raws.before;
                } else {
                    delete sample.raws.before;
                }
            } else if (this.first !== sample) {
                for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                    var _ref;

                    if (_isArray) {
                        if (_i >= _iterator.length) break;
                        _ref = _iterator[_i++];
                    } else {
                        _i = _iterator.next();
                        if (_i.done) break;
                        _ref = _i.value;
                    }

                    var node = _ref;

                    node.raws.before = sample.raws.before;
                }
            }
        }

        return nodes;
    };

    /**
     * Returns a {@link Result} instance representing the root’s CSS.
     *
     * @param {processOptions} [opts] - options with only `to` and `map` keys
     *
     * @return {Result} result with current root’s CSS
     *
     * @example
     * const root1 = postcss.parse(css1, { from: 'a.css' });
     * const root2 = postcss.parse(css2, { from: 'b.css' });
     * root1.append(root2);
     * const result = root1.toResult({ to: 'all.css', map: true });
     */


    Root.prototype.toResult = function toResult() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var LazyResult = __webpack_require__(45);
        var Processor = __webpack_require__(44);

        var lazy = new LazyResult(new Processor(), this, opts);
        return lazy.stringify();
    };

    /**
     * @memberof Root#
     * @member {object} raws - Information to generate byte-to-byte equal
     *                         node string as it was in the origin input.
     *
     * Every parser saves its own properties,
     * but the default CSS parser uses:
     *
     * * `after`: the space symbols after the last child to the end of file.
     * * `semicolon`: is the last child has an (optional) semicolon.
     *
     * @example
     * postcss.parse('a {}\n').raws //=> { after: '\n' }
     * postcss.parse('a {}').raws   //=> { after: '' }
     */

    return Root;
}(_container2.default);

exports.default = Root;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvb3QuZXM2Il0sIm5hbWVzIjpbIlJvb3QiLCJkZWZhdWx0cyIsInR5cGUiLCJub2RlcyIsInJlbW92ZUNoaWxkIiwiY2hpbGQiLCJpZ25vcmUiLCJpbmRleCIsImxlbmd0aCIsInJhd3MiLCJiZWZvcmUiLCJub3JtYWxpemUiLCJzYW1wbGUiLCJmaXJzdCIsIm5vZGUiLCJ0b1Jlc3VsdCIsIm9wdHMiLCJMYXp5UmVzdWx0IiwicmVxdWlyZSIsIlByb2Nlc3NvciIsImxhenkiLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7Ozs7Ozs7SUFVTUEsSTs7O0FBRUYsa0JBQVlDLFFBQVosRUFBc0I7QUFBQTs7QUFBQSxxREFDbEIsc0JBQU1BLFFBQU4sQ0FEa0I7O0FBRWxCLGNBQUtDLElBQUwsR0FBWSxNQUFaO0FBQ0EsWUFBSyxDQUFDLE1BQUtDLEtBQVgsRUFBbUIsTUFBS0EsS0FBTCxHQUFhLEVBQWI7QUFIRDtBQUlyQjs7bUJBRURDLFcsd0JBQVlDLEssRUFBT0MsTSxFQUFRO0FBQ3ZCLFlBQU1DLFFBQVEsS0FBS0EsS0FBTCxDQUFXRixLQUFYLENBQWQ7O0FBRUEsWUFBSyxDQUFDQyxNQUFELElBQVdDLFVBQVUsQ0FBckIsSUFBMEIsS0FBS0osS0FBTCxDQUFXSyxNQUFYLEdBQW9CLENBQW5ELEVBQXVEO0FBQ25ELGlCQUFLTCxLQUFMLENBQVcsQ0FBWCxFQUFjTSxJQUFkLENBQW1CQyxNQUFuQixHQUE0QixLQUFLUCxLQUFMLENBQVdJLEtBQVgsRUFBa0JFLElBQWxCLENBQXVCQyxNQUFuRDtBQUNIOztBQUVELGVBQU8scUJBQU1OLFdBQU4sWUFBa0JDLEtBQWxCLENBQVA7QUFDSCxLOzttQkFFRE0sUyxzQkFBVU4sSyxFQUFPTyxNLEVBQVFWLEksRUFBTTtBQUMzQixZQUFJQyxRQUFRLHFCQUFNUSxTQUFOLFlBQWdCTixLQUFoQixDQUFaOztBQUVBLFlBQUtPLE1BQUwsRUFBYztBQUNWLGdCQUFLVixTQUFTLFNBQWQsRUFBMEI7QUFDdEIsb0JBQUssS0FBS0MsS0FBTCxDQUFXSyxNQUFYLEdBQW9CLENBQXpCLEVBQTZCO0FBQ3pCSSwyQkFBT0gsSUFBUCxDQUFZQyxNQUFaLEdBQXFCLEtBQUtQLEtBQUwsQ0FBVyxDQUFYLEVBQWNNLElBQWQsQ0FBbUJDLE1BQXhDO0FBQ0gsaUJBRkQsTUFFTztBQUNILDJCQUFPRSxPQUFPSCxJQUFQLENBQVlDLE1BQW5CO0FBQ0g7QUFDSixhQU5ELE1BTU8sSUFBSyxLQUFLRyxLQUFMLEtBQWVELE1BQXBCLEVBQTZCO0FBQ2hDLHFDQUFrQlQsS0FBbEIsa0hBQTBCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSx3QkFBaEJXLElBQWdCOztBQUN0QkEseUJBQUtMLElBQUwsQ0FBVUMsTUFBVixHQUFtQkUsT0FBT0gsSUFBUCxDQUFZQyxNQUEvQjtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxlQUFPUCxLQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7O21CQWFBWSxRLHVCQUFxQjtBQUFBLFlBQVpDLElBQVksdUVBQUwsRUFBSzs7QUFDakIsWUFBSUMsYUFBYUMsUUFBUSxlQUFSLENBQWpCO0FBQ0EsWUFBSUMsWUFBYUQsUUFBUSxhQUFSLENBQWpCOztBQUVBLFlBQUlFLE9BQU8sSUFBSUgsVUFBSixDQUFlLElBQUlFLFNBQUosRUFBZixFQUFnQyxJQUFoQyxFQUFzQ0gsSUFBdEMsQ0FBWDtBQUNBLGVBQU9JLEtBQUtDLFNBQUwsRUFBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBa0JXckIsSSIsImZpbGUiOiJyb290LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIENTUyBmaWxlIGFuZCBjb250YWlucyBhbGwgaXRzIHBhcnNlZCBub2Rlcy5cbiAqXG4gKiBAZXh0ZW5kcyBDb250YWluZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2F7Y29sb3I6YmxhY2t9IGJ7ei1pbmRleDoyfScpO1xuICogcm9vdC50eXBlICAgICAgICAgLy89PiAncm9vdCdcbiAqIHJvb3Qubm9kZXMubGVuZ3RoIC8vPT4gMlxuICovXG5jbGFzcyBSb290IGV4dGVuZHMgQ29udGFpbmVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgICAgIHN1cGVyKGRlZmF1bHRzKTtcbiAgICAgICAgdGhpcy50eXBlID0gJ3Jvb3QnO1xuICAgICAgICBpZiAoICF0aGlzLm5vZGVzICkgdGhpcy5ub2RlcyA9IFtdO1xuICAgIH1cblxuICAgIHJlbW92ZUNoaWxkKGNoaWxkLCBpZ25vcmUpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmluZGV4KGNoaWxkKTtcblxuICAgICAgICBpZiAoICFpZ25vcmUgJiYgaW5kZXggPT09IDAgJiYgdGhpcy5ub2Rlcy5sZW5ndGggPiAxICkge1xuICAgICAgICAgICAgdGhpcy5ub2Rlc1sxXS5yYXdzLmJlZm9yZSA9IHRoaXMubm9kZXNbaW5kZXhdLnJhd3MuYmVmb3JlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICB9XG5cbiAgICBub3JtYWxpemUoY2hpbGQsIHNhbXBsZSwgdHlwZSkge1xuICAgICAgICBsZXQgbm9kZXMgPSBzdXBlci5ub3JtYWxpemUoY2hpbGQpO1xuXG4gICAgICAgIGlmICggc2FtcGxlICkge1xuICAgICAgICAgICAgaWYgKCB0eXBlID09PSAncHJlcGVuZCcgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLm5vZGVzLmxlbmd0aCA+IDEgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZS5yYXdzLmJlZm9yZSA9IHRoaXMubm9kZXNbMV0ucmF3cy5iZWZvcmU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNhbXBsZS5yYXdzLmJlZm9yZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLmZpcnN0ICE9PSBzYW1wbGUgKSB7XG4gICAgICAgICAgICAgICAgZm9yICggbGV0IG5vZGUgb2Ygbm9kZXMgKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUucmF3cy5iZWZvcmUgPSBzYW1wbGUucmF3cy5iZWZvcmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB7QGxpbmsgUmVzdWx0fSBpbnN0YW5jZSByZXByZXNlbnRpbmcgdGhlIHJvb3TigJlzIENTUy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cHJvY2Vzc09wdGlvbnN9IFtvcHRzXSAtIG9wdGlvbnMgd2l0aCBvbmx5IGB0b2AgYW5kIGBtYXBgIGtleXNcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1Jlc3VsdH0gcmVzdWx0IHdpdGggY3VycmVudCByb2904oCZcyBDU1NcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3Qgcm9vdDEgPSBwb3N0Y3NzLnBhcnNlKGNzczEsIHsgZnJvbTogJ2EuY3NzJyB9KTtcbiAgICAgKiBjb25zdCByb290MiA9IHBvc3Rjc3MucGFyc2UoY3NzMiwgeyBmcm9tOiAnYi5jc3MnIH0pO1xuICAgICAqIHJvb3QxLmFwcGVuZChyb290Mik7XG4gICAgICogY29uc3QgcmVzdWx0ID0gcm9vdDEudG9SZXN1bHQoeyB0bzogJ2FsbC5jc3MnLCBtYXA6IHRydWUgfSk7XG4gICAgICovXG4gICAgdG9SZXN1bHQob3B0cyA9IHsgfSkge1xuICAgICAgICBsZXQgTGF6eVJlc3VsdCA9IHJlcXVpcmUoJy4vbGF6eS1yZXN1bHQnKTtcbiAgICAgICAgbGV0IFByb2Nlc3NvciAgPSByZXF1aXJlKCcuL3Byb2Nlc3NvcicpO1xuXG4gICAgICAgIGxldCBsYXp5ID0gbmV3IExhenlSZXN1bHQobmV3IFByb2Nlc3NvcigpLCB0aGlzLCBvcHRzKTtcbiAgICAgICAgcmV0dXJuIGxhenkuc3RyaW5naWZ5KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFJvb3QjXG4gICAgICogQG1lbWJlciB7b2JqZWN0fSByYXdzIC0gSW5mb3JtYXRpb24gdG8gZ2VuZXJhdGUgYnl0ZS10by1ieXRlIGVxdWFsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSBzdHJpbmcgYXMgaXQgd2FzIGluIHRoZSBvcmlnaW4gaW5wdXQuXG4gICAgICpcbiAgICAgKiBFdmVyeSBwYXJzZXIgc2F2ZXMgaXRzIG93biBwcm9wZXJ0aWVzLFxuICAgICAqIGJ1dCB0aGUgZGVmYXVsdCBDU1MgcGFyc2VyIHVzZXM6XG4gICAgICpcbiAgICAgKiAqIGBhZnRlcmA6IHRoZSBzcGFjZSBzeW1ib2xzIGFmdGVyIHRoZSBsYXN0IGNoaWxkIHRvIHRoZSBlbmQgb2YgZmlsZS5cbiAgICAgKiAqIGBzZW1pY29sb25gOiBpcyB0aGUgbGFzdCBjaGlsZCBoYXMgYW4gKG9wdGlvbmFsKSBzZW1pY29sb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBvc3Rjc3MucGFyc2UoJ2Ege31cXG4nKS5yYXdzIC8vPT4geyBhZnRlcjogJ1xcbicgfVxuICAgICAqIHBvc3Rjc3MucGFyc2UoJ2Ege30nKS5yYXdzICAgLy89PiB7IGFmdGVyOiAnJyB9XG4gICAgICovXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUm9vdDtcbiJdfQ==


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _node = __webpack_require__(8);

var _node2 = _interopRequireDefault(_node);

var _types = __webpack_require__(0);

var types = _interopRequireWildcard(_types);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Container = function (_Node) {
    _inherits(Container, _Node);

    function Container(opts) {
        _classCallCheck(this, Container);

        var _this = _possibleConstructorReturn(this, _Node.call(this, opts));

        if (!_this.nodes) {
            _this.nodes = [];
        }
        return _this;
    }

    Container.prototype.append = function append(selector) {
        selector.parent = this;
        this.nodes.push(selector);
        return this;
    };

    Container.prototype.prepend = function prepend(selector) {
        selector.parent = this;
        this.nodes.unshift(selector);
        return this;
    };

    Container.prototype.at = function at(index) {
        return this.nodes[index];
    };

    Container.prototype.index = function index(child) {
        if (typeof child === 'number') {
            return child;
        }
        return this.nodes.indexOf(child);
    };

    Container.prototype.removeChild = function removeChild(child) {
        child = this.index(child);
        this.at(child).parent = undefined;
        this.nodes.splice(child, 1);

        var index = void 0;
        for (var id in this.indexes) {
            index = this.indexes[id];
            if (index >= child) {
                this.indexes[id] = index - 1;
            }
        }

        return this;
    };

    Container.prototype.removeAll = function removeAll() {
        for (var _iterator = this.nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var node = _ref;

            node.parent = undefined;
        }
        this.nodes = [];
        return this;
    };

    Container.prototype.empty = function empty() {
        return this.removeAll();
    };

    Container.prototype.insertAfter = function insertAfter(oldNode, newNode) {
        newNode.parent = this;
        var oldIndex = this.index(oldNode);
        this.nodes.splice(oldIndex + 1, 0, newNode);

        newNode.parent = this;

        var index = void 0;
        for (var id in this.indexes) {
            index = this.indexes[id];
            if (oldIndex <= index) {
                this.indexes[id] = index + 1;
            }
        }

        return this;
    };

    Container.prototype.insertBefore = function insertBefore(oldNode, newNode) {
        newNode.parent = this;
        var oldIndex = this.index(oldNode);
        this.nodes.splice(oldIndex, 0, newNode);

        newNode.parent = this;

        var index = void 0;
        for (var id in this.indexes) {
            index = this.indexes[id];
            if (index <= oldIndex) {
                this.indexes[id] = index + 1;
            }
        }

        return this;
    };

    Container.prototype.each = function each(callback) {
        if (!this.lastEach) {
            this.lastEach = 0;
        }
        if (!this.indexes) {
            this.indexes = {};
        }

        this.lastEach++;
        var id = this.lastEach;
        this.indexes[id] = 0;

        if (!this.length) {
            return undefined;
        }

        var index = void 0,
            result = void 0;
        while (this.indexes[id] < this.length) {
            index = this.indexes[id];
            result = callback(this.at(index), index);
            if (result === false) {
                break;
            }

            this.indexes[id] += 1;
        }

        delete this.indexes[id];

        if (result === false) {
            return false;
        }
    };

    Container.prototype.walk = function walk(callback) {
        return this.each(function (node, i) {
            var result = callback(node, i);

            if (result !== false && node.length) {
                result = node.walk(callback);
            }

            if (result === false) {
                return false;
            }
        });
    };

    Container.prototype.walkAttributes = function walkAttributes(callback) {
        var _this2 = this;

        return this.walk(function (selector) {
            if (selector.type === types.ATTRIBUTE) {
                return callback.call(_this2, selector);
            }
        });
    };

    Container.prototype.walkClasses = function walkClasses(callback) {
        var _this3 = this;

        return this.walk(function (selector) {
            if (selector.type === types.CLASS) {
                return callback.call(_this3, selector);
            }
        });
    };

    Container.prototype.walkCombinators = function walkCombinators(callback) {
        var _this4 = this;

        return this.walk(function (selector) {
            if (selector.type === types.COMBINATOR) {
                return callback.call(_this4, selector);
            }
        });
    };

    Container.prototype.walkComments = function walkComments(callback) {
        var _this5 = this;

        return this.walk(function (selector) {
            if (selector.type === types.COMMENT) {
                return callback.call(_this5, selector);
            }
        });
    };

    Container.prototype.walkIds = function walkIds(callback) {
        var _this6 = this;

        return this.walk(function (selector) {
            if (selector.type === types.ID) {
                return callback.call(_this6, selector);
            }
        });
    };

    Container.prototype.walkNesting = function walkNesting(callback) {
        var _this7 = this;

        return this.walk(function (selector) {
            if (selector.type === types.NESTING) {
                return callback.call(_this7, selector);
            }
        });
    };

    Container.prototype.walkPseudos = function walkPseudos(callback) {
        var _this8 = this;

        return this.walk(function (selector) {
            if (selector.type === types.PSEUDO) {
                return callback.call(_this8, selector);
            }
        });
    };

    Container.prototype.walkTags = function walkTags(callback) {
        var _this9 = this;

        return this.walk(function (selector) {
            if (selector.type === types.TAG) {
                return callback.call(_this9, selector);
            }
        });
    };

    Container.prototype.walkUniversals = function walkUniversals(callback) {
        var _this10 = this;

        return this.walk(function (selector) {
            if (selector.type === types.UNIVERSAL) {
                return callback.call(_this10, selector);
            }
        });
    };

    Container.prototype.split = function split(callback) {
        var _this11 = this;

        var current = [];
        return this.reduce(function (memo, node, index) {
            var split = callback.call(_this11, node);
            current.push(node);
            if (split) {
                memo.push(current);
                current = [];
            } else if (index === _this11.length - 1) {
                memo.push(current);
            }
            return memo;
        }, []);
    };

    Container.prototype.map = function map(callback) {
        return this.nodes.map(callback);
    };

    Container.prototype.reduce = function reduce(callback, memo) {
        return this.nodes.reduce(callback, memo);
    };

    Container.prototype.every = function every(callback) {
        return this.nodes.every(callback);
    };

    Container.prototype.some = function some(callback) {
        return this.nodes.some(callback);
    };

    Container.prototype.filter = function filter(callback) {
        return this.nodes.filter(callback);
    };

    Container.prototype.sort = function sort(callback) {
        return this.nodes.sort(callback);
    };

    Container.prototype.toString = function toString() {
        return this.map(String).join('');
    };

    _createClass(Container, [{
        key: 'first',
        get: function get() {
            return this.at(0);
        }
    }, {
        key: 'last',
        get: function get() {
            return this.at(this.length - 1);
        }
    }, {
        key: 'length',
        get: function get() {
            return this.nodes.length;
        }
    }]);

    return Container;
}(_node2.default);

exports.default = Container;
module.exports = exports['default'];

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ActionTypes; });
/* harmony export (immutable) */ __webpack_exports__["b"] = createStore;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_symbol_observable__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_symbol_observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_symbol_observable__);



/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var ActionTypes = {
  INIT: '@@redux/INIT'

  /**
   * Creates a Redux store that holds the state tree.
   * The only way to change the data in the store is to call `dispatch()` on it.
   *
   * There should only be a single store in your app. To specify how different
   * parts of the state tree respond to actions, you may combine several reducers
   * into a single reducer function by using `combineReducers`.
   *
   * @param {Function} reducer A function that returns the next state tree, given
   * the current state tree and the action to handle.
   *
   * @param {any} [preloadedState] The initial state. You may optionally specify it
   * to hydrate the state from the server in universal apps, or to restore a
   * previously serialized user session.
   * If you use `combineReducers` to produce the root reducer function, this must be
   * an object with the same shape as `combineReducers` keys.
   *
   * @param {Function} [enhancer] The store enhancer. You may optionally specify it
   * to enhance the store with third-party capabilities such as middleware,
   * time travel, persistence, etc. The only store enhancer that ships with Redux
   * is `applyMiddleware()`.
   *
   * @returns {Store} A Redux store that lets you read the state, dispatch actions
   * and subscribe to changes.
   */
};function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }

  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */
  function getState() {
    return currentState;
  }

  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */
  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected listener to be a function.');
    }

    var isSubscribed = true;

    ensureCanMutateNextListeners();
    nextListeners.push(listener);

    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      isSubscribed = false;

      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }

  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */
  function dispatch(action) {
    if (!Object(__WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__["a" /* default */])(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }

  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer;
    dispatch({ type: ActionTypes.INIT });
  }

  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */
  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object') {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return { unsubscribe: unsubscribe };
      }
    }, _ref[__WEBPACK_IMPORTED_MODULE_1_symbol_observable___default.a] = function () {
      return this;
    }, _ref;
  }

  // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.
  dispatch({ type: ActionTypes.INIT });

  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[__WEBPACK_IMPORTED_MODULE_1_symbol_observable___default.a] = observable, _ref2;
}

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getPrototype_js__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__ = __webpack_require__(71);




/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!Object(__WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__["a" /* default */])(value) || Object(__WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__["a" /* default */])(value) != objectTag) {
    return false;
  }
  var proto = Object(__WEBPACK_IMPORTED_MODULE_1__getPrototype_js__["a" /* default */])(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

/* harmony default export */ __webpack_exports__["a"] = (isPlainObject);


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_js__ = __webpack_require__(65);


/** Built-in value references. */
var Symbol = __WEBPACK_IMPORTED_MODULE_0__root_js__["a" /* default */].Symbol;

/* harmony default export */ __webpack_exports__["a"] = (Symbol);


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = warning;
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */
  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */
}

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = compose;
/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

function compose() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(undefined, arguments));
    };
  });
}

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = function cmp (a, b) {
    var pa = a.split('.');
    var pb = b.split('.');
    for (var i = 0; i < 3; i++) {
        var na = Number(pa[i]);
        var nb = Number(pb[i]);
        if (na > nb) return 1;
        if (nb > na) return -1;
        if (!isNaN(na) && isNaN(nb)) return 1;
        if (isNaN(na) && !isNaN(nb)) return -1;
    }
    return 0;
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _declaration = __webpack_require__(18);

var _declaration2 = _interopRequireDefault(_declaration);

var _processor = __webpack_require__(44);

var _processor2 = _interopRequireDefault(_processor);

var _stringify = __webpack_require__(21);

var _stringify2 = _interopRequireDefault(_stringify);

var _comment = __webpack_require__(23);

var _comment2 = _interopRequireDefault(_comment);

var _atRule = __webpack_require__(15);

var _atRule2 = _interopRequireDefault(_atRule);

var _vendor = __webpack_require__(104);

var _vendor2 = _interopRequireDefault(_vendor);

var _parse = __webpack_require__(22);

var _parse2 = _interopRequireDefault(_parse);

var _list = __webpack_require__(46);

var _list2 = _interopRequireDefault(_list);

var _rule = __webpack_require__(16);

var _rule2 = _interopRequireDefault(_rule);

var _root = __webpack_require__(25);

var _root2 = _interopRequireDefault(_root);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a new {@link Processor} instance that will apply `plugins`
 * as CSS processors.
 *
 * @param {Array.<Plugin|pluginFunction>|Processor} plugins - PostCSS
 *        plugins. See {@link Processor#use} for plugin format.
 *
 * @return {Processor} Processor to process multiple CSS
 *
 * @example
 * import postcss from 'postcss';
 *
 * postcss(plugins).process(css, { from, to }).then(result => {
 *   console.log(result.css);
 * });
 *
 * @namespace postcss
 */
function postcss() {
  for (var _len = arguments.length, plugins = Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }

  if (plugins.length === 1 && Array.isArray(plugins[0])) {
    plugins = plugins[0];
  }
  return new _processor2.default(plugins);
}

/**
 * Creates a PostCSS plugin with a standard API.
 *
 * The newly-wrapped function will provide both the name and PostCSS
 * version of the plugin.
 *
 * ```js
 *  const processor = postcss([replace]);
 *  processor.plugins[0].postcssPlugin  //=> 'postcss-replace'
 *  processor.plugins[0].postcssVersion //=> '5.1.0'
 * ```
 *
 * The plugin function receives 2 arguments: {@link Root}
 * and {@link Result} instance. The function should mutate the provided
 * `Root` node. Alternatively, you can create a new `Root` node
 * and override the `result.root` property.
 *
 * ```js
 * const cleaner = postcss.plugin('postcss-cleaner', () => {
 *   return (root, result) => {
 *     result.root = postcss.root();
 *   };
 * });
 * ```
 *
 * As a convenience, plugins also expose a `process` method so that you can use
 * them as standalone tools.
 *
 * ```js
 * cleaner.process(css, processOpts, pluginOpts);
 * // This is equivalent to:
 * postcss([ cleaner(pluginOpts) ]).process(css, processOpts);
 * ```
 *
 * Asynchronous plugins should return a `Promise` instance.
 *
 * ```js
 * postcss.plugin('postcss-import', () => {
 *   return (root, result) => {
 *     return new Promise( (resolve, reject) => {
 *       fs.readFile('base.css', (base) => {
 *         root.prepend(base);
 *         resolve();
 *       });
 *     });
 *   };
 * });
 * ```
 *
 * Add warnings using the {@link Node#warn} method.
 * Send data to other plugins using the {@link Result#messages} array.
 *
 * ```js
 * postcss.plugin('postcss-caniuse-test', () => {
 *   return (root, result) => {
 *     css.walkDecls(decl => {
 *       if ( !caniuse.support(decl.prop) ) {
 *         decl.warn(result, 'Some browsers do not support ' + decl.prop);
 *       }
 *     });
 *   };
 * });
 * ```
 *
 * @param {string} name          - PostCSS plugin name. Same as in `name`
 *                                 property in `package.json`. It will be saved
 *                                 in `plugin.postcssPlugin` property.
 * @param {function} initializer - will receive plugin options
 *                                 and should return {@link pluginFunction}
 *
 * @return {Plugin} PostCSS plugin
 */
postcss.plugin = function plugin(name, initializer) {
  var creator = function creator() {
    var transformer = initializer.apply(undefined, arguments);
    transformer.postcssPlugin = name;
    transformer.postcssVersion = new _processor2.default().version;
    return transformer;
  };

  var cache = void 0;
  Object.defineProperty(creator, 'postcss', {
    get: function get() {
      if (!cache) cache = creator();
      return cache;
    }
  });

  creator.process = function (css, processOpts, pluginOpts) {
    return postcss([creator(pluginOpts)]).process(css, processOpts);
  };

  return creator;
};

/**
 * Default function to convert a node tree into a CSS string.
 *
 * @param {Node} node       - start node for stringifing. Usually {@link Root}.
 * @param {builder} builder - function to concatenate CSS from node’s parts
 *                            or generate string and source map
 *
 * @return {void}
 *
 * @function
 */
postcss.stringify = _stringify2.default;

/**
 * Parses source css and returns a new {@link Root} node,
 * which contains the source CSS nodes.
 *
 * @param {string|toString} css   - string with input CSS or any object
 *                                  with toString() method, like a Buffer
 * @param {processOptions} [opts] - options with only `from` and `map` keys
 *
 * @return {Root} PostCSS AST
 *
 * @example
 * // Simple CSS concatenation with source map support
 * const root1 = postcss.parse(css1, { from: file1 });
 * const root2 = postcss.parse(css2, { from: file2 });
 * root1.append(root2).toResult().css;
 *
 * @function
 */
postcss.parse = _parse2.default;

/**
 * @member {vendor} - Contains the {@link vendor} module.
 *
 * @example
 * postcss.vendor.unprefixed('-moz-tab') //=> ['tab']
 */
postcss.vendor = _vendor2.default;

/**
 * @member {list} - Contains the {@link list} module.
 *
 * @example
 * postcss.list.space('5px calc(10% + 5px)') //=> ['5px', 'calc(10% + 5px)']
 */
postcss.list = _list2.default;

/**
 * Creates a new {@link Comment} node.
 *
 * @param {object} [defaults] - properties for the new node.
 *
 * @return {Comment} new Comment node
 *
 * @example
 * postcss.comment({ text: 'test' })
 */
postcss.comment = function (defaults) {
  return new _comment2.default(defaults);
};

/**
 * Creates a new {@link AtRule} node.
 *
 * @param {object} [defaults] - properties for the new node.
 *
 * @return {AtRule} new AtRule node
 *
 * @example
 * postcss.atRule({ name: 'charset' }).toString() //=> "@charset"
 */
postcss.atRule = function (defaults) {
  return new _atRule2.default(defaults);
};

/**
 * Creates a new {@link Declaration} node.
 *
 * @param {object} [defaults] - properties for the new node.
 *
 * @return {Declaration} new Declaration node
 *
 * @example
 * postcss.decl({ prop: 'color', value: 'red' }).toString() //=> "color: red"
 */
postcss.decl = function (defaults) {
  return new _declaration2.default(defaults);
};

/**
 * Creates a new {@link Rule} node.
 *
 * @param {object} [defaults] - properties for the new node.
 *
 * @return {Rule} new Rule node
 *
 * @example
 * postcss.rule({ selector: 'a' }).toString() //=> "a {\n}"
 */
postcss.rule = function (defaults) {
  return new _rule2.default(defaults);
};

/**
 * Creates a new {@link Root} node.
 *
 * @param {object} [defaults] - properties for the new node.
 *
 * @return {Root} new Root node
 *
 * @example
 * postcss.root({ after: '\n' }).toString() //=> "\n"
 */
postcss.root = function (defaults) {
  return new _root2.default(defaults);
};

exports.default = postcss;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _supportsColor = __webpack_require__(86);

var _supportsColor2 = _interopRequireDefault(_supportsColor);

var _chalk = __webpack_require__(35);

var _chalk2 = _interopRequireDefault(_chalk);

var _terminalHighlight = __webpack_require__(87);

var _terminalHighlight2 = _interopRequireDefault(_terminalHighlight);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The CSS parser throws this error for broken CSS.
 *
 * Custom parsers can throw this error for broken custom syntax using
 * the {@link Node#error} method.
 *
 * PostCSS will use the input source map to detect the original error location.
 * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,
 * PostCSS will show the original position in the Sass file.
 *
 * If you need the position in the PostCSS input
 * (e.g., to debug the previous compiler), use `error.input.file`.
 *
 * @example
 * // Catching and checking syntax error
 * try {
 *   postcss.parse('a{')
 * } catch (error) {
 *   if ( error.name === 'CssSyntaxError' ) {
 *     error //=> CssSyntaxError
 *   }
 * }
 *
 * @example
 * // Raising error from plugin
 * throw node.error('Unknown variable', { plugin: 'postcss-vars' });
 */
var CssSyntaxError = function () {

    /**
     * @param {string} message  - error message
     * @param {number} [line]   - source line of the error
     * @param {number} [column] - source column of the error
     * @param {string} [source] - source code of the broken file
     * @param {string} [file]   - absolute path to the broken file
     * @param {string} [plugin] - PostCSS plugin name, if error came from plugin
     */
    function CssSyntaxError(message, line, column, source, file, plugin) {
        _classCallCheck(this, CssSyntaxError);

        /**
         * @member {string} - Always equal to `'CssSyntaxError'`. You should
         *                    always check error type
         *                    by `error.name === 'CssSyntaxError'` instead of
         *                    `error instanceof CssSyntaxError`, because
         *                    npm could have several PostCSS versions.
         *
         * @example
         * if ( error.name === 'CssSyntaxError' ) {
         *   error //=> CssSyntaxError
         * }
         */
        this.name = 'CssSyntaxError';
        /**
         * @member {string} - Error message.
         *
         * @example
         * error.message //=> 'Unclosed block'
         */
        this.reason = message;

        if (file) {
            /**
             * @member {string} - Absolute path to the broken file.
             *
             * @example
             * error.file       //=> 'a.sass'
             * error.input.file //=> 'a.css'
             */
            this.file = file;
        }
        if (source) {
            /**
             * @member {string} - Source code of the broken file.
             *
             * @example
             * error.source       //=> 'a { b {} }'
             * error.input.column //=> 'a b { }'
             */
            this.source = source;
        }
        if (plugin) {
            /**
             * @member {string} - Plugin name, if error came from plugin.
             *
             * @example
             * error.plugin //=> 'postcss-vars'
             */
            this.plugin = plugin;
        }
        if (typeof line !== 'undefined' && typeof column !== 'undefined') {
            /**
             * @member {number} - Source line of the error.
             *
             * @example
             * error.line       //=> 2
             * error.input.line //=> 4
             */
            this.line = line;
            /**
             * @member {number} - Source column of the error.
             *
             * @example
             * error.column       //=> 1
             * error.input.column //=> 4
             */
            this.column = column;
        }

        this.setMessage();

        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, CssSyntaxError);
        }
    }

    CssSyntaxError.prototype.setMessage = function setMessage() {
        /**
         * @member {string} - Full error text in the GNU error format
         *                    with plugin, file, line and column.
         *
         * @example
         * error.message //=> 'a.css:1:1: Unclosed block'
         */
        this.message = this.plugin ? this.plugin + ': ' : '';
        this.message += this.file ? this.file : '<css input>';
        if (typeof this.line !== 'undefined') {
            this.message += ':' + this.line + ':' + this.column;
        }
        this.message += ': ' + this.reason;
    };

    /**
     * Returns a few lines of CSS source that caused the error.
     *
     * If the CSS has an input source map without `sourceContent`,
     * this method will return an empty string.
     *
     * @param {boolean} [color] whether arrow will be colored red by terminal
     *                          color codes. By default, PostCSS will detect
     *                          color support by `process.stdout.isTTY`
     *                          and `process.env.NODE_DISABLE_COLORS`.
     *
     * @example
     * error.showSourceCode() //=> "  4 | }
     *                        //      5 | a {
     *                        //    > 6 |   bad
     *                        //        |   ^
     *                        //      7 | }
     *                        //      8 | b {"
     *
     * @return {string} few lines of CSS source that caused the error
     */


    CssSyntaxError.prototype.showSourceCode = function showSourceCode(color) {
        var _this = this;

        if (!this.source) return '';

        var css = this.source;
        if (typeof color === 'undefined') color = _supportsColor2.default;
        if (color) css = (0, _terminalHighlight2.default)(css);

        var lines = css.split(/\r?\n/);
        var start = Math.max(this.line - 3, 0);
        var end = Math.min(this.line + 2, lines.length);

        var maxWidth = String(end).length;

        function mark(text) {
            if (color && _chalk2.default.red) {
                return _chalk2.default.red.bold(text);
            } else {
                return text;
            }
        }
        function aside(text) {
            if (color && _chalk2.default.gray) {
                return _chalk2.default.gray(text);
            } else {
                return text;
            }
        }

        return lines.slice(start, end).map(function (line, index) {
            var number = start + 1 + index;
            var gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';
            if (number === _this.line) {
                var spacing = aside(gutter.replace(/\d/g, ' ')) + line.slice(0, _this.column - 1).replace(/[^\t]/g, ' ');
                return mark('>') + aside(gutter) + line + '\n ' + spacing + mark('^');
            } else {
                return ' ' + aside(gutter) + line;
            }
        }).join('\n');
    };

    /**
     * Returns error position, message and source code of the broken part.
     *
     * @example
     * error.toString() //=> "CssSyntaxError: app.css:1:1: Unclosed block
     *                  //    > 1 | a {
     *                  //        | ^"
     *
     * @return {string} error position, message and source code
     */


    CssSyntaxError.prototype.toString = function toString() {
        var code = this.showSourceCode();
        if (code) {
            code = '\n\n' + code + '\n';
        }
        return this.name + ': ' + this.message + code;
    };

    /**
     * @memberof CssSyntaxError#
     * @member {Input} input - Input object with PostCSS internal information
     *                         about input file. If input has source map
     *                         from previous tool, PostCSS will use origin
     *                         (for example, Sass) source. You can use this
     *                         object to get PostCSS input source.
     *
     * @example
     * error.input.file //=> 'a.css'
     * error.file       //=> 'a.sass'
     */

    return CssSyntaxError;
}();

exports.default = CssSyntaxError;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),
/* 35 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = tokenizer;
var SINGLE_QUOTE = 39;
var DOUBLE_QUOTE = 34;
var BACKSLASH = 92;
var SLASH = 47;
var NEWLINE = 10;
var SPACE = 32;
var FEED = 12;
var TAB = 9;
var CR = 13;
var OPEN_SQUARE = 91;
var CLOSE_SQUARE = 93;
var OPEN_PARENTHESES = 40;
var CLOSE_PARENTHESES = 41;
var OPEN_CURLY = 123;
var CLOSE_CURLY = 125;
var SEMICOLON = 59;
var ASTERISK = 42;
var COLON = 58;
var AT = 64;

var RE_AT_END = /[ \n\t\r\f\{\(\)'"\\;/\[\]#]/g;
var RE_WORD_END = /[ \n\t\r\f\(\)\{\}:;@!'"\\\]\[#]|\/(?=\*)/g;
var RE_BAD_BRACKET = /.[\\\/\("'\n]/;
var RE_HEX_ESCAPE = /[a-f0-9]/i;

function tokenizer(input) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var css = input.css.valueOf();
    var ignore = options.ignoreErrors;

    var code = void 0,
        next = void 0,
        quote = void 0,
        lines = void 0,
        last = void 0,
        content = void 0,
        escape = void 0,
        nextLine = void 0,
        nextOffset = void 0,
        escaped = void 0,
        escapePos = void 0,
        prev = void 0,
        n = void 0,
        currentToken = void 0;

    var length = css.length;
    var offset = -1;
    var line = 1;
    var pos = 0;
    var buffer = [];
    var returned = [];

    function unclosed(what) {
        throw input.error('Unclosed ' + what, line, pos - offset);
    }

    function endOfFile() {
        return returned.length === 0 && pos >= length;
    }

    function nextToken() {
        if (returned.length) return returned.pop();
        if (pos >= length) return;

        code = css.charCodeAt(pos);
        if (code === NEWLINE || code === FEED || code === CR && css.charCodeAt(pos + 1) !== NEWLINE) {
            offset = pos;
            line += 1;
        }

        switch (code) {
            case NEWLINE:
            case SPACE:
            case TAB:
            case CR:
            case FEED:
                next = pos;
                do {
                    next += 1;
                    code = css.charCodeAt(next);
                    if (code === NEWLINE) {
                        offset = next;
                        line += 1;
                    }
                } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);

                currentToken = ['space', css.slice(pos, next)];
                pos = next - 1;
                break;

            case OPEN_SQUARE:
                currentToken = ['[', '[', line, pos - offset];
                break;

            case CLOSE_SQUARE:
                currentToken = [']', ']', line, pos - offset];
                break;

            case OPEN_CURLY:
                currentToken = ['{', '{', line, pos - offset];
                break;

            case CLOSE_CURLY:
                currentToken = ['}', '}', line, pos - offset];
                break;

            case COLON:
                currentToken = [':', ':', line, pos - offset];
                break;

            case SEMICOLON:
                currentToken = [';', ';', line, pos - offset];
                break;

            case OPEN_PARENTHESES:
                prev = buffer.length ? buffer.pop()[1] : '';
                n = css.charCodeAt(pos + 1);
                if (prev === 'url' && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {
                    next = pos;
                    do {
                        escaped = false;
                        next = css.indexOf(')', next + 1);
                        if (next === -1) {
                            if (ignore) {
                                next = pos;
                                break;
                            } else {
                                unclosed('bracket');
                            }
                        }
                        escapePos = next;
                        while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                            escapePos -= 1;
                            escaped = !escaped;
                        }
                    } while (escaped);

                    currentToken = ['brackets', css.slice(pos, next + 1), line, pos - offset, line, next - offset];

                    pos = next;
                } else {
                    next = css.indexOf(')', pos + 1);
                    content = css.slice(pos, next + 1);

                    if (next === -1 || RE_BAD_BRACKET.test(content)) {
                        currentToken = ['(', '(', line, pos - offset];
                    } else {
                        currentToken = ['brackets', content, line, pos - offset, line, next - offset];
                        pos = next;
                    }
                }

                break;

            case CLOSE_PARENTHESES:
                currentToken = [')', ')', line, pos - offset];
                break;

            case SINGLE_QUOTE:
            case DOUBLE_QUOTE:
                quote = code === SINGLE_QUOTE ? '\'' : '"';
                next = pos;
                do {
                    escaped = false;
                    next = css.indexOf(quote, next + 1);
                    if (next === -1) {
                        if (ignore) {
                            next = pos + 1;
                            break;
                        } else {
                            unclosed('string');
                        }
                    }
                    escapePos = next;
                    while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                        escapePos -= 1;
                        escaped = !escaped;
                    }
                } while (escaped);

                content = css.slice(pos, next + 1);
                lines = content.split('\n');
                last = lines.length - 1;

                if (last > 0) {
                    nextLine = line + last;
                    nextOffset = next - lines[last].length;
                } else {
                    nextLine = line;
                    nextOffset = offset;
                }

                currentToken = ['string', css.slice(pos, next + 1), line, pos - offset, nextLine, next - nextOffset];

                offset = nextOffset;
                line = nextLine;
                pos = next;
                break;

            case AT:
                RE_AT_END.lastIndex = pos + 1;
                RE_AT_END.test(css);
                if (RE_AT_END.lastIndex === 0) {
                    next = css.length - 1;
                } else {
                    next = RE_AT_END.lastIndex - 2;
                }

                currentToken = ['at-word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];

                pos = next;
                break;

            case BACKSLASH:
                next = pos;
                escape = true;
                while (css.charCodeAt(next + 1) === BACKSLASH) {
                    next += 1;
                    escape = !escape;
                }
                code = css.charCodeAt(next + 1);
                if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {
                    next += 1;
                    if (RE_HEX_ESCAPE.test(css.charAt(next))) {
                        while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {
                            next += 1;
                        }
                        if (css.charCodeAt(next + 1) === SPACE) {
                            next += 1;
                        }
                    }
                }

                currentToken = ['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];

                pos = next;
                break;

            default:
                if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
                    next = css.indexOf('*/', pos + 2) + 1;
                    if (next === 0) {
                        if (ignore) {
                            next = css.length;
                        } else {
                            unclosed('comment');
                        }
                    }

                    content = css.slice(pos, next + 1);
                    lines = content.split('\n');
                    last = lines.length - 1;

                    if (last > 0) {
                        nextLine = line + last;
                        nextOffset = next - lines[last].length;
                    } else {
                        nextLine = line;
                        nextOffset = offset;
                    }

                    currentToken = ['comment', content, line, pos - offset, nextLine, next - nextOffset];

                    offset = nextOffset;
                    line = nextLine;
                    pos = next;
                } else {
                    RE_WORD_END.lastIndex = pos + 1;
                    RE_WORD_END.test(css);
                    if (RE_WORD_END.lastIndex === 0) {
                        next = css.length - 1;
                    } else {
                        next = RE_WORD_END.lastIndex - 2;
                    }

                    currentToken = ['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];

                    buffer.push(currentToken);

                    pos = next;
                }

                break;
        }

        pos++;
        return currentToken;
    }

    function back(token) {
        returned.push(token);
    }

    return {
        back: back,
        nextToken: nextToken,
        endOfFile: endOfFile
    };
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cssSyntaxError = __webpack_require__(34);

var _cssSyntaxError2 = _interopRequireDefault(_cssSyntaxError);

var _previousMap = __webpack_require__(88);

var _previousMap2 = _interopRequireDefault(_previousMap);

var _path = __webpack_require__(20);

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var sequence = 0;

/**
 * Represents the source CSS.
 *
 * @example
 * const root  = postcss.parse(css, { from: file });
 * const input = root.source.input;
 */

var Input = function () {

    /**
     * @param {string} css    - input CSS source
     * @param {object} [opts] - {@link Processor#process} options
     */
    function Input(css) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Input);

        /**
         * @member {string} - input CSS source
         *
         * @example
         * const input = postcss.parse('a{}', { from: file }).input;
         * input.css //=> "a{}";
         */
        this.css = css.toString();

        if (this.css[0] === '\uFEFF' || this.css[0] === '\uFFFE') {
            this.css = this.css.slice(1);
        }

        if (opts.from) {
            if (/^\w+:\/\//.test(opts.from)) {
                /**
                 * @member {string} - The absolute path to the CSS source file
                 *                    defined with the `from` option.
                 *
                 * @example
                 * const root = postcss.parse(css, { from: 'a.css' });
                 * root.source.input.file //=> '/home/ai/a.css'
                 */
                this.file = opts.from;
            } else {
                this.file = _path2.default.resolve(opts.from);
            }
        }

        var map = new _previousMap2.default(this.css, opts);
        if (map.text) {
            /**
             * @member {PreviousMap} - The input source map passed from
             *                         a compilation step before PostCSS
             *                         (for example, from Sass compiler).
             *
             * @example
             * root.source.input.map.consumer().sources //=> ['a.sass']
             */
            this.map = map;
            var file = map.consumer().file;
            if (!this.file && file) this.file = this.mapResolve(file);
        }

        if (!this.file) {
            sequence += 1;
            /**
             * @member {string} - The unique ID of the CSS source. It will be
             *                    created if `from` option is not provided
             *                    (because PostCSS does not know the file path).
             *
             * @example
             * const root = postcss.parse(css);
             * root.source.input.file //=> undefined
             * root.source.input.id   //=> "<input css 1>"
             */
            this.id = '<input css ' + sequence + '>';
        }
        if (this.map) this.map.file = this.from;
    }

    Input.prototype.error = function error(message, line, column) {
        var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        var result = void 0;
        var origin = this.origin(line, column);
        if (origin) {
            result = new _cssSyntaxError2.default(message, origin.line, origin.column, origin.source, origin.file, opts.plugin);
        } else {
            result = new _cssSyntaxError2.default(message, line, column, this.css, this.file, opts.plugin);
        }

        result.input = { line: line, column: column, source: this.css };
        if (this.file) result.input.file = this.file;

        return result;
    };

    /**
     * Reads the input source map and returns a symbol position
     * in the input source (e.g., in a Sass file that was compiled
     * to CSS before being passed to PostCSS).
     *
     * @param {number} line   - line in input CSS
     * @param {number} column - column in input CSS
     *
     * @return {filePosition} position in input source
     *
     * @example
     * root.source.input.origin(1, 1) //=> { file: 'a.css', line: 3, column: 1 }
     */


    Input.prototype.origin = function origin(line, column) {
        if (!this.map) return false;
        var consumer = this.map.consumer();

        var from = consumer.originalPositionFor({ line: line, column: column });
        if (!from.source) return false;

        var result = {
            file: this.mapResolve(from.source),
            line: from.line,
            column: from.column
        };

        var source = consumer.sourceContentFor(from.source);
        if (source) result.source = source;

        return result;
    };

    Input.prototype.mapResolve = function mapResolve(file) {
        if (/^\w+:\/\//.test(file)) {
            return file;
        } else {
            return _path2.default.resolve(this.map.consumer().sourceRoot || '.', file);
        }
    };

    /**
     * The CSS source identifier. Contains {@link Input#file} if the user
     * set the `from` option, or {@link Input#id} if they did not.
     * @type {string}
     *
     * @example
     * const root = postcss.parse(css, { from: 'a.css' });
     * root.source.input.from //=> "/home/ai/a.css"
     *
     * const root = postcss.parse(css);
     * root.source.input.from //=> "<input css 1>"
     */


    _createClass(Input, [{
        key: 'from',
        get: function get() {
            return this.file || this.id;
        }
    }]);

    return Input;
}();

exports.default = Input;

/**
 * @typedef  {object} filePosition
 * @property {string} file   - path to file
 * @property {number} line   - source line in file
 * @property {number} column - source column in file
 */

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(89)
var ieee754 = __webpack_require__(90)
var isArray = __webpack_require__(91)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = __webpack_require__(40).SourceMapGenerator;
exports.SourceMapConsumer = __webpack_require__(94).SourceMapConsumer;
exports.SourceNode = __webpack_require__(97).SourceNode;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = __webpack_require__(41);
var util = __webpack_require__(12);
var ArraySet = __webpack_require__(42).ArraySet;
var MappingList = __webpack_require__(93).MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = __webpack_require__(92);

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(12);
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.ArraySet = ArraySet;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultRaw = {
    colon: ': ',
    indent: '    ',
    beforeDecl: '\n',
    beforeRule: '\n',
    beforeOpen: ' ',
    beforeClose: '\n',
    beforeComment: '\n',
    after: '\n',
    emptyBody: '',
    commentLeft: ' ',
    commentRight: ' '
};

function capitalize(str) {
    return str[0].toUpperCase() + str.slice(1);
}

var Stringifier = function () {
    function Stringifier(builder) {
        _classCallCheck(this, Stringifier);

        this.builder = builder;
    }

    Stringifier.prototype.stringify = function stringify(node, semicolon) {
        this[node.type](node, semicolon);
    };

    Stringifier.prototype.root = function root(node) {
        this.body(node);
        if (node.raws.after) this.builder(node.raws.after);
    };

    Stringifier.prototype.comment = function comment(node) {
        var left = this.raw(node, 'left', 'commentLeft');
        var right = this.raw(node, 'right', 'commentRight');
        this.builder('/*' + left + node.text + right + '*/', node);
    };

    Stringifier.prototype.decl = function decl(node, semicolon) {
        var between = this.raw(node, 'between', 'colon');
        var string = node.prop + between + this.rawValue(node, 'value');

        if (node.important) {
            string += node.raws.important || ' !important';
        }

        if (semicolon) string += ';';
        this.builder(string, node);
    };

    Stringifier.prototype.rule = function rule(node) {
        this.block(node, this.rawValue(node, 'selector'));
        if (node.raws.ownSemicolon) {
            this.builder(node.raws.ownSemicolon, node, 'end');
        }
    };

    Stringifier.prototype.atrule = function atrule(node, semicolon) {
        var name = '@' + node.name;
        var params = node.params ? this.rawValue(node, 'params') : '';

        if (typeof node.raws.afterName !== 'undefined') {
            name += node.raws.afterName;
        } else if (params) {
            name += ' ';
        }

        if (node.nodes) {
            this.block(node, name + params);
        } else {
            var end = (node.raws.between || '') + (semicolon ? ';' : '');
            this.builder(name + params + end, node);
        }
    };

    Stringifier.prototype.body = function body(node) {
        var last = node.nodes.length - 1;
        while (last > 0) {
            if (node.nodes[last].type !== 'comment') break;
            last -= 1;
        }

        var semicolon = this.raw(node, 'semicolon');
        for (var i = 0; i < node.nodes.length; i++) {
            var child = node.nodes[i];
            var before = this.raw(child, 'before');
            if (before) this.builder(before);
            this.stringify(child, last !== i || semicolon);
        }
    };

    Stringifier.prototype.block = function block(node, start) {
        var between = this.raw(node, 'between', 'beforeOpen');
        this.builder(start + between + '{', node, 'start');

        var after = void 0;
        if (node.nodes && node.nodes.length) {
            this.body(node);
            after = this.raw(node, 'after');
        } else {
            after = this.raw(node, 'after', 'emptyBody');
        }

        if (after) this.builder(after);
        this.builder('}', node, 'end');
    };

    Stringifier.prototype.raw = function raw(node, own, detect) {
        var value = void 0;
        if (!detect) detect = own;

        // Already had
        if (own) {
            value = node.raws[own];
            if (typeof value !== 'undefined') return value;
        }

        var parent = node.parent;

        // Hack for first rule in CSS
        if (detect === 'before') {
            if (!parent || parent.type === 'root' && parent.first === node) {
                return '';
            }
        }

        // Floating child without parent
        if (!parent) return defaultRaw[detect];

        // Detect style by other nodes
        var root = node.root();
        if (!root.rawCache) root.rawCache = {};
        if (typeof root.rawCache[detect] !== 'undefined') {
            return root.rawCache[detect];
        }

        if (detect === 'before' || detect === 'after') {
            return this.beforeAfter(node, detect);
        } else {
            var method = 'raw' + capitalize(detect);
            if (this[method]) {
                value = this[method](root, node);
            } else {
                root.walk(function (i) {
                    value = i.raws[own];
                    if (typeof value !== 'undefined') return false;
                });
            }
        }

        if (typeof value === 'undefined') value = defaultRaw[detect];

        root.rawCache[detect] = value;
        return value;
    };

    Stringifier.prototype.rawSemicolon = function rawSemicolon(root) {
        var value = void 0;
        root.walk(function (i) {
            if (i.nodes && i.nodes.length && i.last.type === 'decl') {
                value = i.raws.semicolon;
                if (typeof value !== 'undefined') return false;
            }
        });
        return value;
    };

    Stringifier.prototype.rawEmptyBody = function rawEmptyBody(root) {
        var value = void 0;
        root.walk(function (i) {
            if (i.nodes && i.nodes.length === 0) {
                value = i.raws.after;
                if (typeof value !== 'undefined') return false;
            }
        });
        return value;
    };

    Stringifier.prototype.rawIndent = function rawIndent(root) {
        if (root.raws.indent) return root.raws.indent;
        var value = void 0;
        root.walk(function (i) {
            var p = i.parent;
            if (p && p !== root && p.parent && p.parent === root) {
                if (typeof i.raws.before !== 'undefined') {
                    var parts = i.raws.before.split('\n');
                    value = parts[parts.length - 1];
                    value = value.replace(/[^\s]/g, '');
                    return false;
                }
            }
        });
        return value;
    };

    Stringifier.prototype.rawBeforeComment = function rawBeforeComment(root, node) {
        var value = void 0;
        root.walkComments(function (i) {
            if (typeof i.raws.before !== 'undefined') {
                value = i.raws.before;
                if (value.indexOf('\n') !== -1) {
                    value = value.replace(/[^\n]+$/, '');
                }
                return false;
            }
        });
        if (typeof value === 'undefined') {
            value = this.raw(node, null, 'beforeDecl');
        } else if (value) {
            value = value.replace(/[^\s]/g, '');
        }
        return value;
    };

    Stringifier.prototype.rawBeforeDecl = function rawBeforeDecl(root, node) {
        var value = void 0;
        root.walkDecls(function (i) {
            if (typeof i.raws.before !== 'undefined') {
                value = i.raws.before;
                if (value.indexOf('\n') !== -1) {
                    value = value.replace(/[^\n]+$/, '');
                }
                return false;
            }
        });
        if (typeof value === 'undefined') {
            value = this.raw(node, null, 'beforeRule');
        } else if (value) {
            value = value.replace(/[^\s]/g, '');
        }
        return value;
    };

    Stringifier.prototype.rawBeforeRule = function rawBeforeRule(root) {
        var value = void 0;
        root.walk(function (i) {
            if (i.nodes && (i.parent !== root || root.first !== i)) {
                if (typeof i.raws.before !== 'undefined') {
                    value = i.raws.before;
                    if (value.indexOf('\n') !== -1) {
                        value = value.replace(/[^\n]+$/, '');
                    }
                    return false;
                }
            }
        });
        if (value) value = value.replace(/[^\s]/g, '');
        return value;
    };

    Stringifier.prototype.rawBeforeClose = function rawBeforeClose(root) {
        var value = void 0;
        root.walk(function (i) {
            if (i.nodes && i.nodes.length > 0) {
                if (typeof i.raws.after !== 'undefined') {
                    value = i.raws.after;
                    if (value.indexOf('\n') !== -1) {
                        value = value.replace(/[^\n]+$/, '');
                    }
                    return false;
                }
            }
        });
        if (value) value = value.replace(/[^\s]/g, '');
        return value;
    };

    Stringifier.prototype.rawBeforeOpen = function rawBeforeOpen(root) {
        var value = void 0;
        root.walk(function (i) {
            if (i.type !== 'decl') {
                value = i.raws.between;
                if (typeof value !== 'undefined') return false;
            }
        });
        return value;
    };

    Stringifier.prototype.rawColon = function rawColon(root) {
        var value = void 0;
        root.walkDecls(function (i) {
            if (typeof i.raws.between !== 'undefined') {
                value = i.raws.between.replace(/[^\s:]/g, '');
                return false;
            }
        });
        return value;
    };

    Stringifier.prototype.beforeAfter = function beforeAfter(node, detect) {
        var value = void 0;
        if (node.type === 'decl') {
            value = this.raw(node, null, 'beforeDecl');
        } else if (node.type === 'comment') {
            value = this.raw(node, null, 'beforeComment');
        } else if (detect === 'before') {
            value = this.raw(node, null, 'beforeRule');
        } else {
            value = this.raw(node, null, 'beforeClose');
        }

        var buf = node.parent;
        var depth = 0;
        while (buf && buf.type !== 'root') {
            depth += 1;
            buf = buf.parent;
        }

        if (value.indexOf('\n') !== -1) {
            var indent = this.raw(node, null, 'indent');
            if (indent.length) {
                for (var step = 0; step < depth; step++) {
                    value += indent;
                }
            }
        }

        return value;
    };

    Stringifier.prototype.rawValue = function rawValue(node, prop) {
        var value = node[prop];
        var raw = node.raws[prop];
        if (raw && raw.value === value) {
            return raw.raw;
        } else {
            return value;
        }
    };

    return Stringifier;
}();

exports.default = Stringifier;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _lazyResult = __webpack_require__(45);

var _lazyResult2 = _interopRequireDefault(_lazyResult);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Contains plugins to process CSS. Create one `Processor` instance,
 * initialize its plugins, and then use that instance on numerous CSS files.
 *
 * @example
 * const processor = postcss([autoprefixer, precss]);
 * processor.process(css1).then(result => console.log(result.css));
 * processor.process(css2).then(result => console.log(result.css));
 */
var Processor = function () {

  /**
   * @param {Array.<Plugin|pluginFunction>|Processor} plugins - PostCSS
   *        plugins. See {@link Processor#use} for plugin format.
   */
  function Processor() {
    var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, Processor);

    /**
     * @member {string} - Current PostCSS version.
     *
     * @example
     * if ( result.processor.version.split('.')[0] !== '6' ) {
     *   throw new Error('This plugin works only with PostCSS 6');
     * }
     */
    this.version = '6.0.14';
    /**
     * @member {pluginFunction[]} - Plugins added to this processor.
     *
     * @example
     * const processor = postcss([autoprefixer, precss]);
     * processor.plugins.length //=> 2
     */
    this.plugins = this.normalize(plugins);
  }

  /**
   * Adds a plugin to be used as a CSS processor.
   *
   * PostCSS plugin can be in 4 formats:
   * * A plugin created by {@link postcss.plugin} method.
   * * A function. PostCSS will pass the function a @{link Root}
   *   as the first argument and current {@link Result} instance
   *   as the second.
   * * An object with a `postcss` method. PostCSS will use that method
   *   as described in #2.
   * * Another {@link Processor} instance. PostCSS will copy plugins
   *   from that instance into this one.
   *
   * Plugins can also be added by passing them as arguments when creating
   * a `postcss` instance (see [`postcss(plugins)`]).
   *
   * Asynchronous plugins should return a `Promise` instance.
   *
   * @param {Plugin|pluginFunction|Processor} plugin - PostCSS plugin
   *                                                   or {@link Processor}
   *                                                   with plugins
   *
   * @example
   * const processor = postcss()
   *   .use(autoprefixer)
   *   .use(precss);
   *
   * @return {Processes} current processor to make methods chain
   */


  Processor.prototype.use = function use(plugin) {
    this.plugins = this.plugins.concat(this.normalize([plugin]));
    return this;
  };

  /**
   * Parses source CSS and returns a {@link LazyResult} Promise proxy.
   * Because some plugins can be asynchronous it doesn’t make
   * any transformations. Transformations will be applied
   * in the {@link LazyResult} methods.
   *
   * @param {string|toString|Result} css - String with input CSS or
   *                                       any object with a `toString()`
   *                                       method, like a Buffer.
   *                                       Optionally, send a {@link Result}
   *                                       instance and the processor will
   *                                       take the {@link Root} from it.
   * @param {processOptions} [opts]      - options
   *
   * @return {LazyResult} Promise proxy
   *
   * @example
   * processor.process(css, { from: 'a.css', to: 'a.out.css' })
   *   .then(result => {
   *      console.log(result.css);
   *   });
   */


  Processor.prototype.process = function process(css) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return new _lazyResult2.default(this, css, opts);
  };

  Processor.prototype.normalize = function normalize(plugins) {
    var normalized = [];
    for (var _iterator = plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var i = _ref;

      if (i.postcss) i = i.postcss;

      if ((typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object' && Array.isArray(i.plugins)) {
        normalized = normalized.concat(i.plugins);
      } else if (typeof i === 'function') {
        normalized.push(i);
      } else if ((typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object' && (i.parse || i.stringify)) {
        throw new Error('PostCSS syntaxes cannot be used as plugins. ' + 'Instead, please use one of the ' + 'syntax/parser/stringifier options as ' + 'outlined in your PostCSS ' + 'runner documentation.');
      } else {
        throw new Error(i + ' is not a PostCSS plugin');
      }
    }
    return normalized;
  };

  return Processor;
}();

exports.default = Processor;

/**
 * @callback builder
 * @param {string} part          - part of generated CSS connected to this node
 * @param {Node}   node          - AST node
 * @param {"start"|"end"} [type] - node’s part type
 */

/**
 * @callback parser
 *
 * @param {string|toString} css   - string with input CSS or any object
 *                                  with toString() method, like a Buffer
 * @param {processOptions} [opts] - options with only `from` and `map` keys
 *
 * @return {Root} PostCSS AST
 */

/**
 * @callback stringifier
 *
 * @param {Node} node       - start node for stringifing. Usually {@link Root}.
 * @param {builder} builder - function to concatenate CSS from node’s parts
 *                            or generate string and source map
 *
 * @return {void}
 */

/**
 * @typedef {object} syntax
 * @property {parser} parse          - function to generate AST by string
 * @property {stringifier} stringify - function to generate string by AST
 */

/**
 * @typedef {object} toString
 * @property {function} toString
 */

/**
 * @callback pluginFunction
 * @param {Root} root     - parsed input CSS
 * @param {Result} result - result to set warnings or check other plugins
 */

/**
 * @typedef {object} Plugin
 * @property {function} postcss - PostCSS plugin function
 */

/**
 * @typedef {object} processOptions
 * @property {string} from             - the path of the CSS source file.
 *                                       You should always set `from`,
 *                                       because it is used in source map
 *                                       generation and syntax error messages.
 * @property {string} to               - the path where you’ll put the output
 *                                       CSS file. You should always set `to`
 *                                       to generate correct source maps.
 * @property {parser} parser           - function to generate AST by string
 * @property {stringifier} stringifier - class to generate string by AST
 * @property {syntax} syntax           - object with `parse` and `stringify`
 * @property {object} map              - source map options
 * @property {boolean} map.inline                    - does source map should
 *                                                     be embedded in the output
 *                                                     CSS as a base64-encoded
 *                                                     comment
 * @property {string|object|false|function} map.prev - source map content
 *                                                     from a previous
 *                                                     processing step
 *                                                     (for example, Sass).
 *                                                     PostCSS will try to find
 *                                                     previous map
 *                                                     automatically, so you
 *                                                     could disable it by
 *                                                     `false` value.
 * @property {boolean} map.sourcesContent            - does PostCSS should set
 *                                                     the origin content to map
 * @property {string|false} map.annotation           - does PostCSS should set
 *                                                     annotation comment to map
 * @property {string} map.from                       - override `from` in map’s
 *                                                     `sources`
 */

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _mapGenerator = __webpack_require__(100);

var _mapGenerator2 = _interopRequireDefault(_mapGenerator);

var _stringify2 = __webpack_require__(21);

var _stringify3 = _interopRequireDefault(_stringify2);

var _result = __webpack_require__(101);

var _result2 = _interopRequireDefault(_result);

var _parse = __webpack_require__(22);

var _parse2 = _interopRequireDefault(_parse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function isPromise(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && typeof obj.then === 'function';
}

/**
 * A Promise proxy for the result of PostCSS transformations.
 *
 * A `LazyResult` instance is returned by {@link Processor#process}.
 *
 * @example
 * const lazy = postcss([cssnext]).process(css);
 */

var LazyResult = function () {
    function LazyResult(processor, css, opts) {
        _classCallCheck(this, LazyResult);

        this.stringified = false;
        this.processed = false;

        var root = void 0;
        if ((typeof css === 'undefined' ? 'undefined' : _typeof(css)) === 'object' && css.type === 'root') {
            root = css;
        } else if (css instanceof LazyResult || css instanceof _result2.default) {
            root = css.root;
            if (css.map) {
                if (typeof opts.map === 'undefined') opts.map = {};
                if (!opts.map.inline) opts.map.inline = false;
                opts.map.prev = css.map;
            }
        } else {
            var parser = _parse2.default;
            if (opts.syntax) parser = opts.syntax.parse;
            if (opts.parser) parser = opts.parser;
            if (parser.parse) parser = parser.parse;

            try {
                root = parser(css, opts);
            } catch (error) {
                this.error = error;
            }
        }

        this.result = new _result2.default(processor, root, opts);
    }

    /**
     * Returns a {@link Processor} instance, which will be used
     * for CSS transformations.
     * @type {Processor}
     */


    /**
     * Processes input CSS through synchronous plugins
     * and calls {@link Result#warnings()}.
     *
     * @return {Warning[]} warnings from plugins
     */
    LazyResult.prototype.warnings = function warnings() {
        return this.sync().warnings();
    };

    /**
     * Alias for the {@link LazyResult#css} property.
     *
     * @example
     * lazy + '' === lazy.css;
     *
     * @return {string} output CSS
     */


    LazyResult.prototype.toString = function toString() {
        return this.css;
    };

    /**
     * Processes input CSS through synchronous and asynchronous plugins
     * and calls `onFulfilled` with a Result instance. If a plugin throws
     * an error, the `onRejected` callback will be executed.
     *
     * It implements standard Promise API.
     *
     * @param {onFulfilled} onFulfilled - callback will be executed
     *                                    when all plugins will finish work
     * @param {onRejected}  onRejected  - callback will be executed on any error
     *
     * @return {Promise} Promise API to make queue
     *
     * @example
     * postcss([cssnext]).process(css).then(result => {
     *   console.log(result.css);
     * });
     */


    LazyResult.prototype.then = function then(onFulfilled, onRejected) {
        return this.async().then(onFulfilled, onRejected);
    };

    /**
     * Processes input CSS through synchronous and asynchronous plugins
     * and calls onRejected for each error thrown in any plugin.
     *
     * It implements standard Promise API.
     *
     * @param {onRejected} onRejected - callback will be executed on any error
     *
     * @return {Promise} Promise API to make queue
     *
     * @example
     * postcss([cssnext]).process(css).then(result => {
     *   console.log(result.css);
     * }).catch(error => {
     *   console.error(error);
     * });
     */


    LazyResult.prototype.catch = function _catch(onRejected) {
        return this.async().catch(onRejected);
    };

    LazyResult.prototype.handleError = function handleError(error, plugin) {
        try {
            this.error = error;
            if (error.name === 'CssSyntaxError' && !error.plugin) {
                error.plugin = plugin.postcssPlugin;
                error.setMessage();
            } else if (plugin.postcssVersion) {
                var pluginName = plugin.postcssPlugin;
                var pluginVer = plugin.postcssVersion;
                var runtimeVer = this.result.processor.version;
                var a = pluginVer.split('.');
                var b = runtimeVer.split('.');

                if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {
                    console.error('Unknown error from PostCSS plugin. ' + 'Your current PostCSS version ' + 'is ' + runtimeVer + ', but ' + pluginName + ' ' + 'uses ' + pluginVer + '. Perhaps this is ' + 'the source of the error below.');
                }
            }
        } catch (err) {
            if (console && console.error) console.error(err);
        }
    };

    LazyResult.prototype.asyncTick = function asyncTick(resolve, reject) {
        var _this = this;

        if (this.plugin >= this.processor.plugins.length) {
            this.processed = true;
            return resolve();
        }

        try {
            var plugin = this.processor.plugins[this.plugin];
            var promise = this.run(plugin);
            this.plugin += 1;

            if (isPromise(promise)) {
                promise.then(function () {
                    _this.asyncTick(resolve, reject);
                }).catch(function (error) {
                    _this.handleError(error, plugin);
                    _this.processed = true;
                    reject(error);
                });
            } else {
                this.asyncTick(resolve, reject);
            }
        } catch (error) {
            this.processed = true;
            reject(error);
        }
    };

    LazyResult.prototype.async = function async() {
        var _this2 = this;

        if (this.processed) {
            return new Promise(function (resolve, reject) {
                if (_this2.error) {
                    reject(_this2.error);
                } else {
                    resolve(_this2.stringify());
                }
            });
        }
        if (this.processing) {
            return this.processing;
        }

        this.processing = new Promise(function (resolve, reject) {
            if (_this2.error) return reject(_this2.error);
            _this2.plugin = 0;
            _this2.asyncTick(resolve, reject);
        }).then(function () {
            _this2.processed = true;
            return _this2.stringify();
        });

        return this.processing;
    };

    LazyResult.prototype.sync = function sync() {
        if (this.processed) return this.result;
        this.processed = true;

        if (this.processing) {
            throw new Error('Use process(css).then(cb) to work with async plugins');
        }

        if (this.error) throw this.error;

        for (var _iterator = this.result.processor.plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var plugin = _ref;

            var promise = this.run(plugin);
            if (isPromise(promise)) {
                throw new Error('Use process(css).then(cb) to work with async plugins');
            }
        }

        return this.result;
    };

    LazyResult.prototype.run = function run(plugin) {
        this.result.lastPlugin = plugin;

        try {
            return plugin(this.result.root, this.result);
        } catch (error) {
            this.handleError(error, plugin);
            throw error;
        }
    };

    LazyResult.prototype.stringify = function stringify() {
        if (this.stringified) return this.result;
        this.stringified = true;

        this.sync();

        var opts = this.result.opts;
        var str = _stringify3.default;
        if (opts.syntax) str = opts.syntax.stringify;
        if (opts.stringifier) str = opts.stringifier;
        if (str.stringify) str = str.stringify;

        var map = new _mapGenerator2.default(str, this.result.root, this.result.opts);
        var data = map.generate();
        this.result.css = data[0];
        this.result.map = data[1];

        return this.result;
    };

    _createClass(LazyResult, [{
        key: 'processor',
        get: function get() {
            return this.result.processor;
        }

        /**
         * Options from the {@link Processor#process} call.
         * @type {processOptions}
         */

    }, {
        key: 'opts',
        get: function get() {
            return this.result.opts;
        }

        /**
         * Processes input CSS through synchronous plugins, converts `Root`
         * to a CSS string and returns {@link Result#css}.
         *
         * This property will only work with synchronous plugins.
         * If the processor contains any asynchronous plugins
         * it will throw an error. This is why this method is only
         * for debug purpose, you should always use {@link LazyResult#then}.
         *
         * @type {string}
         * @see Result#css
         */

    }, {
        key: 'css',
        get: function get() {
            return this.stringify().css;
        }

        /**
         * An alias for the `css` property. Use it with syntaxes
         * that generate non-CSS output.
         *
         * This property will only work with synchronous plugins.
         * If the processor contains any asynchronous plugins
         * it will throw an error. This is why this method is only
         * for debug purpose, you should always use {@link LazyResult#then}.
         *
         * @type {string}
         * @see Result#content
         */

    }, {
        key: 'content',
        get: function get() {
            return this.stringify().content;
        }

        /**
         * Processes input CSS through synchronous plugins
         * and returns {@link Result#map}.
         *
         * This property will only work with synchronous plugins.
         * If the processor contains any asynchronous plugins
         * it will throw an error. This is why this method is only
         * for debug purpose, you should always use {@link LazyResult#then}.
         *
         * @type {SourceMapGenerator}
         * @see Result#map
         */

    }, {
        key: 'map',
        get: function get() {
            return this.stringify().map;
        }

        /**
         * Processes input CSS through synchronous plugins
         * and returns {@link Result#root}.
         *
         * This property will only work with synchronous plugins. If the processor
         * contains any asynchronous plugins it will throw an error.
         *
         * This is why this method is only for debug purpose,
         * you should always use {@link LazyResult#then}.
         *
         * @type {Root}
         * @see Result#root
         */

    }, {
        key: 'root',
        get: function get() {
            return this.sync().root;
        }

        /**
         * Processes input CSS through synchronous plugins
         * and returns {@link Result#messages}.
         *
         * This property will only work with synchronous plugins. If the processor
         * contains any asynchronous plugins it will throw an error.
         *
         * This is why this method is only for debug purpose,
         * you should always use {@link LazyResult#then}.
         *
         * @type {Message[]}
         * @see Result#messages
         */

    }, {
        key: 'messages',
        get: function get() {
            return this.sync().messages;
        }
    }]);

    return LazyResult;
}();

exports.default = LazyResult;

/**
 * @callback onFulfilled
 * @param {Result} result
 */

/**
 * @callback onRejected
 * @param {Error} error
 */

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
/**
 * Contains helpers for safely splitting lists of CSS values,
 * preserving parentheses and quotes.
 *
 * @example
 * const list = postcss.list;
 *
 * @namespace list
 */
var list = {
    split: function split(string, separators, last) {
        var array = [];
        var current = '';
        var split = false;

        var func = 0;
        var quote = false;
        var escape = false;

        for (var i = 0; i < string.length; i++) {
            var letter = string[i];

            if (quote) {
                if (escape) {
                    escape = false;
                } else if (letter === '\\') {
                    escape = true;
                } else if (letter === quote) {
                    quote = false;
                }
            } else if (letter === '"' || letter === '\'') {
                quote = letter;
            } else if (letter === '(') {
                func += 1;
            } else if (letter === ')') {
                if (func > 0) func -= 1;
            } else if (func === 0) {
                if (separators.indexOf(letter) !== -1) split = true;
            }

            if (split) {
                if (current !== '') array.push(current.trim());
                current = '';
                split = false;
            } else {
                current += letter;
            }
        }

        if (last || current !== '') array.push(current.trim());
        return array;
    },


    /**
     * Safely splits space-separated values (such as those for `background`,
     * `border-radius`, and other shorthand properties).
     *
     * @param {string} string - space-separated values
     *
     * @return {string[]} split values
     *
     * @example
     * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']
     */
    space: function space(string) {
        var spaces = [' ', '\n', '\t'];
        return list.split(string, spaces);
    },


    /**
     * Safely splits comma-separated values (such as those for `transition-*`
     * and `background` properties).
     *
     * @param {string} string - comma-separated values
     *
     * @return {string[]} split values
     *
     * @example
     * postcss.list.comma('black, linear-gradient(white, black)')
     * //=> ['black', 'linear-gradient(white, black)']
     */
    comma: function comma(string) {
        var comma = ',';
        return list.split(string, [comma], true);
    }
};

exports.default = list;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpc3QuZXM2Il0sIm5hbWVzIjpbImxpc3QiLCJzcGxpdCIsInN0cmluZyIsInNlcGFyYXRvcnMiLCJsYXN0IiwiYXJyYXkiLCJjdXJyZW50IiwiZnVuYyIsInF1b3RlIiwiZXNjYXBlIiwiaSIsImxlbmd0aCIsImxldHRlciIsImluZGV4T2YiLCJwdXNoIiwidHJpbSIsInNwYWNlIiwic3BhY2VzIiwiY29tbWEiXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7Ozs7Ozs7QUFTQSxJQUFJQSxPQUFPO0FBRVBDLFNBRk8saUJBRURDLE1BRkMsRUFFT0MsVUFGUCxFQUVtQkMsSUFGbkIsRUFFeUI7QUFDNUIsWUFBSUMsUUFBVSxFQUFkO0FBQ0EsWUFBSUMsVUFBVSxFQUFkO0FBQ0EsWUFBSUwsUUFBVSxLQUFkOztBQUVBLFlBQUlNLE9BQVUsQ0FBZDtBQUNBLFlBQUlDLFFBQVUsS0FBZDtBQUNBLFlBQUlDLFNBQVUsS0FBZDs7QUFFQSxhQUFNLElBQUlDLElBQUksQ0FBZCxFQUFpQkEsSUFBSVIsT0FBT1MsTUFBNUIsRUFBb0NELEdBQXBDLEVBQTBDO0FBQ3RDLGdCQUFJRSxTQUFTVixPQUFPUSxDQUFQLENBQWI7O0FBRUEsZ0JBQUtGLEtBQUwsRUFBYTtBQUNULG9CQUFLQyxNQUFMLEVBQWM7QUFDVkEsNkJBQVMsS0FBVDtBQUNILGlCQUZELE1BRU8sSUFBS0csV0FBVyxJQUFoQixFQUF1QjtBQUMxQkgsNkJBQVMsSUFBVDtBQUNILGlCQUZNLE1BRUEsSUFBS0csV0FBV0osS0FBaEIsRUFBd0I7QUFDM0JBLDRCQUFRLEtBQVI7QUFDSDtBQUNKLGFBUkQsTUFRTyxJQUFLSSxXQUFXLEdBQVgsSUFBa0JBLFdBQVcsSUFBbEMsRUFBeUM7QUFDNUNKLHdCQUFRSSxNQUFSO0FBQ0gsYUFGTSxNQUVBLElBQUtBLFdBQVcsR0FBaEIsRUFBc0I7QUFDekJMLHdCQUFRLENBQVI7QUFDSCxhQUZNLE1BRUEsSUFBS0ssV0FBVyxHQUFoQixFQUFzQjtBQUN6QixvQkFBS0wsT0FBTyxDQUFaLEVBQWdCQSxRQUFRLENBQVI7QUFDbkIsYUFGTSxNQUVBLElBQUtBLFNBQVMsQ0FBZCxFQUFrQjtBQUNyQixvQkFBS0osV0FBV1UsT0FBWCxDQUFtQkQsTUFBbkIsTUFBK0IsQ0FBQyxDQUFyQyxFQUF5Q1gsUUFBUSxJQUFSO0FBQzVDOztBQUVELGdCQUFLQSxLQUFMLEVBQWE7QUFDVCxvQkFBS0ssWUFBWSxFQUFqQixFQUFzQkQsTUFBTVMsSUFBTixDQUFXUixRQUFRUyxJQUFSLEVBQVg7QUFDdEJULDBCQUFVLEVBQVY7QUFDQUwsd0JBQVUsS0FBVjtBQUNILGFBSkQsTUFJTztBQUNISywyQkFBV00sTUFBWDtBQUNIO0FBQ0o7O0FBRUQsWUFBS1IsUUFBUUUsWUFBWSxFQUF6QixFQUE4QkQsTUFBTVMsSUFBTixDQUFXUixRQUFRUyxJQUFSLEVBQVg7QUFDOUIsZUFBT1YsS0FBUDtBQUNILEtBM0NNOzs7QUE2Q1A7Ozs7Ozs7Ozs7O0FBV0FXLFNBeERPLGlCQXdERGQsTUF4REMsRUF3RE87QUFDVixZQUFJZSxTQUFTLENBQUMsR0FBRCxFQUFNLElBQU4sRUFBWSxJQUFaLENBQWI7QUFDQSxlQUFPakIsS0FBS0MsS0FBTCxDQUFXQyxNQUFYLEVBQW1CZSxNQUFuQixDQUFQO0FBQ0gsS0EzRE07OztBQTZEUDs7Ozs7Ozs7Ozs7O0FBWUFDLFNBekVPLGlCQXlFRGhCLE1BekVDLEVBeUVPO0FBQ1YsWUFBSWdCLFFBQVEsR0FBWjtBQUNBLGVBQU9sQixLQUFLQyxLQUFMLENBQVdDLE1BQVgsRUFBbUIsQ0FBQ2dCLEtBQUQsQ0FBbkIsRUFBNEIsSUFBNUIsQ0FBUDtBQUNIO0FBNUVNLENBQVg7O2tCQWdGZWxCLEkiLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udGFpbnMgaGVscGVycyBmb3Igc2FmZWx5IHNwbGl0dGluZyBsaXN0cyBvZiBDU1MgdmFsdWVzLFxuICogcHJlc2VydmluZyBwYXJlbnRoZXNlcyBhbmQgcXVvdGVzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBsaXN0ID0gcG9zdGNzcy5saXN0O1xuICpcbiAqIEBuYW1lc3BhY2UgbGlzdFxuICovXG5sZXQgbGlzdCA9IHtcblxuICAgIHNwbGl0KHN0cmluZywgc2VwYXJhdG9ycywgbGFzdCkge1xuICAgICAgICBsZXQgYXJyYXkgICA9IFtdO1xuICAgICAgICBsZXQgY3VycmVudCA9ICcnO1xuICAgICAgICBsZXQgc3BsaXQgICA9IGZhbHNlO1xuXG4gICAgICAgIGxldCBmdW5jICAgID0gMDtcbiAgICAgICAgbGV0IHF1b3RlICAgPSBmYWxzZTtcbiAgICAgICAgbGV0IGVzY2FwZSAgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICBsZXQgbGV0dGVyID0gc3RyaW5nW2ldO1xuXG4gICAgICAgICAgICBpZiAoIHF1b3RlICkge1xuICAgICAgICAgICAgICAgIGlmICggZXNjYXBlICkge1xuICAgICAgICAgICAgICAgICAgICBlc2NhcGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBsZXR0ZXIgPT09ICdcXFxcJyApIHtcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBsZXR0ZXIgPT09IHF1b3RlICkge1xuICAgICAgICAgICAgICAgICAgICBxdW90ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGxldHRlciA9PT0gJ1wiJyB8fCBsZXR0ZXIgPT09ICdcXCcnICkge1xuICAgICAgICAgICAgICAgIHF1b3RlID0gbGV0dGVyO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggbGV0dGVyID09PSAnKCcgKSB7XG4gICAgICAgICAgICAgICAgZnVuYyArPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggbGV0dGVyID09PSAnKScgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBmdW5jID4gMCApIGZ1bmMgLT0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGZ1bmMgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBzZXBhcmF0b3JzLmluZGV4T2YobGV0dGVyKSAhPT0gLTEgKSBzcGxpdCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggc3BsaXQgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBjdXJyZW50ICE9PSAnJyApIGFycmF5LnB1c2goY3VycmVudC50cmltKCkpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSAnJztcbiAgICAgICAgICAgICAgICBzcGxpdCAgID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgKz0gbGV0dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBsYXN0IHx8IGN1cnJlbnQgIT09ICcnICkgYXJyYXkucHVzaChjdXJyZW50LnRyaW0oKSk7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2FmZWx5IHNwbGl0cyBzcGFjZS1zZXBhcmF0ZWQgdmFsdWVzIChzdWNoIGFzIHRob3NlIGZvciBgYmFja2dyb3VuZGAsXG4gICAgICogYGJvcmRlci1yYWRpdXNgLCBhbmQgb3RoZXIgc2hvcnRoYW5kIHByb3BlcnRpZXMpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyAtIHNwYWNlLXNlcGFyYXRlZCB2YWx1ZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ1tdfSBzcGxpdCB2YWx1ZXNcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogcG9zdGNzcy5saXN0LnNwYWNlKCcxcHggY2FsYygxMCUgKyAxcHgpJykgLy89PiBbJzFweCcsICdjYWxjKDEwJSArIDFweCknXVxuICAgICAqL1xuICAgIHNwYWNlKHN0cmluZykge1xuICAgICAgICBsZXQgc3BhY2VzID0gWycgJywgJ1xcbicsICdcXHQnXTtcbiAgICAgICAgcmV0dXJuIGxpc3Quc3BsaXQoc3RyaW5nLCBzcGFjZXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTYWZlbHkgc3BsaXRzIGNvbW1hLXNlcGFyYXRlZCB2YWx1ZXMgKHN1Y2ggYXMgdGhvc2UgZm9yIGB0cmFuc2l0aW9uLSpgXG4gICAgICogYW5kIGBiYWNrZ3JvdW5kYCBwcm9wZXJ0aWVzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgLSBjb21tYS1zZXBhcmF0ZWQgdmFsdWVzXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmdbXX0gc3BsaXQgdmFsdWVzXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBvc3Rjc3MubGlzdC5jb21tYSgnYmxhY2ssIGxpbmVhci1ncmFkaWVudCh3aGl0ZSwgYmxhY2spJylcbiAgICAgKiAvLz0+IFsnYmxhY2snLCAnbGluZWFyLWdyYWRpZW50KHdoaXRlLCBibGFjayknXVxuICAgICAqL1xuICAgIGNvbW1hKHN0cmluZykge1xuICAgICAgICBsZXQgY29tbWEgPSAnLCc7XG4gICAgICAgIHJldHVybiBsaXN0LnNwbGl0KHN0cmluZywgW2NvbW1hXSwgdHJ1ZSk7XG4gICAgfVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBsaXN0O1xuIl19


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _container = __webpack_require__(26);

var _container2 = _interopRequireDefault(_container);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Root = function (_Container) {
    _inherits(Root, _Container);

    function Root(opts) {
        _classCallCheck(this, Root);

        var _this = _possibleConstructorReturn(this, _Container.call(this, opts));

        _this.type = _types.ROOT;
        return _this;
    }

    Root.prototype.toString = function toString() {
        var str = this.reduce(function (memo, selector) {
            var sel = String(selector);
            return sel ? memo + sel + ',' : '';
        }, '').slice(0, -1);
        return this.trailingComma ? str + ',' : str;
    };

    Root.prototype.error = function error(message, options) {
        if (this._error) {
            return this._error(message, options);
        } else {
            return new Error(message);
        }
    };

    _createClass(Root, [{
        key: 'errorGenerator',
        set: function set(handler) {
            this._error = handler;
        }
    }]);

    return Root;
}(_container2.default);

exports.default = Root;
module.exports = exports['default'];

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _container = __webpack_require__(26);

var _container2 = _interopRequireDefault(_container);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Selector = function (_Container) {
    _inherits(Selector, _Container);

    function Selector(opts) {
        _classCallCheck(this, Selector);

        var _this = _possibleConstructorReturn(this, _Container.call(this, opts));

        _this.type = _types.SELECTOR;
        return _this;
    }

    return Selector;
}(_container2.default);

exports.default = Selector;
module.exports = exports['default'];

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _namespace = __webpack_require__(13);

var _namespace2 = _interopRequireDefault(_namespace);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClassName = function (_Namespace) {
    _inherits(ClassName, _Namespace);

    function ClassName(opts) {
        _classCallCheck(this, ClassName);

        var _this = _possibleConstructorReturn(this, _Namespace.call(this, opts));

        _this.type = _types.CLASS;
        return _this;
    }

    ClassName.prototype.toString = function toString() {
        return [this.spaces.before, this.ns, String('.' + this.value), this.spaces.after].join('');
    };

    return ClassName;
}(_namespace2.default);

exports.default = ClassName;
module.exports = exports['default'];

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _node = __webpack_require__(8);

var _node2 = _interopRequireDefault(_node);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Comment = function (_Node) {
    _inherits(Comment, _Node);

    function Comment(opts) {
        _classCallCheck(this, Comment);

        var _this = _possibleConstructorReturn(this, _Node.call(this, opts));

        _this.type = _types.COMMENT;
        return _this;
    }

    return Comment;
}(_node2.default);

exports.default = Comment;
module.exports = exports['default'];

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _namespace = __webpack_require__(13);

var _namespace2 = _interopRequireDefault(_namespace);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ID = function (_Namespace) {
    _inherits(ID, _Namespace);

    function ID(opts) {
        _classCallCheck(this, ID);

        var _this = _possibleConstructorReturn(this, _Namespace.call(this, opts));

        _this.type = _types.ID;
        return _this;
    }

    ID.prototype.toString = function toString() {
        return [this.spaces.before, this.ns, String('#' + this.value), this.spaces.after].join('');
    };

    return ID;
}(_namespace2.default);

exports.default = ID;
module.exports = exports['default'];

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _namespace = __webpack_require__(13);

var _namespace2 = _interopRequireDefault(_namespace);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tag = function (_Namespace) {
    _inherits(Tag, _Namespace);

    function Tag(opts) {
        _classCallCheck(this, Tag);

        var _this = _possibleConstructorReturn(this, _Namespace.call(this, opts));

        _this.type = _types.TAG;
        return _this;
    }

    return Tag;
}(_namespace2.default);

exports.default = Tag;
module.exports = exports['default'];

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _node = __webpack_require__(8);

var _node2 = _interopRequireDefault(_node);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var String = function (_Node) {
    _inherits(String, _Node);

    function String(opts) {
        _classCallCheck(this, String);

        var _this = _possibleConstructorReturn(this, _Node.call(this, opts));

        _this.type = _types.STRING;
        return _this;
    }

    return String;
}(_node2.default);

exports.default = String;
module.exports = exports['default'];

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _container = __webpack_require__(26);

var _container2 = _interopRequireDefault(_container);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pseudo = function (_Container) {
    _inherits(Pseudo, _Container);

    function Pseudo(opts) {
        _classCallCheck(this, Pseudo);

        var _this = _possibleConstructorReturn(this, _Container.call(this, opts));

        _this.type = _types.PSEUDO;
        return _this;
    }

    Pseudo.prototype.toString = function toString() {
        var params = this.length ? '(' + this.map(String).join(',') + ')' : '';
        return [this.spaces.before, String(this.value), params, this.spaces.after].join('');
    };

    return Pseudo;
}(_container2.default);

exports.default = Pseudo;
module.exports = exports['default'];

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _namespace = __webpack_require__(13);

var _namespace2 = _interopRequireDefault(_namespace);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Attribute = function (_Namespace) {
    _inherits(Attribute, _Namespace);

    function Attribute() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Attribute);

        var _this = _possibleConstructorReturn(this, _Namespace.call(this, opts));

        _this.type = _types.ATTRIBUTE;
        _this.raws = _this.raws || {};
        _this._constructed = true;
        return _this;
    }

    Attribute.prototype._spacesFor = function _spacesFor(name) {
        var attrSpaces = { before: '', after: '' };
        var spaces = this.spaces[name] || {};
        var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};
        return Object.assign(attrSpaces, spaces, rawSpaces);
    };

    Attribute.prototype._valueFor = function _valueFor(name) {
        return this.raws[name] || this[name];
    };

    Attribute.prototype._stringFor = function _stringFor(name) {
        var spaceName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : name;
        var concat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultAttrConcat;

        var attrSpaces = this._spacesFor(spaceName);
        return concat(this._valueFor(name), attrSpaces);
    };

    /**
     * returns the offset of the attribute part specified relative to the
     * start of the node of the output string.
     *
     * * "ns" - alias for "namespace"
     * * "namespace" - the namespace if it exists.
     * * "attribute" - the attribute name
     * * "attributeNS" - the start of the attribute or its namespace
     * * "operator" - the match operator of the attribute
     * * "value" - The value (string or identifier)
     * * "insensitive" - the case insensitivity flag;
     * @param part One of the possible values inside an attribute.
     * @returns -1 if the name is invalid or the value doesn't exist in this attribute.
     */


    Attribute.prototype.offsetOf = function offsetOf(name) {
        var count = 1;
        var attributeSpaces = this._spacesFor("attribute");
        count += attributeSpaces.before.length;
        if (name === "namespace" || name === "ns") {
            return this.namespace ? count : -1;
        }
        if (name === "attributeNS") {
            return count;
        }

        count += this.namespaceString.length;
        if (this.namespace) {
            count += 1;
        }
        if (name === "attribute") {
            return count;
        }

        count += this._valueFor("attribute").length;
        count += attributeSpaces.after.length;
        var operatorSpaces = this._spacesFor("operator");
        count += operatorSpaces.before.length;
        var operator = this._valueFor("operator");
        if (name === "operator") {
            return operator ? count : -1;
        }

        count += operator.length;
        count += operatorSpaces.after.length;
        var valueSpaces = this._spacesFor("value");
        count += valueSpaces.before.length;
        var value = this._valueFor("value");
        if (name === "value") {
            return value ? count : -1;
        }

        count += value.length;
        count += valueSpaces.after.length;
        var insensitiveSpaces = this._spacesFor("insensitive");
        count += insensitiveSpaces.before.length;
        if (name === "insensitive") {
            return this.insensitive ? count : -1;
        }
        return -1;
    };

    Attribute.prototype.toString = function toString() {
        var _this2 = this;

        var selector = [this.spaces.before, '['];

        selector.push(this._stringFor('qualifiedAttribute', 'attribute'));

        if (this.operator && this.value) {
            selector.push(this._stringFor('operator'));
            selector.push(this._stringFor('value'));
            selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {
                if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {
                    attrSpaces.before = " ";
                }
                return defaultAttrConcat(attrValue, attrSpaces);
            }));
        }

        selector.push(']');
        selector.push(this.spaces.after);
        return selector.join('');
    };

    _createClass(Attribute, [{
        key: 'qualifiedAttribute',
        get: function get() {
            return this.qualifiedName(this.raws.attribute || this.attribute);
        }
    }, {
        key: 'insensitiveFlag',
        get: function get() {
            return this.insensitive ? 'i' : '';
        }
    }, {
        key: 'value',
        get: function get() {
            return this._value;
        },
        set: function set(v) {
            this._value = v;
            if (this._constructed) {
                delete this.raws.value;
            }
        }
    }, {
        key: 'namespace',
        get: function get() {
            return this._namespace;
        },
        set: function set(v) {
            this._namespace = v;
            if (this._constructed) {
                delete this.raws.namespace;
            }
        }
    }, {
        key: 'attribute',
        get: function get() {
            return this._attribute;
        },
        set: function set(v) {
            this._attribute = v;
            if (this._constructed) {
                delete this.raws.attibute;
            }
        }
    }]);

    return Attribute;
}(_namespace2.default);

exports.default = Attribute;


function defaultAttrConcat(attrValue, attrSpaces) {
    return '' + attrSpaces.before + attrValue + attrSpaces.after;
}
module.exports = exports['default'];

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _namespace = __webpack_require__(13);

var _namespace2 = _interopRequireDefault(_namespace);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Universal = function (_Namespace) {
    _inherits(Universal, _Namespace);

    function Universal(opts) {
        _classCallCheck(this, Universal);

        var _this = _possibleConstructorReturn(this, _Namespace.call(this, opts));

        _this.type = _types.UNIVERSAL;
        _this.value = '*';
        return _this;
    }

    return Universal;
}(_namespace2.default);

exports.default = Universal;
module.exports = exports['default'];

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _node = __webpack_require__(8);

var _node2 = _interopRequireDefault(_node);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Combinator = function (_Node) {
    _inherits(Combinator, _Node);

    function Combinator(opts) {
        _classCallCheck(this, Combinator);

        var _this = _possibleConstructorReturn(this, _Node.call(this, opts));

        _this.type = _types.COMBINATOR;
        return _this;
    }

    return Combinator;
}(_node2.default);

exports.default = Combinator;
module.exports = exports['default'];

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _node = __webpack_require__(8);

var _node2 = _interopRequireDefault(_node);

var _types = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Nesting = function (_Node) {
    _inherits(Nesting, _Node);

    function Nesting(opts) {
        _classCallCheck(this, Nesting);

        var _this = _possibleConstructorReturn(this, _Node.call(this, opts));

        _this.type = _types.NESTING;
        _this.value = '&';
        return _this;
    }

    return Nesting;
}(_node2.default);

exports.default = Nesting;
module.exports = exports['default'];

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var ampersand = exports.ampersand = '&'.charCodeAt(0);
var asterisk = exports.asterisk = '*'.charCodeAt(0);
var at = exports.at = '@'.charCodeAt(0);
var comma = exports.comma = ','.charCodeAt(0);
var colon = exports.colon = ':'.charCodeAt(0);
var semicolon = exports.semicolon = ';'.charCodeAt(0);
var openParenthesis = exports.openParenthesis = '('.charCodeAt(0);
var closeParenthesis = exports.closeParenthesis = ')'.charCodeAt(0);
var openSquare = exports.openSquare = '['.charCodeAt(0);
var closeSquare = exports.closeSquare = ']'.charCodeAt(0);
var dollar = exports.dollar = '$'.charCodeAt(0);
var tilde = exports.tilde = '~'.charCodeAt(0);
var caret = exports.caret = '^'.charCodeAt(0);
var plus = exports.plus = '+'.charCodeAt(0);
var equals = exports.equals = '='.charCodeAt(0);
var pipe = exports.pipe = '|'.charCodeAt(0);
var greaterThan = exports.greaterThan = '>'.charCodeAt(0);
var space = exports.space = ' '.charCodeAt(0);
var singleQuote = exports.singleQuote = '\''.charCodeAt(0);
var doubleQuote = exports.doubleQuote = '"'.charCodeAt(0);
var slash = exports.slash = '/'.charCodeAt(0);

var backslash = exports.backslash = 92;
var cr = exports.cr = 13;
var feed = exports.feed = 12;
var newline = exports.newline = 10;
var tab = exports.tab = 9;

// Expose aliases primarily for readability.
var str = exports.str = singleQuote;

// No good single character representation!
var comment = exports.comment = -1;
var word = exports.word = -2;
var combinator = exports.combinator = -3;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preact = __webpack_require__(1);

var _preactRedux = __webpack_require__(6);

var _redux = __webpack_require__(5);

var _reducers = __webpack_require__(10);

var _reducers2 = _interopRequireDefault(_reducers);

var _actions = __webpack_require__(11);

var actions = _interopRequireWildcard(_actions);

var _Browsers = __webpack_require__(4);

var _Browsers2 = _interopRequireDefault(_Browsers);

var _Browser = __webpack_require__(120);

var _Browser2 = _interopRequireDefault(_Browser);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Browser = function (_Component) {
  _inherits(Browser, _Component);

  function Browser() {
    _classCallCheck(this, Browser);

    return _possibleConstructorReturn(this, (Browser.__proto__ || Object.getPrototypeOf(Browser)).apply(this, arguments));
  }

  _createClass(Browser, [{
    key: '_getSeverityStyles',
    value: function _getSeverityStyles(browser, version) {
      var data = this.props.data;


      var numIssues = Object.keys(data[browser][version]).length;

      var color = void 0;

      if (numIssues > 0) {
        color = '#fff3c3';
      }

      if (numIssues > 7) {
        color = '#ffcfc3';
      }

      if (color) {
        return 'background-color: ' + color + ';';
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          activeBrowser = _props.activeBrowser,
          activeVersion = _props.activeVersion,
          browser = _props.browser,
          data = _props.data,
          name = _props.name,
          openBrowserVersion = _props.openBrowserVersion;


      if (!data) return null;

      var severity = 1;

      return (0, _preact.h)(
        'div',
        { 'class': _Browser2.default.browser },
        (0, _preact.h)(
          'div',
          null,
          (0, _preact.h)(
            'p',
            { 'class': _Browser2.default.browserName },
            _Browsers2.default.getName(browser)
          )
        ),
        (0, _preact.h)(
          'ol',
          { 'class': _Browser2.default.versions },
          _Browsers2.default.get(browser).map(function (version) {
            var hasIssues = Object.keys(data[browser][version]).length > 0;

            var versionClasses = [_Browser2.default.version];

            if (browser === activeBrowser && version === activeVersion) {
              versionClasses.push(_Browser2.default.versionActive);
            }

            if (hasIssues) {
              versionClasses.push(_Browser2.default.versionClickable);
            }

            return (0, _preact.h)(
              'li',
              {
                'class': versionClasses.join(' '),
                style: _this2._getSeverityStyles(browser, version)
              },
              (0, _preact.h)(
                'button',
                {
                  'class': _Browser2.default.versionButton,
                  onClick: hasIssues && openBrowserVersion.bind(_this2, browser, version),
                  title: hasIssues ? 'Click to see compatibility issues' : 'No compatibility issues'
                },
                version
              )
            );
          })
        )
      );
    }
  }]);

  return Browser;
}(_preact.Component);

exports.default = (0, _preactRedux.connect)(function (state) {
  return state;
}, function (dispatch) {
  return (0, _redux.bindActionCreators)(actions, dispatch);
})(Browser);

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preact = __webpack_require__(1);

var _Link = __webpack_require__(132);

var _Link2 = _interopRequireDefault(_Link);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Link = function (_Component) {
  _inherits(Link, _Component);

  function Link() {
    _classCallCheck(this, Link);

    return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
  }

  _createClass(Link, [{
    key: '_openUrl',
    value: function _openUrl(url) {
      browser.runtime.sendMessage({
        type: 'OPEN_LINK',
        url: url
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          href = _props.href;


      return (0, _preact.h)(
        'button',
        {
          'class': _Link2.default.link,
          onClick: this._openUrl.bind(this, href)
        },
        children
      );
    }
  }]);

  return Link;
}(_preact.Component);

exports.default = Link;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preact = __webpack_require__(1);

var _Placeholder = __webpack_require__(134);

var _Placeholder2 = _interopRequireDefault(_Placeholder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Placeholder = function (_Component) {
  _inherits(Placeholder, _Component);

  function Placeholder() {
    _classCallCheck(this, Placeholder);

    return _possibleConstructorReturn(this, (Placeholder.__proto__ || Object.getPrototypeOf(Placeholder)).apply(this, arguments));
  }

  _createClass(Placeholder, [{
    key: 'render',
    value: function render() {
      var children = this.props.children;


      return (0, _preact.h)(
        'div',
        { 'class': _Placeholder2.default.container },
        (0, _preact.h)(
          'p',
          { 'class': _Placeholder2.default.placeholder },
          children
        )
      );
    }
  }]);

  return Placeholder;
}(_preact.Component);

exports.default = Placeholder;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _preact = __webpack_require__(1);

var _preactRedux = __webpack_require__(6);

var _store = __webpack_require__(79);

var _store2 = _interopRequireDefault(_store);

var _Panel = __webpack_require__(81);

var _Panel2 = _interopRequireDefault(_Panel);

var _index = __webpack_require__(150);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var App = function App() {
  return (0, _preact.h)(
    _preactRedux.Provider,
    { store: _store2.default },
    (0, _preact.h)(_Panel2.default, null)
  );
};

(0, _preact.render)((0, _preact.h)(App, null), document.getElementById('app'));

/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getRawTag_js__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__objectToString_js__ = __webpack_require__(68);




/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a" /* default */] ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a" /* default */].toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? Object(__WEBPACK_IMPORTED_MODULE_1__getRawTag_js__["a" /* default */])(value)
    : Object(__WEBPACK_IMPORTED_MODULE_2__objectToString_js__["a" /* default */])(value);
}

/* harmony default export */ __webpack_exports__["a"] = (baseGetTag);


/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__ = __webpack_require__(66);


/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__["a" /* default */] || freeSelf || Function('return this')();

/* harmony default export */ __webpack_exports__["a"] = (root);


/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/* harmony default export */ __webpack_exports__["a"] = (freeGlobal);

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(9)))

/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(29);


/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a" /* default */] ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a" /* default */].toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/* harmony default export */ __webpack_exports__["a"] = (getRawTag);


/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/* harmony default export */ __webpack_exports__["a"] = (objectToString);


/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__overArg_js__ = __webpack_require__(70);


/** Built-in value references. */
var getPrototype = Object(__WEBPACK_IMPORTED_MODULE_0__overArg_js__["a" /* default */])(Object.getPrototypeOf, Object);

/* harmony default export */ __webpack_exports__["a"] = (getPrototype);


/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* harmony default export */ __webpack_exports__["a"] = (overArg);


/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/* harmony default export */ __webpack_exports__["a"] = (isObjectLike);


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(73);


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ponyfill = __webpack_require__(75);

var _ponyfill2 = _interopRequireDefault(_ponyfill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var root; /* global window */


if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (true) {
  root = module;
} else {
  root = Function('return this')();
}

var result = (0, _ponyfill2['default'])(root);
exports['default'] = result;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9), __webpack_require__(74)(module)))

/***/ }),
/* 74 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports['default'] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var _Symbol = root.Symbol;

	if (typeof _Symbol === 'function') {
		if (_Symbol.observable) {
			result = _Symbol.observable;
		} else {
			result = _Symbol('observable');
			_Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
};

/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (immutable) */ __webpack_exports__["a"] = combineReducers;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__createStore__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_es_isPlainObject__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_warning__ = __webpack_require__(30);




function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === __WEBPACK_IMPORTED_MODULE_0__createStore__["a" /* ActionTypes */].INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!Object(__WEBPACK_IMPORTED_MODULE_1_lodash_es_isPlainObject__["a" /* default */])(inputState)) {
    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });

  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });

  if (unexpectedKeys.length > 0) {
    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, { type: __WEBPACK_IMPORTED_MODULE_0__createStore__["a" /* ActionTypes */].INIT });

    if (typeof initialState === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
    }

    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
    if (typeof reducer(undefined, { type: type }) === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + __WEBPACK_IMPORTED_MODULE_0__createStore__["a" /* ActionTypes */].INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
    }
  });
}

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */
function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};
  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (process.env.NODE_ENV !== 'production') {
      if (typeof reducers[key] === 'undefined') {
        Object(__WEBPACK_IMPORTED_MODULE_2__utils_warning__["a" /* default */])('No reducer provided for key "' + key + '"');
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }
  var finalReducerKeys = Object.keys(finalReducers);

  var unexpectedKeyCache = void 0;
  if (process.env.NODE_ENV !== 'production') {
    unexpectedKeyCache = {};
  }

  var shapeAssertionError = void 0;
  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (process.env.NODE_ENV !== 'production') {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
      if (warningMessage) {
        Object(__WEBPACK_IMPORTED_MODULE_2__utils_warning__["a" /* default */])(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};
    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }
      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    return hasChanged ? nextState : state;
  };
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(17)))

/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bindActionCreators;
function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(undefined, arguments));
  };
}

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass a single function as the first argument,
 * and get a function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */
function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
  }

  var keys = Object.keys(actionCreators);
  var boundActionCreators = {};
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }
  return boundActionCreators;
}

/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = applyMiddleware;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__compose__ = __webpack_require__(31);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function (reducer, preloadedState, enhancer) {
      var store = createStore(reducer, preloadedState, enhancer);
      var _dispatch = store.dispatch;
      var chain = [];

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch(action) {
          return _dispatch(action);
        }
      };
      chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = __WEBPACK_IMPORTED_MODULE_0__compose__["a" /* default */].apply(undefined, chain)(store.dispatch);

      return _extends({}, store, {
        dispatch: _dispatch
      });
    };
  };
}

/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_redux__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_redux_thunk__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_redux_thunk___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_redux_thunk__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lib_Browsers__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lib_Browsers___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__lib_Browsers__);




const initialState = {
  activeBrowser: null,
  activeVersion: null,
  data: null,
  sources: null,
  status: 'STATUS_IDLE',
  stylesheets: {},
  tabActive: null,
  tabs: []
}

const actions = {
  OPEN_BROWSER_VERSION: (state, { browser, version }) => {
    const tabs = Array.from(state.tabs)
    const existingTab = tabs.findIndex(tab => {
      return tab.data
        && tab.data.browser === browser
        && tab.data.version === version
    })
    const firstIssueKey = Object.keys(state.data[browser][version])[0]
    const defaultStylesheet = state.data[browser][version][firstIssueKey][0].source

    let newActiveTab

    if (existingTab === -1) {
      newActiveTab = tabs.length

      tabs.push({
        data: {
          browser,
          issue: null,
          issueInstance: 0,
          issueCount: 0,
          stylesheet: null,
          version
        },
        title: `${__WEBPACK_IMPORTED_MODULE_2__lib_Browsers___default.a.getName(browser)} ${version}`,
        type: 'BROWSER_VERSION'
      })
    } else {
      newActiveTab = existingTab
    }

    return Object.assign({}, state, {
      tabActive: newActiveTab,
      tabs
    })
  },

  SET_DATA: (state, { data, sources, status, stylesheets }) => {
    let newState = {
      status
    }

    if (status === 'STATUS_SUCCESS') {
      newState.data = data
      newState.sources = sources
      newState.stylesheets = stylesheets
    } else if (status === 'STATUS_ERROR') {
      newState.data = initialState.data,
      newState.sources = initialState.sources
      newState.stylesheets = initialState.stylesheets
    }

    return Object.assign({}, state, newState)
  },

  SET_INSPECTED_ISSUE: (state, { issue, stylesheet, tab: tabIndex = state.tabActive }) => {
    const tabs = Array.from(state.tabs)
    const tab = tabs[tabIndex]
    const issues = state.data[tab.data.browser][tab.data.version][issue]
      .filter(item => {
        return item.source === tab.data.stylesheet
      })
    const issueInstance = tabs[tabIndex].data.issue === issue
      ? (tabs[tabIndex].data.issueInstance + 1) % issues.length
      : 0

    tabs[tabIndex] = Object.assign({}, tab, {
      data: Object.assign({}, tab.data, {
        issue: issue !== undefined
          ? issue
          : tabs[tabIndex].data.issue,
        issueInstance,
        issueCount: issues.length
      })
    })

    return Object.assign({}, state, {
      tabs
    })
  },

  SET_INSPECTED_STYLESHEET: (state, { issue, stylesheet, tab }) => {
    const tabs = Array.from(state.tabs)
    const tabIndex = tab !== undefined
      ? tab
      : state.tabActive

    tabs[tabIndex] = Object.assign({}, tabs[tab], {
      data: Object.assign({}, tabs[tab].data, {
        stylesheet: stylesheet !== undefined
          ? stylesheet
          : tabs[tab].data.stylesheet
      })
    })

    return Object.assign({}, state, {
      tabs
    })
  },

  TAB_CLOSE: (state, { index = null }) => {
    const tabs = Array.from(state.tabs)

    if (index !== null) {
      tabs.splice(index, 1)
    }

    return Object.assign({}, state, {
      tabActive: (state.tabActive !== index) ? state.tabActive : null,
      tabs
    })
  },

  TAB_SELECT: (state, { index = null }) => {
    const tabs = Array.from(state.tabs)

    return Object.assign({}, state, {
      tabActive: index
    })
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Object(__WEBPACK_IMPORTED_MODULE_0_redux__["createStore"])((state, action) => (
  action && actions[action.type]
    ? actions[action.type](state, action)
    : state
), initialState, Object(__WEBPACK_IMPORTED_MODULE_0_redux__["applyMiddleware"])(__WEBPACK_IMPORTED_MODULE_1_redux_thunk___default.a)));


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
function createThunkMiddleware(extraArgument) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        if (typeof action === 'function') {
          return action(dispatch, getState, extraArgument);
        }

        return next(action);
      };
    };
  };
}

var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;

exports['default'] = thunk;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preact = __webpack_require__(1);

var _preactRedux = __webpack_require__(6);

var _redux = __webpack_require__(5);

var _reducers = __webpack_require__(10);

var _reducers2 = _interopRequireDefault(_reducers);

var _actions = __webpack_require__(11);

var actions = _interopRequireWildcard(_actions);

var _Browser = __webpack_require__(60);

var _Browser2 = _interopRequireDefault(_Browser);

var _Sidebar = __webpack_require__(123);

var _Sidebar2 = _interopRequireDefault(_Sidebar);

var _Placeholder = __webpack_require__(62);

var _Placeholder2 = _interopRequireDefault(_Placeholder);

var _Tabs = __webpack_require__(136);

var _Tabs2 = _interopRequireDefault(_Tabs);

var _data = __webpack_require__(7);

var _data2 = _interopRequireDefault(_data);

var _semverCompare = __webpack_require__(32);

var _semverCompare2 = _interopRequireDefault(_semverCompare);

var _Panel = __webpack_require__(148);

var _Panel2 = _interopRequireDefault(_Panel);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Panel = function (_Component) {
  _inherits(Panel, _Component);

  function Panel() {
    _classCallCheck(this, Panel);

    return _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).apply(this, arguments));
  }

  _createClass(Panel, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var fetchStylesheets = this.props.fetchStylesheets;


      fetchStylesheets();

      this.onNavigatedHandler = function (url) {
        fetchStylesheets();
      }.bind(this);

      browser.devtools.network.onNavigated.addListener(this.onNavigatedHandler);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      browser.devtools.network.onNavigated.removeListener(this.onNavigatedHandler);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          data = _props.data,
          status = _props.status,
          tabs = _props.tabs;


      if (status === 'STATUS_LOADING') {
        return (0, _preact.h)(
          'div',
          { 'class': _Panel2.default.panel },
          (0, _preact.h)(
            _Placeholder2.default,
            null,
            'Crunching some data...'
          )
        );
      }

      if (!data) return null;

      return (0, _preact.h)(
        'div',
        { 'class': _Panel2.default.panel },
        (0, _preact.h)(_Tabs2.default, null),
        (0, _preact.h)(_Sidebar2.default, null)
      );
    }
  }]);

  return Panel;
}(_preact.Component);

exports.default = (0, _preactRedux.connect)(function (state) {
  return state;
}, function (dispatch) {
  return (0, _redux.bindActionCreators)(actions, dispatch);
})(Panel);

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

const AtRule = __webpack_require__(83)
const cssBeautify = __webpack_require__(84)
const Declaration = __webpack_require__(85)
const browsers = __webpack_require__(4)
const compatData = __webpack_require__(7)
const Helpers = __webpack_require__(14)
const postcss = __webpack_require__(33)
const Prism = __webpack_require__(105)
const Selector = __webpack_require__(106)

const StyleSheet = function () {
  this.issues = {}
  this.sources = []

  browsers.list().forEach(browser => {
    this.issues[browser] = {}

    browsers.get(browser).forEach(version => {
      this.issues[browser][version] = []
    })
  })
}

StyleSheet.prototype.add = function ({id, content, external}) {
  this.sources.push({
    id,
    content,
    external
  })
}

StyleSheet.prototype.groupIssues = function (issues, property) {
  let groupedIssues = {}

  Object.keys(issues).forEach(browser => {
    groupedIssues[browser] = groupedIssues[browser] || {}

    Object.keys(issues[browser]).forEach(version => {
      groupedIssues[browser][version] = issues[browser][version].reduce((issues, issue) => {
        const key = issue[property]

        issues[key] = issues[key] || []
        issues[key].push(issue)

        return issues
      }, {})
    })
  })

  return groupedIssues
}

StyleSheet.prototype.parse = function () {
  let failedSources = []
  let processedSources = {}

  const queue = this.sources.map(source => {
    const plugin = postcss.plugin('postcss-css-report', this.process.bind(this, source))
    const formattedCss = cssBeautify(source.content)

    return postcss([plugin])
      .process(formattedCss)
      .then(result => {
        processedSources[source.id] = Prism
          .highlight(result.css, Prism.languages.css)
          .split('\n')

        return result
      })
      .catch(err => {
        console.log('** CSS parse error:', err)

        failedSources.push(source.id)  
      })
  })

  return Promise.all(queue).then(stylesheets => {
    return {
      data: this.groupIssues(this.issues, 'title'),
      failedSources,
      stylesheets: processedSources
    }
  })
}

StyleSheet.prototype.process = function (source, opts = {}) {
  return (css, result) => {
    css.walkRules(this.processRule.bind(this, source))
    css.walkAtRules(this.processAtRule.bind(this, source))
  }
}

StyleSheet.prototype.processAtRule = function (source, node) {
  const atRule = new AtRule(node, source)
  
  atRule.process(this.issues)
}

StyleSheet.prototype.processRule = function (source, rule) {
  let ruleCache = {}

  // Process selector
  if (rule.selector) {
    const selector = new Selector(
      rule.selector,
      source,
      rule
    )

    selector.process(this.issues)
  }

  // Process declarations
  rule.walkDecls(declarationNode => {
    const declaration = new Declaration(
      declarationNode,
      source,
      rule,
      ruleCache
    )

    declaration.process(this.issues)
  })
}

module.exports = StyleSheet


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

const browsers = __webpack_require__(4)
const compatData = __webpack_require__(7)
const Helpers = __webpack_require__(14)

const AtRule = function (node, source) {
  this.node = node
  this.source = source
}

AtRule.prototype.process = function (issues) {
  let atRuleIssues = {}

  switch (this.node.name) {
    case 'counter-style':
      const counterStyleCompat = compatData.css['at-rules']['@counter-style']

      atRuleIssues['counter-style'] = counterStyleCompat

      const counterStyleProperties = [
        'additive-symbols',
        'fallback',
        'negative',
        'pad',
        'prefix',
        'range',
        'speak-as',
        'suffix',
        'symbols',
        'system'
      ]

      this.node.walkDecls(declaration => {
        if (counterStyleProperties.includes(declaration.prop)) {
          atRuleIssues[`counter-style.${declaration.prop}`] = counterStyleCompat[declaration.prop]
        }
      })

      break

    case 'font-face':
      const fontFaceCompat = compatData.css['at-rules']['font-face']

      atRuleIssues['font-face'] = fontFaceCompat

      const fontFaceProperties = [
        'font-display',
        'font-family',
        'font-feature-settings',
        'font-style',
        'font-weight',
        'src',
        'unicode-range'
      ]

      this.node.walkDecls(declaration => {
        if (fontFaceProperties.includes(declaration.prop)) {
          atRuleIssues[`font-face.${declaration.prop}`] = fontFaceCompat[declaration.prop]
        }
      })

      break
  }

  Object.keys(atRuleIssues).forEach(issueKey => {
    const issueSupport = atRuleIssues[issueKey].__compat.support

    Object.keys(issueSupport).forEach(browser => {
      if (!browsers.get(browser)) return

      const unsupportedVersions = Helpers.getUnsupportedVersions({
        browser,
        added: issueSupport[browser].version_added,
        removed: issueSupport[browser].version_removed
      })

      unsupportedVersions.forEach(version => {
        issues[browser][version].push({
          data: issueSupport,
          instance: {
            start: this.node.source.start,
            end: this.node.source.end
          },
          source: this.source.id,
          subType: 'at-rule',
          title: `@${this.node.name}`,
          type: 'CSS'
        })
      })
    })
  })
}

module.exports = AtRule


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

/*
 Copyright (C) 2013 Sencha Inc.
 Copyright (C) 2012 Sencha Inc.
 Copyright (C) 2011 Sencha Inc.

 Author: Ariya Hidayat.

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
*/

/*jslint continue: true, indent: 4 */
/*global exports:true, module:true, window:true */

(function () {

    'use strict';

    function cssbeautify(style, opt) {

        var options, index = 0, length = style.length, blocks, formatted = '',
            ch, ch2, str, state, State, depth, quote, comment,
            openbracesuffix = true,
            autosemicolon = false,
            trimRight;

        options = arguments.length > 1 ? opt : {};
        if (typeof options.indent === 'undefined') {
            options.indent = '    ';
        }
        if (typeof options.openbrace === 'string') {
            openbracesuffix = (options.openbrace === 'end-of-line');
        }
        if (typeof options.autosemicolon === 'boolean') {
            autosemicolon = options.autosemicolon;
        }

        function isWhitespace(c) {
            return (c === ' ') || (c === '\n') || (c === '\t') || (c === '\r') || (c === '\f');
        }

        function isQuote(c) {
            return (c === '\'') || (c === '"');
        }

        // FIXME: handle Unicode characters
        function isName(c) {
            return (ch >= 'a' && ch <= 'z') ||
                (ch >= 'A' && ch <= 'Z') ||
                (ch >= '0' && ch <= '9') ||
                '-_*.:#[]'.indexOf(c) >= 0;
        }

        function appendIndent() {
            var i;
            for (i = depth; i > 0; i -= 1) {
                formatted += options.indent;
            }
        }

        function openBlock() {
            formatted = trimRight(formatted);
            if (openbracesuffix) {
                formatted += ' {';
            } else {
                formatted += '\n';
                appendIndent();
                formatted += '{';
            }
            if (ch2 !== '\n') {
                formatted += '\n';
            }
            depth += 1;
        }

        function closeBlock() {
            var last;
            depth -= 1;
            formatted = trimRight(formatted);

            if (formatted.length > 0 && autosemicolon) {
                last = formatted.charAt(formatted.length - 1);
                if (last !== ';' && last !== '{') {
                    formatted += ';';
                }
            }

            formatted += '\n';
            appendIndent();
            formatted += '}';
            blocks.push(formatted);
            formatted = '';
        }

        if (String.prototype.trimRight) {
            trimRight = function (s) {
                return s.trimRight();
            };
        } else {
            // old Internet Explorer
            trimRight = function (s) {
                return s.replace(/\s+$/, '');
            };
        }

        State = {
            Start: 0,
            AtRule: 1,
            Block: 2,
            Selector: 3,
            Ruleset: 4,
            Property: 5,
            Separator: 6,
            Expression: 7,
            URL: 8
        };

        depth = 0;
        state = State.Start;
        comment = false;
        blocks = [];

        // We want to deal with LF (\n) only
        style = style.replace(/\r\n/g, '\n');

        while (index < length) {
            ch = style.charAt(index);
            ch2 = style.charAt(index + 1);
            index += 1;

            // Inside a string literal?
            if (isQuote(quote)) {
                formatted += ch;
                if (ch === quote) {
                    quote = null;
                }
                if (ch === '\\' && ch2 === quote) {
                    // Don't treat escaped character as the closing quote
                    formatted += ch2;
                    index += 1;
                }
                continue;
            }

            // Starting a string literal?
            if (isQuote(ch)) {
                formatted += ch;
                quote = ch;
                continue;
            }

            // Comment
            if (comment) {
                formatted += ch;
                if (ch === '*' && ch2 === '/') {
                    comment = false;
                    formatted += ch2;
                    index += 1;
                }
                continue;
            }
            if (ch === '/' && ch2 === '*') {
                comment = true;
                formatted += ch;
                formatted += ch2;
                index += 1;
                continue;
            }

            if (state === State.Start) {

                if (blocks.length === 0) {
                    if (isWhitespace(ch) && formatted.length === 0) {
                        continue;
                    }
                }

                // Copy white spaces and control characters
                if (ch <= ' ' || ch.charCodeAt(0) >= 128) {
                    state = State.Start;
                    formatted += ch;
                    continue;
                }

                // Selector or at-rule
                if (isName(ch) || (ch === '@')) {

                    // Clear trailing whitespaces and linefeeds.
                    str = trimRight(formatted);

                    if (str.length === 0) {
                        // If we have empty string after removing all the trailing
                        // spaces, that means we are right after a block.
                        // Ensure a blank line as the separator.
                        if (blocks.length > 0) {
                            formatted = '\n\n';
                        }
                    } else {
                        // After finishing a ruleset or directive statement,
                        // there should be one blank line.
                        if (str.charAt(str.length - 1) === '}' ||
                                str.charAt(str.length - 1) === ';') {

                            formatted = str + '\n\n';
                        } else {
                            // After block comment, keep all the linefeeds but
                            // start from the first column (remove whitespaces prefix).
                            while (true) {
                                ch2 = formatted.charAt(formatted.length - 1);
                                if (ch2 !== ' ' && ch2.charCodeAt(0) !== 9) {
                                    break;
                                }
                                formatted = formatted.substr(0, formatted.length - 1);
                            }
                        }
                    }
                    formatted += ch;
                    state = (ch === '@') ? State.AtRule : State.Selector;
                    continue;
                }
            }

            if (state === State.AtRule) {

                // ';' terminates a statement.
                if (ch === ';') {
                    formatted += ch;
                    state = State.Start;
                    continue;
                }

                // '{' starts a block
                if (ch === '{') {
                    str = trimRight(formatted);
                    openBlock();
                    state = (str === '@font-face') ? State.Ruleset : State.Block;
                    continue;
                }

                formatted += ch;
                continue;
            }

            if (state === State.Block) {

                // Selector
                if (isName(ch)) {

                    // Clear trailing whitespaces and linefeeds.
                    str = trimRight(formatted);

                    if (str.length === 0) {
                        // If we have empty string after removing all the trailing
                        // spaces, that means we are right after a block.
                        // Ensure a blank line as the separator.
                        if (blocks.length > 0) {
                            formatted = '\n\n';
                        }
                    } else {
                        // Insert blank line if necessary.
                        if (str.charAt(str.length - 1) === '}') {
                            formatted = str + '\n\n';
                        } else {
                            // After block comment, keep all the linefeeds but
                            // start from the first column (remove whitespaces prefix).
                            while (true) {
                                ch2 = formatted.charAt(formatted.length - 1);
                                if (ch2 !== ' ' && ch2.charCodeAt(0) !== 9) {
                                    break;
                                }
                                formatted = formatted.substr(0, formatted.length - 1);
                            }
                        }
                    }

                    appendIndent();
                    formatted += ch;
                    state = State.Selector;
                    continue;
                }

                // '}' resets the state.
                if (ch === '}') {
                    closeBlock();
                    state = State.Start;
                    continue;
                }

                formatted += ch;
                continue;
            }

            if (state === State.Selector) {

                // '{' starts the ruleset.
                if (ch === '{') {
                    openBlock();
                    state = State.Ruleset;
                    continue;
                }

                // '}' resets the state.
                if (ch === '}') {
                    closeBlock();
                    state = State.Start;
                    continue;
                }

                formatted += ch;
                continue;
            }

            if (state === State.Ruleset) {

                // '}' finishes the ruleset.
                if (ch === '}') {
                    closeBlock();
                    state = State.Start;
                    if (depth > 0) {
                        state = State.Block;
                    }
                    continue;
                }

                // Make sure there is no blank line or trailing spaces inbetween
                if (ch === '\n') {
                    formatted = trimRight(formatted);
                    formatted += '\n';
                    continue;
                }

                // property name
                if (!isWhitespace(ch)) {
                    formatted = trimRight(formatted);
                    formatted += '\n';
                    appendIndent();
                    formatted += ch;
                    state = State.Property;
                    continue;
                }
                formatted += ch;
                continue;
            }

            if (state === State.Property) {

                // ':' concludes the property.
                if (ch === ':') {
                    formatted = trimRight(formatted);
                    formatted += ': ';
                    state = State.Expression;
                    if (isWhitespace(ch2)) {
                        state = State.Separator;
                    }
                    continue;
                }

                // '}' finishes the ruleset.
                if (ch === '}') {
                    closeBlock();
                    state = State.Start;
                    if (depth > 0) {
                        state = State.Block;
                    }
                    continue;
                }

                formatted += ch;
                continue;
            }

            if (state === State.Separator) {

                // Non-whitespace starts the expression.
                if (!isWhitespace(ch)) {
                    formatted += ch;
                    state = State.Expression;
                    continue;
                }

                // Anticipate string literal.
                if (isQuote(ch2)) {
                    state = State.Expression;
                }

                continue;
            }

            if (state === State.Expression) {

                // '}' finishes the ruleset.
                if (ch === '}') {
                    closeBlock();
                    state = State.Start;
                    if (depth > 0) {
                        state = State.Block;
                    }
                    continue;
                }

                // ';' completes the declaration.
                if (ch === ';') {
                    formatted = trimRight(formatted);
                    formatted += ';\n';
                    state = State.Ruleset;
                    continue;
                }

                formatted += ch;

                if (ch === '(') {
                    if (formatted.charAt(formatted.length - 2) === 'l' &&
                            formatted.charAt(formatted.length - 3) === 'r' &&
                            formatted.charAt(formatted.length - 4) === 'u') {

                        // URL starts with '(' and closes with ')'.
                        state = State.URL;
                        continue;
                    }
                }

                continue;
            }

            if (state === State.URL) {


                // ')' finishes the URL (only if it is not escaped).
                if (ch === ')' && formatted.charAt(formatted.length - 1 !== '\\')) {
                    formatted += ch;
                    state = State.Expression;
                    continue;
                }
            }

            // The default action is to copy the character (to prevent
            // infinite loop).
            formatted += ch;
        }

        formatted = blocks.join('') + formatted;

        return formatted;
    }

    if (true) {
        // Node.js module.
        module.exports = exports = cssbeautify;
    } else if (typeof window === 'object') {
        // Browser loading.
        window.cssbeautify = cssbeautify;
    }

}());


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

const browsers = __webpack_require__(4)
const compatData = __webpack_require__(7)
const Helpers = __webpack_require__(14)
const postcss = __webpack_require__(33)

const Declaration = function (node, source, rule, ruleCache) {
  this.node = node
  this.source = source
  this.rule = rule
  this.ruleCache = ruleCache
}

Declaration.prototype.process = function (issues) {
  const unprefixedProperty = postcss.vendor.unprefixed(this.node.prop)
  const propertyCompatData = compatData.css.properties[unprefixedProperty]

  if (!propertyCompatData || this.ruleCache[unprefixedProperty]) return

  const propertySuppport = propertyCompatData.__compat.support

  Object.keys(propertySuppport).forEach(browser => {
    if (!browsers.get(browser)) return

    let missingPrefixesForVersion = {}
    let unsupportedVersions = []

    if (Array.isArray(propertySuppport[browser])) {
      let variantsInRule = []

      this.rule.walkDecls(secondaryDeclaration => {
        const unprefixedSecondaryProperty = postcss.vendor.unprefixed(secondaryDeclaration.prop)

        if (unprefixedSecondaryProperty === unprefixedProperty) {
          variantsInRule.push(postcss.vendor.prefix(secondaryDeclaration.prop))
        }
      })

      // So that we don't process the same property multiple times
      // within this rule.
      this.ruleCache[unprefixedProperty] = true

      propertySuppport[browser].forEach(variant => {
        const variantSupport = Helpers.getUnsupportedVersions({
          browser,
          added: variant.version_added,
          removed: variant.version_removed
        })

        if (variant.prefix) {
          // The prefix is included, extending the versions supported.
          if (variantsInRule.includes(variant.prefix)) {
            unsupportedVersions = unsupportedVersions.length > 0
              ? unsupportedVersions.filter(version => variantSupport.includes(version))
              : variantSupport
          } else {
            // The prefix is not included, we can flag as a suggestion.
            variantSupport.forEach(version => {
              missingPrefixesForVersion[version] = missingPrefixesForVersion[version] || {}
              missingPrefixesForVersion[version][variant.prefix] = true
            })
          }
        } else {
          // The main variant is the one that doesn't contain any keys other than
          // `version_added` and `version_removed`
          const isMainVariant = Object.keys(variant).filter(property => {
            return property !== 'version_added' && property !== 'version_removed'
          }).length > 0

          unsupportedVersions = unsupportedVersions.length > 0
            ? unsupportedVersions.filter(version => variantSupport.includes(version))
            : variantSupport
        }
      })
    } else {
      unsupportedVersions = Helpers.getUnsupportedVersions({
        browser,
        added: propertySuppport[browser].version_added,
        removed: propertySuppport[browser].version_removed
      })
    }

    unsupportedVersions.forEach(version => {
      let versionData = {
        data: propertyCompatData,
        instance: {
          start: this.node.source.start,
          end: this.node.source.end
        },
        source: this.source.id,
        subType: 'property',
        title: `${unprefixedProperty}`,
        type: 'CSS'
      }

      if (missingPrefixesForVersion[version]) {
        versionData.missingPrefixes = Object.keys(missingPrefixesForVersion[version])
      }

      issues[browser][version].push(versionData)
    })
  })
}

module.exports = Declaration


/***/ }),
/* 86 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _chalk = __webpack_require__(35);

var _chalk2 = _interopRequireDefault(_chalk);

var _tokenize = __webpack_require__(36);

var _tokenize2 = _interopRequireDefault(_tokenize);

var _input = __webpack_require__(37);

var _input2 = _interopRequireDefault(_input);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HIGHLIGHT_THEME = {
    'brackets': _chalk2.default.cyan,
    'at-word': _chalk2.default.cyan,
    'call': _chalk2.default.cyan,
    'comment': _chalk2.default.gray,
    'string': _chalk2.default.green,
    'class': _chalk2.default.yellow,
    'hash': _chalk2.default.magenta,
    '(': _chalk2.default.cyan,
    ')': _chalk2.default.cyan,
    '{': _chalk2.default.yellow,
    '}': _chalk2.default.yellow,
    '[': _chalk2.default.yellow,
    ']': _chalk2.default.yellow,
    ':': _chalk2.default.yellow,
    ';': _chalk2.default.yellow
};

function getTokenType(_ref, processor) {
    var type = _ref[0],
        value = _ref[1];

    if (type === 'word') {
        if (value[0] === '.') {
            return 'class';
        }
        if (value[0] === '#') {
            return 'hash';
        }
    }

    if (!processor.endOfFile()) {
        var next = processor.nextToken();
        processor.back(next);
        if (next[0] === 'brackets' || next[0] === '(') return 'call';
    }

    return type;
}

function terminalHighlight(css) {
    var processor = (0, _tokenize2.default)(new _input2.default(css), { ignoreErrors: true });
    var result = '';

    var _loop = function _loop() {
        var token = processor.nextToken();
        var color = HIGHLIGHT_THEME[getTokenType(token, processor)];
        if (color) {
            result += token[1].split(/\r?\n/).map(function (i) {
                return color(i);
            }).join('\n');
        } else {
            result += token[1];
        }
    };

    while (!processor.endOfFile()) {
        _loop();
    }
    return result;
}

exports.default = terminalHighlight;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlcm1pbmFsLWhpZ2hsaWdodC5lczYiXSwibmFtZXMiOlsiSElHSExJR0hUX1RIRU1FIiwiY3lhbiIsImdyYXkiLCJncmVlbiIsInllbGxvdyIsIm1hZ2VudGEiLCJnZXRUb2tlblR5cGUiLCJwcm9jZXNzb3IiLCJ0eXBlIiwidmFsdWUiLCJlbmRPZkZpbGUiLCJuZXh0IiwibmV4dFRva2VuIiwiYmFjayIsInRlcm1pbmFsSGlnaGxpZ2h0IiwiY3NzIiwiaWdub3JlRXJyb3JzIiwicmVzdWx0IiwidG9rZW4iLCJjb2xvciIsInNwbGl0IiwibWFwIiwiaSIsImpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUVBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLGtCQUFrQjtBQUNwQixnQkFBWSxnQkFBTUMsSUFERTtBQUVwQixlQUFZLGdCQUFNQSxJQUZFO0FBR3BCLFlBQVksZ0JBQU1BLElBSEU7QUFJcEIsZUFBWSxnQkFBTUMsSUFKRTtBQUtwQixjQUFZLGdCQUFNQyxLQUxFO0FBTXBCLGFBQVksZ0JBQU1DLE1BTkU7QUFPcEIsWUFBWSxnQkFBTUMsT0FQRTtBQVFwQixTQUFZLGdCQUFNSixJQVJFO0FBU3BCLFNBQVksZ0JBQU1BLElBVEU7QUFVcEIsU0FBWSxnQkFBTUcsTUFWRTtBQVdwQixTQUFZLGdCQUFNQSxNQVhFO0FBWXBCLFNBQVksZ0JBQU1BLE1BWkU7QUFhcEIsU0FBWSxnQkFBTUEsTUFiRTtBQWNwQixTQUFZLGdCQUFNQSxNQWRFO0FBZXBCLFNBQVksZ0JBQU1BO0FBZkUsQ0FBeEI7O0FBa0JBLFNBQVNFLFlBQVQsT0FBcUNDLFNBQXJDLEVBQWdEO0FBQUEsUUFBekJDLElBQXlCO0FBQUEsUUFBbkJDLEtBQW1COztBQUM1QyxRQUFLRCxTQUFTLE1BQWQsRUFBdUI7QUFDbkIsWUFBS0MsTUFBTSxDQUFOLE1BQWEsR0FBbEIsRUFBd0I7QUFDcEIsbUJBQU8sT0FBUDtBQUNIO0FBQ0QsWUFBS0EsTUFBTSxDQUFOLE1BQWEsR0FBbEIsRUFBd0I7QUFDcEIsbUJBQU8sTUFBUDtBQUNIO0FBQ0o7O0FBRUQsUUFBSyxDQUFDRixVQUFVRyxTQUFWLEVBQU4sRUFBOEI7QUFDMUIsWUFBSUMsT0FBT0osVUFBVUssU0FBVixFQUFYO0FBQ0FMLGtCQUFVTSxJQUFWLENBQWVGLElBQWY7QUFDQSxZQUFLQSxLQUFLLENBQUwsTUFBWSxVQUFaLElBQTBCQSxLQUFLLENBQUwsTUFBWSxHQUEzQyxFQUFpRCxPQUFPLE1BQVA7QUFDcEQ7O0FBRUQsV0FBT0gsSUFBUDtBQUNIOztBQUVELFNBQVNNLGlCQUFULENBQTJCQyxHQUEzQixFQUFnQztBQUM1QixRQUFJUixZQUFZLHdCQUFVLG9CQUFVUSxHQUFWLENBQVYsRUFBMEIsRUFBRUMsY0FBYyxJQUFoQixFQUExQixDQUFoQjtBQUNBLFFBQUlDLFNBQVMsRUFBYjs7QUFGNEI7QUFJeEIsWUFBSUMsUUFBUVgsVUFBVUssU0FBVixFQUFaO0FBQ0EsWUFBSU8sUUFBUW5CLGdCQUFnQk0sYUFBYVksS0FBYixFQUFvQlgsU0FBcEIsQ0FBaEIsQ0FBWjtBQUNBLFlBQUtZLEtBQUwsRUFBYTtBQUNURixzQkFBVUMsTUFBTSxDQUFOLEVBQVNFLEtBQVQsQ0FBZSxPQUFmLEVBQ0xDLEdBREssQ0FDQTtBQUFBLHVCQUFLRixNQUFNRyxDQUFOLENBQUw7QUFBQSxhQURBLEVBRUxDLElBRkssQ0FFQSxJQUZBLENBQVY7QUFHSCxTQUpELE1BSU87QUFDSE4sc0JBQVVDLE1BQU0sQ0FBTixDQUFWO0FBQ0g7QUFadUI7O0FBRzVCLFdBQVEsQ0FBQ1gsVUFBVUcsU0FBVixFQUFULEVBQWlDO0FBQUE7QUFVaEM7QUFDRCxXQUFPTyxNQUFQO0FBQ0g7O2tCQUVjSCxpQiIsImZpbGUiOiJ0ZXJtaW5hbC1oaWdobGlnaHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuXG5pbXBvcnQgdG9rZW5pemVyIGZyb20gJy4vdG9rZW5pemUnO1xuaW1wb3J0IElucHV0ICAgIGZyb20gJy4vaW5wdXQnO1xuXG5jb25zdCBISUdITElHSFRfVEhFTUUgPSB7XG4gICAgJ2JyYWNrZXRzJzogY2hhbGsuY3lhbixcbiAgICAnYXQtd29yZCc6ICBjaGFsay5jeWFuLFxuICAgICdjYWxsJzogICAgIGNoYWxrLmN5YW4sXG4gICAgJ2NvbW1lbnQnOiAgY2hhbGsuZ3JheSxcbiAgICAnc3RyaW5nJzogICBjaGFsay5ncmVlbixcbiAgICAnY2xhc3MnOiAgICBjaGFsay55ZWxsb3csXG4gICAgJ2hhc2gnOiAgICAgY2hhbGsubWFnZW50YSxcbiAgICAnKCc6ICAgICAgICBjaGFsay5jeWFuLFxuICAgICcpJzogICAgICAgIGNoYWxrLmN5YW4sXG4gICAgJ3snOiAgICAgICAgY2hhbGsueWVsbG93LFxuICAgICd9JzogICAgICAgIGNoYWxrLnllbGxvdyxcbiAgICAnWyc6ICAgICAgICBjaGFsay55ZWxsb3csXG4gICAgJ10nOiAgICAgICAgY2hhbGsueWVsbG93LFxuICAgICc6JzogICAgICAgIGNoYWxrLnllbGxvdyxcbiAgICAnOyc6ICAgICAgICBjaGFsay55ZWxsb3dcbn07XG5cbmZ1bmN0aW9uIGdldFRva2VuVHlwZShbdHlwZSwgdmFsdWVdLCBwcm9jZXNzb3IpIHtcbiAgICBpZiAoIHR5cGUgPT09ICd3b3JkJyApIHtcbiAgICAgICAgaWYgKCB2YWx1ZVswXSA9PT0gJy4nICkge1xuICAgICAgICAgICAgcmV0dXJuICdjbGFzcyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCB2YWx1ZVswXSA9PT0gJyMnICkge1xuICAgICAgICAgICAgcmV0dXJuICdoYXNoJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICggIXByb2Nlc3Nvci5lbmRPZkZpbGUoKSApIHtcbiAgICAgICAgbGV0IG5leHQgPSBwcm9jZXNzb3IubmV4dFRva2VuKCk7XG4gICAgICAgIHByb2Nlc3Nvci5iYWNrKG5leHQpO1xuICAgICAgICBpZiAoIG5leHRbMF0gPT09ICdicmFja2V0cycgfHwgbmV4dFswXSA9PT0gJygnICkgcmV0dXJuICdjYWxsJztcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZTtcbn1cblxuZnVuY3Rpb24gdGVybWluYWxIaWdobGlnaHQoY3NzKSB7XG4gICAgbGV0IHByb2Nlc3NvciA9IHRva2VuaXplcihuZXcgSW5wdXQoY3NzKSwgeyBpZ25vcmVFcnJvcnM6IHRydWUgfSk7XG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIHdoaWxlICggIXByb2Nlc3Nvci5lbmRPZkZpbGUoKSApIHtcbiAgICAgICAgbGV0IHRva2VuID0gcHJvY2Vzc29yLm5leHRUb2tlbigpO1xuICAgICAgICBsZXQgY29sb3IgPSBISUdITElHSFRfVEhFTUVbZ2V0VG9rZW5UeXBlKHRva2VuLCBwcm9jZXNzb3IpXTtcbiAgICAgICAgaWYgKCBjb2xvciApIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0b2tlblsxXS5zcGxpdCgvXFxyP1xcbi8pXG4gICAgICAgICAgICAgICAgLm1hcCggaSA9PiBjb2xvcihpKSApXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHRva2VuWzFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRlcm1pbmFsSGlnaGxpZ2h0O1xuIl19


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _sourceMap = __webpack_require__(39);

var _sourceMap2 = _interopRequireDefault(_sourceMap);

var _path = __webpack_require__(20);

var _path2 = _interopRequireDefault(_path);

var _fs = __webpack_require__(98);

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function fromBase64(str) {
    if (Buffer) {
        if (Buffer.from && Buffer.from !== Uint8Array.from) {
            return Buffer.from(str, 'base64').toString();
        } else {
            return new Buffer(str, 'base64').toString();
        }
    } else {
        return window.atob(str);
    }
}

/**
 * Source map information from input CSS.
 * For example, source map after Sass compiler.
 *
 * This class will automatically find source map in input CSS or in file system
 * near input file (according `from` option).
 *
 * @example
 * const root = postcss.parse(css, { from: 'a.sass.css' });
 * root.input.map //=> PreviousMap
 */

var PreviousMap = function () {

    /**
     * @param {string}         css    - input CSS source
     * @param {processOptions} [opts] - {@link Processor#process} options
     */
    function PreviousMap(css, opts) {
        _classCallCheck(this, PreviousMap);

        this.loadAnnotation(css);
        /**
         * @member {boolean} - Was source map inlined by data-uri to input CSS.
         */
        this.inline = this.startWith(this.annotation, 'data:');

        var prev = opts.map ? opts.map.prev : undefined;
        var text = this.loadMap(opts.from, prev);
        if (text) this.text = text;
    }

    /**
     * Create a instance of `SourceMapGenerator` class
     * from the `source-map` library to work with source map information.
     *
     * It is lazy method, so it will create object only on first call
     * and then it will use cache.
     *
     * @return {SourceMapGenerator} object with source map information
     */


    PreviousMap.prototype.consumer = function consumer() {
        if (!this.consumerCache) {
            this.consumerCache = new _sourceMap2.default.SourceMapConsumer(this.text);
        }
        return this.consumerCache;
    };

    /**
     * Does source map contains `sourcesContent` with input source text.
     *
     * @return {boolean} Is `sourcesContent` present
     */


    PreviousMap.prototype.withContent = function withContent() {
        return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
    };

    PreviousMap.prototype.startWith = function startWith(string, start) {
        if (!string) return false;
        return string.substr(0, start.length) === start;
    };

    PreviousMap.prototype.loadAnnotation = function loadAnnotation(css) {
        var match = css.match(/\/\*\s*# sourceMappingURL=(.*)\s*\*\//);
        if (match) this.annotation = match[1].trim();
    };

    PreviousMap.prototype.decodeInline = function decodeInline(text) {
        // data:application/json;charset=utf-8;base64,
        // data:application/json;charset=utf8;base64,
        // data:application/json;base64,
        var baseUri = /^data:application\/json;(?:charset=utf-?8;)?base64,/;
        var uri = 'data:application/json,';

        if (this.startWith(text, uri)) {
            return decodeURIComponent(text.substr(uri.length));
        } else if (baseUri.test(text)) {
            return fromBase64(text.substr(RegExp.lastMatch.length));
        } else {
            var encoding = text.match(/data:application\/json;([^,]+),/)[1];
            throw new Error('Unsupported source map encoding ' + encoding);
        }
    };

    PreviousMap.prototype.loadMap = function loadMap(file, prev) {
        if (prev === false) return false;

        if (prev) {
            if (typeof prev === 'string') {
                return prev;
            } else if (typeof prev === 'function') {
                var prevPath = prev(file);
                if (prevPath && _fs2.default.existsSync && _fs2.default.existsSync(prevPath)) {
                    return _fs2.default.readFileSync(prevPath, 'utf-8').toString().trim();
                } else {
                    throw new Error('Unable to load previous source map: ' + prevPath.toString());
                }
            } else if (prev instanceof _sourceMap2.default.SourceMapConsumer) {
                return _sourceMap2.default.SourceMapGenerator.fromSourceMap(prev).toString();
            } else if (prev instanceof _sourceMap2.default.SourceMapGenerator) {
                return prev.toString();
            } else if (this.isMap(prev)) {
                return JSON.stringify(prev);
            } else {
                throw new Error('Unsupported previous source map format: ' + prev.toString());
            }
        } else if (this.inline) {
            return this.decodeInline(this.annotation);
        } else if (this.annotation) {
            var map = this.annotation;
            if (file) map = _path2.default.join(_path2.default.dirname(file), map);

            this.root = _path2.default.dirname(map);
            if (_fs2.default.existsSync && _fs2.default.existsSync(map)) {
                return _fs2.default.readFileSync(map, 'utf-8').toString().trim();
            } else {
                return false;
            }
        }
    };

    PreviousMap.prototype.isMap = function isMap(map) {
        if ((typeof map === 'undefined' ? 'undefined' : _typeof(map)) !== 'object') return false;
        return typeof map.mappings === 'string' || typeof map._mappings === 'string';
    };

    return PreviousMap;
}();

exports.default = PreviousMap;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXZpb3VzLW1hcC5lczYiXSwibmFtZXMiOlsiZnJvbUJhc2U2NCIsInN0ciIsIkJ1ZmZlciIsImZyb20iLCJVaW50OEFycmF5IiwidG9TdHJpbmciLCJ3aW5kb3ciLCJhdG9iIiwiUHJldmlvdXNNYXAiLCJjc3MiLCJvcHRzIiwibG9hZEFubm90YXRpb24iLCJpbmxpbmUiLCJzdGFydFdpdGgiLCJhbm5vdGF0aW9uIiwicHJldiIsIm1hcCIsInVuZGVmaW5lZCIsInRleHQiLCJsb2FkTWFwIiwiY29uc3VtZXIiLCJjb25zdW1lckNhY2hlIiwiU291cmNlTWFwQ29uc3VtZXIiLCJ3aXRoQ29udGVudCIsInNvdXJjZXNDb250ZW50IiwibGVuZ3RoIiwic3RyaW5nIiwic3RhcnQiLCJzdWJzdHIiLCJtYXRjaCIsInRyaW0iLCJkZWNvZGVJbmxpbmUiLCJiYXNlVXJpIiwidXJpIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidGVzdCIsIlJlZ0V4cCIsImxhc3RNYXRjaCIsImVuY29kaW5nIiwiRXJyb3IiLCJmaWxlIiwicHJldlBhdGgiLCJleGlzdHNTeW5jIiwicmVhZEZpbGVTeW5jIiwiU291cmNlTWFwR2VuZXJhdG9yIiwiZnJvbVNvdXJjZU1hcCIsImlzTWFwIiwiSlNPTiIsInN0cmluZ2lmeSIsImpvaW4iLCJkaXJuYW1lIiwicm9vdCIsIm1hcHBpbmdzIiwiX21hcHBpbmdzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7O0FBRUEsU0FBU0EsVUFBVCxDQUFvQkMsR0FBcEIsRUFBeUI7QUFDckIsUUFBS0MsTUFBTCxFQUFjO0FBQ1YsWUFBS0EsT0FBT0MsSUFBUCxJQUFlRCxPQUFPQyxJQUFQLEtBQWdCQyxXQUFXRCxJQUEvQyxFQUFzRDtBQUNsRCxtQkFBT0QsT0FBT0MsSUFBUCxDQUFZRixHQUFaLEVBQWlCLFFBQWpCLEVBQTJCSSxRQUEzQixFQUFQO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsbUJBQU8sSUFBSUgsTUFBSixDQUFXRCxHQUFYLEVBQWdCLFFBQWhCLEVBQTBCSSxRQUExQixFQUFQO0FBQ0g7QUFDSixLQU5ELE1BTU87QUFDSCxlQUFPQyxPQUFPQyxJQUFQLENBQVlOLEdBQVosQ0FBUDtBQUNIO0FBQ0o7O0FBRUQ7Ozs7Ozs7Ozs7OztJQVdNTyxXOztBQUVGOzs7O0FBSUEseUJBQVlDLEdBQVosRUFBaUJDLElBQWpCLEVBQXVCO0FBQUE7O0FBQ25CLGFBQUtDLGNBQUwsQ0FBb0JGLEdBQXBCO0FBQ0E7OztBQUdBLGFBQUtHLE1BQUwsR0FBYyxLQUFLQyxTQUFMLENBQWUsS0FBS0MsVUFBcEIsRUFBZ0MsT0FBaEMsQ0FBZDs7QUFFQSxZQUFJQyxPQUFPTCxLQUFLTSxHQUFMLEdBQVdOLEtBQUtNLEdBQUwsQ0FBU0QsSUFBcEIsR0FBMkJFLFNBQXRDO0FBQ0EsWUFBSUMsT0FBTyxLQUFLQyxPQUFMLENBQWFULEtBQUtQLElBQWxCLEVBQXdCWSxJQUF4QixDQUFYO0FBQ0EsWUFBS0csSUFBTCxFQUFZLEtBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNmOztBQUVEOzs7Ozs7Ozs7OzswQkFTQUUsUSx1QkFBVztBQUNQLFlBQUssQ0FBQyxLQUFLQyxhQUFYLEVBQTJCO0FBQ3ZCLGlCQUFLQSxhQUFMLEdBQXFCLElBQUksb0JBQVFDLGlCQUFaLENBQThCLEtBQUtKLElBQW5DLENBQXJCO0FBQ0g7QUFDRCxlQUFPLEtBQUtHLGFBQVo7QUFDSCxLOztBQUVEOzs7Ozs7OzBCQUtBRSxXLDBCQUFjO0FBQ1YsZUFBTyxDQUFDLEVBQUUsS0FBS0gsUUFBTCxHQUFnQkksY0FBaEIsSUFDQSxLQUFLSixRQUFMLEdBQWdCSSxjQUFoQixDQUErQkMsTUFBL0IsR0FBd0MsQ0FEMUMsQ0FBUjtBQUVILEs7OzBCQUVEWixTLHNCQUFVYSxNLEVBQVFDLEssRUFBTztBQUNyQixZQUFLLENBQUNELE1BQU4sRUFBZSxPQUFPLEtBQVA7QUFDZixlQUFPQSxPQUFPRSxNQUFQLENBQWMsQ0FBZCxFQUFpQkQsTUFBTUYsTUFBdkIsTUFBbUNFLEtBQTFDO0FBQ0gsSzs7MEJBRURoQixjLDJCQUFlRixHLEVBQUs7QUFDaEIsWUFBSW9CLFFBQVFwQixJQUFJb0IsS0FBSixDQUFVLHVDQUFWLENBQVo7QUFDQSxZQUFLQSxLQUFMLEVBQWEsS0FBS2YsVUFBTCxHQUFrQmUsTUFBTSxDQUFOLEVBQVNDLElBQVQsRUFBbEI7QUFDaEIsSzs7MEJBRURDLFkseUJBQWFiLEksRUFBTTtBQUNmO0FBQ0E7QUFDQTtBQUNBLFlBQUljLFVBQVUscURBQWQ7QUFDQSxZQUFJQyxNQUFVLHdCQUFkOztBQUVBLFlBQUssS0FBS3BCLFNBQUwsQ0FBZUssSUFBZixFQUFxQmUsR0FBckIsQ0FBTCxFQUFpQztBQUM3QixtQkFBT0MsbUJBQW9CaEIsS0FBS1UsTUFBTCxDQUFZSyxJQUFJUixNQUFoQixDQUFwQixDQUFQO0FBRUgsU0FIRCxNQUdPLElBQUtPLFFBQVFHLElBQVIsQ0FBYWpCLElBQWIsQ0FBTCxFQUEwQjtBQUM3QixtQkFBT2xCLFdBQVdrQixLQUFLVSxNQUFMLENBQVlRLE9BQU9DLFNBQVAsQ0FBaUJaLE1BQTdCLENBQVgsQ0FBUDtBQUVILFNBSE0sTUFHQTtBQUNILGdCQUFJYSxXQUFXcEIsS0FBS1csS0FBTCxDQUFXLGlDQUFYLEVBQThDLENBQTlDLENBQWY7QUFDQSxrQkFBTSxJQUFJVSxLQUFKLENBQVUscUNBQXFDRCxRQUEvQyxDQUFOO0FBQ0g7QUFDSixLOzswQkFFRG5CLE8sb0JBQVFxQixJLEVBQU16QixJLEVBQU07QUFDaEIsWUFBS0EsU0FBUyxLQUFkLEVBQXNCLE9BQU8sS0FBUDs7QUFFdEIsWUFBS0EsSUFBTCxFQUFZO0FBQ1IsZ0JBQUssT0FBT0EsSUFBUCxLQUFnQixRQUFyQixFQUFnQztBQUM1Qix1QkFBT0EsSUFBUDtBQUNILGFBRkQsTUFFTyxJQUFLLE9BQU9BLElBQVAsS0FBZ0IsVUFBckIsRUFBa0M7QUFDckMsb0JBQUkwQixXQUFXMUIsS0FBS3lCLElBQUwsQ0FBZjtBQUNBLG9CQUFLQyxZQUFZLGFBQUdDLFVBQWYsSUFBNkIsYUFBR0EsVUFBSCxDQUFjRCxRQUFkLENBQWxDLEVBQTREO0FBQ3hELDJCQUFPLGFBQUdFLFlBQUgsQ0FBZ0JGLFFBQWhCLEVBQTBCLE9BQTFCLEVBQW1DcEMsUUFBbkMsR0FBOEN5QixJQUE5QyxFQUFQO0FBQ0gsaUJBRkQsTUFFTztBQUNILDBCQUFNLElBQUlTLEtBQUosQ0FBVSx5Q0FDaEJFLFNBQVNwQyxRQUFULEVBRE0sQ0FBTjtBQUVIO0FBQ0osYUFSTSxNQVFBLElBQUtVLGdCQUFnQixvQkFBUU8saUJBQTdCLEVBQWlEO0FBQ3BELHVCQUFPLG9CQUFRc0Isa0JBQVIsQ0FDRkMsYUFERSxDQUNZOUIsSUFEWixFQUNrQlYsUUFEbEIsRUFBUDtBQUVILGFBSE0sTUFHQSxJQUFLVSxnQkFBZ0Isb0JBQVE2QixrQkFBN0IsRUFBa0Q7QUFDckQsdUJBQU83QixLQUFLVixRQUFMLEVBQVA7QUFDSCxhQUZNLE1BRUEsSUFBSyxLQUFLeUMsS0FBTCxDQUFXL0IsSUFBWCxDQUFMLEVBQXdCO0FBQzNCLHVCQUFPZ0MsS0FBS0MsU0FBTCxDQUFlakMsSUFBZixDQUFQO0FBQ0gsYUFGTSxNQUVBO0FBQ0gsc0JBQU0sSUFBSXdCLEtBQUosQ0FBVSw2Q0FDWnhCLEtBQUtWLFFBQUwsRUFERSxDQUFOO0FBRUg7QUFFSixTQXZCRCxNQXVCTyxJQUFLLEtBQUtPLE1BQVYsRUFBbUI7QUFDdEIsbUJBQU8sS0FBS21CLFlBQUwsQ0FBa0IsS0FBS2pCLFVBQXZCLENBQVA7QUFFSCxTQUhNLE1BR0EsSUFBSyxLQUFLQSxVQUFWLEVBQXVCO0FBQzFCLGdCQUFJRSxNQUFNLEtBQUtGLFVBQWY7QUFDQSxnQkFBSzBCLElBQUwsRUFBWXhCLE1BQU0sZUFBS2lDLElBQUwsQ0FBVSxlQUFLQyxPQUFMLENBQWFWLElBQWIsQ0FBVixFQUE4QnhCLEdBQTlCLENBQU47O0FBRVosaUJBQUttQyxJQUFMLEdBQVksZUFBS0QsT0FBTCxDQUFhbEMsR0FBYixDQUFaO0FBQ0EsZ0JBQUssYUFBRzBCLFVBQUgsSUFBaUIsYUFBR0EsVUFBSCxDQUFjMUIsR0FBZCxDQUF0QixFQUEyQztBQUN2Qyx1QkFBTyxhQUFHMkIsWUFBSCxDQUFnQjNCLEdBQWhCLEVBQXFCLE9BQXJCLEVBQThCWCxRQUE5QixHQUF5Q3lCLElBQXpDLEVBQVA7QUFDSCxhQUZELE1BRU87QUFDSCx1QkFBTyxLQUFQO0FBQ0g7QUFDSjtBQUNKLEs7OzBCQUVEZ0IsSyxrQkFBTTlCLEcsRUFBSztBQUNQLFlBQUssUUFBT0EsR0FBUCx5Q0FBT0EsR0FBUCxPQUFlLFFBQXBCLEVBQStCLE9BQU8sS0FBUDtBQUMvQixlQUFPLE9BQU9BLElBQUlvQyxRQUFYLEtBQXdCLFFBQXhCLElBQ0EsT0FBT3BDLElBQUlxQyxTQUFYLEtBQXlCLFFBRGhDO0FBRUgsSzs7Ozs7a0JBR1U3QyxXIiwiZmlsZSI6InByZXZpb3VzLW1hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb3ppbGxhICBmcm9tICdzb3VyY2UtbWFwJztcbmltcG9ydCBwYXRoICAgICBmcm9tICdwYXRoJztcbmltcG9ydCBmcyAgICAgICBmcm9tICdmcyc7XG5cbmZ1bmN0aW9uIGZyb21CYXNlNjQoc3RyKSB7XG4gICAgaWYgKCBCdWZmZXIgKSB7XG4gICAgICAgIGlmICggQnVmZmVyLmZyb20gJiYgQnVmZmVyLmZyb20gIT09IFVpbnQ4QXJyYXkuZnJvbSApIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShzdHIsICdiYXNlNjQnKS50b1N0cmluZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXIoc3RyLCAnYmFzZTY0JykudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuYXRvYihzdHIpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBTb3VyY2UgbWFwIGluZm9ybWF0aW9uIGZyb20gaW5wdXQgQ1NTLlxuICogRm9yIGV4YW1wbGUsIHNvdXJjZSBtYXAgYWZ0ZXIgU2FzcyBjb21waWxlci5cbiAqXG4gKiBUaGlzIGNsYXNzIHdpbGwgYXV0b21hdGljYWxseSBmaW5kIHNvdXJjZSBtYXAgaW4gaW5wdXQgQ1NTIG9yIGluIGZpbGUgc3lzdGVtXG4gKiBuZWFyIGlucHV0IGZpbGUgKGFjY29yZGluZyBgZnJvbWAgb3B0aW9uKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoY3NzLCB7IGZyb206ICdhLnNhc3MuY3NzJyB9KTtcbiAqIHJvb3QuaW5wdXQubWFwIC8vPT4gUHJldmlvdXNNYXBcbiAqL1xuY2xhc3MgUHJldmlvdXNNYXAge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgY3NzICAgIC0gaW5wdXQgQ1NTIHNvdXJjZVxuICAgICAqIEBwYXJhbSB7cHJvY2Vzc09wdGlvbnN9IFtvcHRzXSAtIHtAbGluayBQcm9jZXNzb3IjcHJvY2Vzc30gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNzcywgb3B0cykge1xuICAgICAgICB0aGlzLmxvYWRBbm5vdGF0aW9uKGNzcyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufSAtIFdhcyBzb3VyY2UgbWFwIGlubGluZWQgYnkgZGF0YS11cmkgdG8gaW5wdXQgQ1NTLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbmxpbmUgPSB0aGlzLnN0YXJ0V2l0aCh0aGlzLmFubm90YXRpb24sICdkYXRhOicpO1xuXG4gICAgICAgIGxldCBwcmV2ID0gb3B0cy5tYXAgPyBvcHRzLm1hcC5wcmV2IDogdW5kZWZpbmVkO1xuICAgICAgICBsZXQgdGV4dCA9IHRoaXMubG9hZE1hcChvcHRzLmZyb20sIHByZXYpO1xuICAgICAgICBpZiAoIHRleHQgKSB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGluc3RhbmNlIG9mIGBTb3VyY2VNYXBHZW5lcmF0b3JgIGNsYXNzXG4gICAgICogZnJvbSB0aGUgYHNvdXJjZS1tYXBgIGxpYnJhcnkgdG8gd29yayB3aXRoIHNvdXJjZSBtYXAgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBJdCBpcyBsYXp5IG1ldGhvZCwgc28gaXQgd2lsbCBjcmVhdGUgb2JqZWN0IG9ubHkgb24gZmlyc3QgY2FsbFxuICAgICAqIGFuZCB0aGVuIGl0IHdpbGwgdXNlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U291cmNlTWFwR2VuZXJhdG9yfSBvYmplY3Qgd2l0aCBzb3VyY2UgbWFwIGluZm9ybWF0aW9uXG4gICAgICovXG4gICAgY29uc3VtZXIoKSB7XG4gICAgICAgIGlmICggIXRoaXMuY29uc3VtZXJDYWNoZSApIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3VtZXJDYWNoZSA9IG5ldyBtb3ppbGxhLlNvdXJjZU1hcENvbnN1bWVyKHRoaXMudGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3VtZXJDYWNoZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb2VzIHNvdXJjZSBtYXAgY29udGFpbnMgYHNvdXJjZXNDb250ZW50YCB3aXRoIGlucHV0IHNvdXJjZSB0ZXh0LlxuICAgICAqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gSXMgYHNvdXJjZXNDb250ZW50YCBwcmVzZW50XG4gICAgICovXG4gICAgd2l0aENvbnRlbnQoKSB7XG4gICAgICAgIHJldHVybiAhISh0aGlzLmNvbnN1bWVyKCkuc291cmNlc0NvbnRlbnQgJiZcbiAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZXIoKS5zb3VyY2VzQ29udGVudC5sZW5ndGggPiAwKTtcbiAgICB9XG5cbiAgICBzdGFydFdpdGgoc3RyaW5nLCBzdGFydCkge1xuICAgICAgICBpZiAoICFzdHJpbmcgKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBzdHJpbmcuc3Vic3RyKDAsIHN0YXJ0Lmxlbmd0aCkgPT09IHN0YXJ0O1xuICAgIH1cblxuICAgIGxvYWRBbm5vdGF0aW9uKGNzcykge1xuICAgICAgICBsZXQgbWF0Y2ggPSBjc3MubWF0Y2goL1xcL1xcKlxccyojIHNvdXJjZU1hcHBpbmdVUkw9KC4qKVxccypcXCpcXC8vKTtcbiAgICAgICAgaWYgKCBtYXRjaCApIHRoaXMuYW5ub3RhdGlvbiA9IG1hdGNoWzFdLnRyaW0oKTtcbiAgICB9XG5cbiAgICBkZWNvZGVJbmxpbmUodGV4dCkge1xuICAgICAgICAvLyBkYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXG4gICAgICAgIC8vIGRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LFxuICAgICAgICAvLyBkYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFxuICAgICAgICBsZXQgYmFzZVVyaSA9IC9eZGF0YTphcHBsaWNhdGlvblxcL2pzb247KD86Y2hhcnNldD11dGYtPzg7KT9iYXNlNjQsLztcbiAgICAgICAgbGV0IHVyaSAgICAgPSAnZGF0YTphcHBsaWNhdGlvbi9qc29uLCc7XG5cbiAgICAgICAgaWYgKCB0aGlzLnN0YXJ0V2l0aCh0ZXh0LCB1cmkpICkge1xuICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCggdGV4dC5zdWJzdHIodXJpLmxlbmd0aCkgKTtcblxuICAgICAgICB9IGVsc2UgaWYgKCBiYXNlVXJpLnRlc3QodGV4dCkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUJhc2U2NCh0ZXh0LnN1YnN0cihSZWdFeHAubGFzdE1hdGNoLmxlbmd0aCkpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZW5jb2RpbmcgPSB0ZXh0Lm1hdGNoKC9kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjsoW14sXSspLC8pWzFdO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzb3VyY2UgbWFwIGVuY29kaW5nICcgKyBlbmNvZGluZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2FkTWFwKGZpbGUsIHByZXYpIHtcbiAgICAgICAgaWYgKCBwcmV2ID09PSBmYWxzZSApIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAoIHByZXYgKSB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBwcmV2ID09PSAnc3RyaW5nJyApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiBwcmV2ID09PSAnZnVuY3Rpb24nICkge1xuICAgICAgICAgICAgICAgIGxldCBwcmV2UGF0aCA9IHByZXYoZmlsZSk7XG4gICAgICAgICAgICAgICAgaWYgKCBwcmV2UGF0aCAmJiBmcy5leGlzdHNTeW5jICYmIGZzLmV4aXN0c1N5bmMocHJldlBhdGgpICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKHByZXZQYXRoLCAndXRmLTgnKS50b1N0cmluZygpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBsb2FkIHByZXZpb3VzIHNvdXJjZSBtYXA6ICcgK1xuICAgICAgICAgICAgICAgICAgICBwcmV2UGF0aC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBwcmV2IGluc3RhbmNlb2YgbW96aWxsYS5Tb3VyY2VNYXBDb25zdW1lciApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW96aWxsYS5Tb3VyY2VNYXBHZW5lcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgLmZyb21Tb3VyY2VNYXAocHJldikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByZXYgaW5zdGFuY2VvZiBtb3ppbGxhLlNvdXJjZU1hcEdlbmVyYXRvciApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldi50b1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggdGhpcy5pc01hcChwcmV2KSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocHJldik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgcHJldmlvdXMgc291cmNlIG1hcCBmb3JtYXQ6ICcgK1xuICAgICAgICAgICAgICAgICAgICBwcmV2LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMuaW5saW5lICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlSW5saW5lKHRoaXMuYW5ub3RhdGlvbik7XG5cbiAgICAgICAgfSBlbHNlIGlmICggdGhpcy5hbm5vdGF0aW9uICkge1xuICAgICAgICAgICAgbGV0IG1hcCA9IHRoaXMuYW5ub3RhdGlvbjtcbiAgICAgICAgICAgIGlmICggZmlsZSApIG1hcCA9IHBhdGguam9pbihwYXRoLmRpcm5hbWUoZmlsZSksIG1hcCk7XG5cbiAgICAgICAgICAgIHRoaXMucm9vdCA9IHBhdGguZGlybmFtZShtYXApO1xuICAgICAgICAgICAgaWYgKCBmcy5leGlzdHNTeW5jICYmIGZzLmV4aXN0c1N5bmMobWFwKSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKG1hcCwgJ3V0Zi04JykudG9TdHJpbmcoKS50cmltKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzTWFwKG1hcCkge1xuICAgICAgICBpZiAoIHR5cGVvZiBtYXAgIT09ICdvYmplY3QnICkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHlwZW9mIG1hcC5tYXBwaW5ncyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgIHR5cGVvZiBtYXAuX21hcHBpbmdzID09PSAnc3RyaW5nJztcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByZXZpb3VzTWFwO1xuIl19

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),
/* 90 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 91 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 92 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(12);

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.MappingList = MappingList;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(12);
var binarySearch = __webpack_require__(95);
var ArraySet = __webpack_require__(42).ArraySet;
var base64VLQ = __webpack_require__(41);
var quickSort = __webpack_require__(96).quickSort;

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;


/***/ }),
/* 95 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};


/***/ }),
/* 96 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
exports.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = __webpack_require__(40).SourceMapGenerator;
var util = __webpack_require__(12);

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;


/***/ }),
/* 98 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = warnOnce;
var printed = {};

function warnOnce(message) {
    if (printed[message]) return;
    printed[message] = true;

    if (typeof console !== 'undefined' && console.warn) console.warn(message);
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhcm4tb25jZS5lczYiXSwibmFtZXMiOlsid2Fybk9uY2UiLCJwcmludGVkIiwibWVzc2FnZSIsImNvbnNvbGUiLCJ3YXJuIl0sIm1hcHBpbmdzIjoiOzs7a0JBRXdCQSxRO0FBRnhCLElBQUlDLFVBQVUsRUFBZDs7QUFFZSxTQUFTRCxRQUFULENBQWtCRSxPQUFsQixFQUEyQjtBQUN0QyxRQUFLRCxRQUFRQyxPQUFSLENBQUwsRUFBd0I7QUFDeEJELFlBQVFDLE9BQVIsSUFBbUIsSUFBbkI7O0FBRUEsUUFBSyxPQUFPQyxPQUFQLEtBQW1CLFdBQW5CLElBQWtDQSxRQUFRQyxJQUEvQyxFQUFzREQsUUFBUUMsSUFBUixDQUFhRixPQUFiO0FBQ3pEIiwiZmlsZSI6Indhcm4tb25jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBwcmludGVkID0geyB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3YXJuT25jZShtZXNzYWdlKSB7XG4gICAgaWYgKCBwcmludGVkW21lc3NhZ2VdICkgcmV0dXJuO1xuICAgIHByaW50ZWRbbWVzc2FnZV0gPSB0cnVlO1xuXG4gICAgaWYgKCB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuICkgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xufVxuIl19


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

exports.__esModule = true;

var _sourceMap = __webpack_require__(39);

var _sourceMap2 = _interopRequireDefault(_sourceMap);

var _path = __webpack_require__(20);

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MapGenerator = function () {
    function MapGenerator(stringify, root, opts) {
        _classCallCheck(this, MapGenerator);

        this.stringify = stringify;
        this.mapOpts = opts.map || {};
        this.root = root;
        this.opts = opts;
    }

    MapGenerator.prototype.isMap = function isMap() {
        if (typeof this.opts.map !== 'undefined') {
            return !!this.opts.map;
        } else {
            return this.previous().length > 0;
        }
    };

    MapGenerator.prototype.previous = function previous() {
        var _this = this;

        if (!this.previousMaps) {
            this.previousMaps = [];
            this.root.walk(function (node) {
                if (node.source && node.source.input.map) {
                    var map = node.source.input.map;
                    if (_this.previousMaps.indexOf(map) === -1) {
                        _this.previousMaps.push(map);
                    }
                }
            });
        }

        return this.previousMaps;
    };

    MapGenerator.prototype.isInline = function isInline() {
        if (typeof this.mapOpts.inline !== 'undefined') {
            return this.mapOpts.inline;
        }

        var annotation = this.mapOpts.annotation;
        if (typeof annotation !== 'undefined' && annotation !== true) {
            return false;
        }

        if (this.previous().length) {
            return this.previous().some(function (i) {
                return i.inline;
            });
        } else {
            return true;
        }
    };

    MapGenerator.prototype.isSourcesContent = function isSourcesContent() {
        if (typeof this.mapOpts.sourcesContent !== 'undefined') {
            return this.mapOpts.sourcesContent;
        }
        if (this.previous().length) {
            return this.previous().some(function (i) {
                return i.withContent();
            });
        } else {
            return true;
        }
    };

    MapGenerator.prototype.clearAnnotation = function clearAnnotation() {
        if (this.mapOpts.annotation === false) return;

        var node = void 0;
        for (var i = this.root.nodes.length - 1; i >= 0; i--) {
            node = this.root.nodes[i];
            if (node.type !== 'comment') continue;
            if (node.text.indexOf('# sourceMappingURL=') === 0) {
                this.root.removeChild(i);
            }
        }
    };

    MapGenerator.prototype.setSourcesContent = function setSourcesContent() {
        var _this2 = this;

        var already = {};
        this.root.walk(function (node) {
            if (node.source) {
                var from = node.source.input.from;
                if (from && !already[from]) {
                    already[from] = true;
                    var relative = _this2.relative(from);
                    _this2.map.setSourceContent(relative, node.source.input.css);
                }
            }
        });
    };

    MapGenerator.prototype.applyPrevMaps = function applyPrevMaps() {
        for (var _iterator = this.previous(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var prev = _ref;

            var from = this.relative(prev.file);
            var root = prev.root || _path2.default.dirname(prev.file);
            var map = void 0;

            if (this.mapOpts.sourcesContent === false) {
                map = new _sourceMap2.default.SourceMapConsumer(prev.text);
                if (map.sourcesContent) {
                    map.sourcesContent = map.sourcesContent.map(function () {
                        return null;
                    });
                }
            } else {
                map = prev.consumer();
            }

            this.map.applySourceMap(map, from, this.relative(root));
        }
    };

    MapGenerator.prototype.isAnnotation = function isAnnotation() {
        if (this.isInline()) {
            return true;
        } else if (typeof this.mapOpts.annotation !== 'undefined') {
            return this.mapOpts.annotation;
        } else if (this.previous().length) {
            return this.previous().some(function (i) {
                return i.annotation;
            });
        } else {
            return true;
        }
    };

    MapGenerator.prototype.toBase64 = function toBase64(str) {
        if (Buffer) {
            if (Buffer.from && Buffer.from !== Uint8Array.from) {
                return Buffer.from(str).toString('base64');
            } else {
                return new Buffer(str).toString('base64');
            }
        } else {
            return window.btoa(unescape(encodeURIComponent(str)));
        }
    };

    MapGenerator.prototype.addAnnotation = function addAnnotation() {
        var content = void 0;

        if (this.isInline()) {

            content = 'data:application/json;base64,' + this.toBase64(this.map.toString());
        } else if (typeof this.mapOpts.annotation === 'string') {
            content = this.mapOpts.annotation;
        } else {
            content = this.outputFile() + '.map';
        }

        var eol = '\n';
        if (this.css.indexOf('\r\n') !== -1) eol = '\r\n';

        this.css += eol + '/*# sourceMappingURL=' + content + ' */';
    };

    MapGenerator.prototype.outputFile = function outputFile() {
        if (this.opts.to) {
            return this.relative(this.opts.to);
        } else if (this.opts.from) {
            return this.relative(this.opts.from);
        } else {
            return 'to.css';
        }
    };

    MapGenerator.prototype.generateMap = function generateMap() {
        this.generateString();
        if (this.isSourcesContent()) this.setSourcesContent();
        if (this.previous().length > 0) this.applyPrevMaps();
        if (this.isAnnotation()) this.addAnnotation();

        if (this.isInline()) {
            return [this.css];
        } else {
            return [this.css, this.map];
        }
    };

    MapGenerator.prototype.relative = function relative(file) {
        if (file.indexOf('<') === 0) return file;
        if (/^\w+:\/\//.test(file)) return file;

        var from = this.opts.to ? _path2.default.dirname(this.opts.to) : '.';

        if (typeof this.mapOpts.annotation === 'string') {
            from = _path2.default.dirname(_path2.default.resolve(from, this.mapOpts.annotation));
        }

        file = _path2.default.relative(from, file);
        if (_path2.default.sep === '\\') {
            return file.replace(/\\/g, '/');
        } else {
            return file;
        }
    };

    MapGenerator.prototype.sourcePath = function sourcePath(node) {
        if (this.mapOpts.from) {
            return this.mapOpts.from;
        } else {
            return this.relative(node.source.input.from);
        }
    };

    MapGenerator.prototype.generateString = function generateString() {
        var _this3 = this;

        this.css = '';
        this.map = new _sourceMap2.default.SourceMapGenerator({ file: this.outputFile() });

        var line = 1;
        var column = 1;

        var lines = void 0,
            last = void 0;
        this.stringify(this.root, function (str, node, type) {
            _this3.css += str;

            if (node && type !== 'end') {
                if (node.source && node.source.start) {
                    _this3.map.addMapping({
                        source: _this3.sourcePath(node),
                        generated: { line: line, column: column - 1 },
                        original: {
                            line: node.source.start.line,
                            column: node.source.start.column - 1
                        }
                    });
                } else {
                    _this3.map.addMapping({
                        source: '<no source>',
                        original: { line: 1, column: 0 },
                        generated: { line: line, column: column - 1 }
                    });
                }
            }

            lines = str.match(/\n/g);
            if (lines) {
                line += lines.length;
                last = str.lastIndexOf('\n');
                column = str.length - last;
            } else {
                column += str.length;
            }

            if (node && type !== 'start') {
                if (node.source && node.source.end) {
                    _this3.map.addMapping({
                        source: _this3.sourcePath(node),
                        generated: { line: line, column: column - 1 },
                        original: {
                            line: node.source.end.line,
                            column: node.source.end.column
                        }
                    });
                } else {
                    _this3.map.addMapping({
                        source: '<no source>',
                        original: { line: 1, column: 0 },
                        generated: { line: line, column: column - 1 }
                    });
                }
            }
        });
    };

    MapGenerator.prototype.generate = function generate() {
        this.clearAnnotation();

        if (this.isMap()) {
            return this.generateMap();
        } else {
            var result = '';
            this.stringify(this.root, function (i) {
                result += i;
            });
            return [result];
        }
    };

    return MapGenerator;
}();

exports.default = MapGenerator;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcC1nZW5lcmF0b3IuZXM2Il0sIm5hbWVzIjpbIk1hcEdlbmVyYXRvciIsInN0cmluZ2lmeSIsInJvb3QiLCJvcHRzIiwibWFwT3B0cyIsIm1hcCIsImlzTWFwIiwicHJldmlvdXMiLCJsZW5ndGgiLCJwcmV2aW91c01hcHMiLCJ3YWxrIiwibm9kZSIsInNvdXJjZSIsImlucHV0IiwiaW5kZXhPZiIsInB1c2giLCJpc0lubGluZSIsImlubGluZSIsImFubm90YXRpb24iLCJzb21lIiwiaSIsImlzU291cmNlc0NvbnRlbnQiLCJzb3VyY2VzQ29udGVudCIsIndpdGhDb250ZW50IiwiY2xlYXJBbm5vdGF0aW9uIiwibm9kZXMiLCJ0eXBlIiwidGV4dCIsInJlbW92ZUNoaWxkIiwic2V0U291cmNlc0NvbnRlbnQiLCJhbHJlYWR5IiwiZnJvbSIsInJlbGF0aXZlIiwic2V0U291cmNlQ29udGVudCIsImNzcyIsImFwcGx5UHJldk1hcHMiLCJwcmV2IiwiZmlsZSIsImRpcm5hbWUiLCJTb3VyY2VNYXBDb25zdW1lciIsImNvbnN1bWVyIiwiYXBwbHlTb3VyY2VNYXAiLCJpc0Fubm90YXRpb24iLCJ0b0Jhc2U2NCIsInN0ciIsIkJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJ0b1N0cmluZyIsIndpbmRvdyIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImFkZEFubm90YXRpb24iLCJjb250ZW50Iiwib3V0cHV0RmlsZSIsImVvbCIsInRvIiwiZ2VuZXJhdGVNYXAiLCJnZW5lcmF0ZVN0cmluZyIsInRlc3QiLCJyZXNvbHZlIiwic2VwIiwicmVwbGFjZSIsInNvdXJjZVBhdGgiLCJTb3VyY2VNYXBHZW5lcmF0b3IiLCJsaW5lIiwiY29sdW1uIiwibGluZXMiLCJsYXN0Iiwic3RhcnQiLCJhZGRNYXBwaW5nIiwiZ2VuZXJhdGVkIiwib3JpZ2luYWwiLCJtYXRjaCIsImxhc3RJbmRleE9mIiwiZW5kIiwiZ2VuZXJhdGUiLCJyZXN1bHQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7OztJQUVxQkEsWTtBQUVqQiwwQkFBWUMsU0FBWixFQUF1QkMsSUFBdkIsRUFBNkJDLElBQTdCLEVBQW1DO0FBQUE7O0FBQy9CLGFBQUtGLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsYUFBS0csT0FBTCxHQUFpQkQsS0FBS0UsR0FBTCxJQUFZLEVBQTdCO0FBQ0EsYUFBS0gsSUFBTCxHQUFpQkEsSUFBakI7QUFDQSxhQUFLQyxJQUFMLEdBQWlCQSxJQUFqQjtBQUNIOzsyQkFFREcsSyxvQkFBUTtBQUNKLFlBQUssT0FBTyxLQUFLSCxJQUFMLENBQVVFLEdBQWpCLEtBQXlCLFdBQTlCLEVBQTRDO0FBQ3hDLG1CQUFPLENBQUMsQ0FBQyxLQUFLRixJQUFMLENBQVVFLEdBQW5CO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsbUJBQU8sS0FBS0UsUUFBTCxHQUFnQkMsTUFBaEIsR0FBeUIsQ0FBaEM7QUFDSDtBQUNKLEs7OzJCQUVERCxRLHVCQUFXO0FBQUE7O0FBQ1AsWUFBSyxDQUFDLEtBQUtFLFlBQVgsRUFBMEI7QUFDdEIsaUJBQUtBLFlBQUwsR0FBb0IsRUFBcEI7QUFDQSxpQkFBS1AsSUFBTCxDQUFVUSxJQUFWLENBQWdCLGdCQUFRO0FBQ3BCLG9CQUFLQyxLQUFLQyxNQUFMLElBQWVELEtBQUtDLE1BQUwsQ0FBWUMsS0FBWixDQUFrQlIsR0FBdEMsRUFBNEM7QUFDeEMsd0JBQUlBLE1BQU1NLEtBQUtDLE1BQUwsQ0FBWUMsS0FBWixDQUFrQlIsR0FBNUI7QUFDQSx3QkFBSyxNQUFLSSxZQUFMLENBQWtCSyxPQUFsQixDQUEwQlQsR0FBMUIsTUFBbUMsQ0FBQyxDQUF6QyxFQUE2QztBQUN6Qyw4QkFBS0ksWUFBTCxDQUFrQk0sSUFBbEIsQ0FBdUJWLEdBQXZCO0FBQ0g7QUFDSjtBQUNKLGFBUEQ7QUFRSDs7QUFFRCxlQUFPLEtBQUtJLFlBQVo7QUFDSCxLOzsyQkFFRE8sUSx1QkFBVztBQUNQLFlBQUssT0FBTyxLQUFLWixPQUFMLENBQWFhLE1BQXBCLEtBQStCLFdBQXBDLEVBQWtEO0FBQzlDLG1CQUFPLEtBQUtiLE9BQUwsQ0FBYWEsTUFBcEI7QUFDSDs7QUFFRCxZQUFJQyxhQUFhLEtBQUtkLE9BQUwsQ0FBYWMsVUFBOUI7QUFDQSxZQUFLLE9BQU9BLFVBQVAsS0FBc0IsV0FBdEIsSUFBcUNBLGVBQWUsSUFBekQsRUFBZ0U7QUFDNUQsbUJBQU8sS0FBUDtBQUNIOztBQUVELFlBQUssS0FBS1gsUUFBTCxHQUFnQkMsTUFBckIsRUFBOEI7QUFDMUIsbUJBQU8sS0FBS0QsUUFBTCxHQUFnQlksSUFBaEIsQ0FBc0I7QUFBQSx1QkFBS0MsRUFBRUgsTUFBUDtBQUFBLGFBQXRCLENBQVA7QUFDSCxTQUZELE1BRU87QUFDSCxtQkFBTyxJQUFQO0FBQ0g7QUFDSixLOzsyQkFFREksZ0IsK0JBQW1CO0FBQ2YsWUFBSyxPQUFPLEtBQUtqQixPQUFMLENBQWFrQixjQUFwQixLQUF1QyxXQUE1QyxFQUEwRDtBQUN0RCxtQkFBTyxLQUFLbEIsT0FBTCxDQUFha0IsY0FBcEI7QUFDSDtBQUNELFlBQUssS0FBS2YsUUFBTCxHQUFnQkMsTUFBckIsRUFBOEI7QUFDMUIsbUJBQU8sS0FBS0QsUUFBTCxHQUFnQlksSUFBaEIsQ0FBc0I7QUFBQSx1QkFBS0MsRUFBRUcsV0FBRixFQUFMO0FBQUEsYUFBdEIsQ0FBUDtBQUNILFNBRkQsTUFFTztBQUNILG1CQUFPLElBQVA7QUFDSDtBQUNKLEs7OzJCQUVEQyxlLDhCQUFrQjtBQUNkLFlBQUssS0FBS3BCLE9BQUwsQ0FBYWMsVUFBYixLQUE0QixLQUFqQyxFQUF5Qzs7QUFFekMsWUFBSVAsYUFBSjtBQUNBLGFBQU0sSUFBSVMsSUFBSSxLQUFLbEIsSUFBTCxDQUFVdUIsS0FBVixDQUFnQmpCLE1BQWhCLEdBQXlCLENBQXZDLEVBQTBDWSxLQUFLLENBQS9DLEVBQWtEQSxHQUFsRCxFQUF3RDtBQUNwRFQsbUJBQU8sS0FBS1QsSUFBTCxDQUFVdUIsS0FBVixDQUFnQkwsQ0FBaEIsQ0FBUDtBQUNBLGdCQUFLVCxLQUFLZSxJQUFMLEtBQWMsU0FBbkIsRUFBK0I7QUFDL0IsZ0JBQUtmLEtBQUtnQixJQUFMLENBQVViLE9BQVYsQ0FBa0IscUJBQWxCLE1BQTZDLENBQWxELEVBQXNEO0FBQ2xELHFCQUFLWixJQUFMLENBQVUwQixXQUFWLENBQXNCUixDQUF0QjtBQUNIO0FBQ0o7QUFDSixLOzsyQkFFRFMsaUIsZ0NBQW9CO0FBQUE7O0FBQ2hCLFlBQUlDLFVBQVUsRUFBZDtBQUNBLGFBQUs1QixJQUFMLENBQVVRLElBQVYsQ0FBZ0IsZ0JBQVE7QUFDcEIsZ0JBQUtDLEtBQUtDLE1BQVYsRUFBbUI7QUFDZixvQkFBSW1CLE9BQU9wQixLQUFLQyxNQUFMLENBQVlDLEtBQVosQ0FBa0JrQixJQUE3QjtBQUNBLG9CQUFLQSxRQUFRLENBQUNELFFBQVFDLElBQVIsQ0FBZCxFQUE4QjtBQUMxQkQsNEJBQVFDLElBQVIsSUFBZ0IsSUFBaEI7QUFDQSx3QkFBSUMsV0FBVyxPQUFLQSxRQUFMLENBQWNELElBQWQsQ0FBZjtBQUNBLDJCQUFLMUIsR0FBTCxDQUFTNEIsZ0JBQVQsQ0FBMEJELFFBQTFCLEVBQW9DckIsS0FBS0MsTUFBTCxDQUFZQyxLQUFaLENBQWtCcUIsR0FBdEQ7QUFDSDtBQUNKO0FBQ0osU0FURDtBQVVILEs7OzJCQUVEQyxhLDRCQUFnQjtBQUNaLDZCQUFrQixLQUFLNUIsUUFBTCxFQUFsQixrSEFBb0M7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLGdCQUExQjZCLElBQTBCOztBQUNoQyxnQkFBSUwsT0FBTyxLQUFLQyxRQUFMLENBQWNJLEtBQUtDLElBQW5CLENBQVg7QUFDQSxnQkFBSW5DLE9BQU9rQyxLQUFLbEMsSUFBTCxJQUFhLGVBQUtvQyxPQUFMLENBQWFGLEtBQUtDLElBQWxCLENBQXhCO0FBQ0EsZ0JBQUloQyxZQUFKOztBQUVBLGdCQUFLLEtBQUtELE9BQUwsQ0FBYWtCLGNBQWIsS0FBZ0MsS0FBckMsRUFBNkM7QUFDekNqQixzQkFBTSxJQUFJLG9CQUFRa0MsaUJBQVosQ0FBOEJILEtBQUtULElBQW5DLENBQU47QUFDQSxvQkFBS3RCLElBQUlpQixjQUFULEVBQTBCO0FBQ3RCakIsd0JBQUlpQixjQUFKLEdBQXFCakIsSUFBSWlCLGNBQUosQ0FBbUJqQixHQUFuQixDQUF3QjtBQUFBLCtCQUFNLElBQU47QUFBQSxxQkFBeEIsQ0FBckI7QUFDSDtBQUNKLGFBTEQsTUFLTztBQUNIQSxzQkFBTStCLEtBQUtJLFFBQUwsRUFBTjtBQUNIOztBQUVELGlCQUFLbkMsR0FBTCxDQUFTb0MsY0FBVCxDQUF3QnBDLEdBQXhCLEVBQTZCMEIsSUFBN0IsRUFBbUMsS0FBS0MsUUFBTCxDQUFjOUIsSUFBZCxDQUFuQztBQUNIO0FBQ0osSzs7MkJBRUR3QyxZLDJCQUFlO0FBQ1gsWUFBSyxLQUFLMUIsUUFBTCxFQUFMLEVBQXVCO0FBQ25CLG1CQUFPLElBQVA7QUFDSCxTQUZELE1BRU8sSUFBSyxPQUFPLEtBQUtaLE9BQUwsQ0FBYWMsVUFBcEIsS0FBbUMsV0FBeEMsRUFBc0Q7QUFDekQsbUJBQU8sS0FBS2QsT0FBTCxDQUFhYyxVQUFwQjtBQUNILFNBRk0sTUFFQSxJQUFLLEtBQUtYLFFBQUwsR0FBZ0JDLE1BQXJCLEVBQThCO0FBQ2pDLG1CQUFPLEtBQUtELFFBQUwsR0FBZ0JZLElBQWhCLENBQXNCO0FBQUEsdUJBQUtDLEVBQUVGLFVBQVA7QUFBQSxhQUF0QixDQUFQO0FBQ0gsU0FGTSxNQUVBO0FBQ0gsbUJBQU8sSUFBUDtBQUNIO0FBQ0osSzs7MkJBRUR5QixRLHFCQUFTQyxHLEVBQUs7QUFDVixZQUFLQyxNQUFMLEVBQWM7QUFDVixnQkFBS0EsT0FBT2QsSUFBUCxJQUFlYyxPQUFPZCxJQUFQLEtBQWdCZSxXQUFXZixJQUEvQyxFQUFzRDtBQUNsRCx1QkFBT2MsT0FBT2QsSUFBUCxDQUFZYSxHQUFaLEVBQWlCRyxRQUFqQixDQUEwQixRQUExQixDQUFQO0FBQ0gsYUFGRCxNQUVPO0FBQ0gsdUJBQU8sSUFBSUYsTUFBSixDQUFXRCxHQUFYLEVBQWdCRyxRQUFoQixDQUF5QixRQUF6QixDQUFQO0FBQ0g7QUFDSixTQU5ELE1BTU87QUFDSCxtQkFBT0MsT0FBT0MsSUFBUCxDQUFZQyxTQUFTQyxtQkFBbUJQLEdBQW5CLENBQVQsQ0FBWixDQUFQO0FBQ0g7QUFDSixLOzsyQkFFRFEsYSw0QkFBZ0I7QUFDWixZQUFJQyxnQkFBSjs7QUFFQSxZQUFLLEtBQUtyQyxRQUFMLEVBQUwsRUFBdUI7O0FBRW5CcUMsc0JBQVUsa0NBQ04sS0FBS1YsUUFBTCxDQUFjLEtBQUt0QyxHQUFMLENBQVMwQyxRQUFULEVBQWQsQ0FESjtBQUdILFNBTEQsTUFLTyxJQUFLLE9BQU8sS0FBSzNDLE9BQUwsQ0FBYWMsVUFBcEIsS0FBbUMsUUFBeEMsRUFBbUQ7QUFDdERtQyxzQkFBVSxLQUFLakQsT0FBTCxDQUFhYyxVQUF2QjtBQUVILFNBSE0sTUFHQTtBQUNIbUMsc0JBQVUsS0FBS0MsVUFBTCxLQUFvQixNQUE5QjtBQUNIOztBQUVELFlBQUlDLE1BQVEsSUFBWjtBQUNBLFlBQUssS0FBS3JCLEdBQUwsQ0FBU3BCLE9BQVQsQ0FBaUIsTUFBakIsTUFBNkIsQ0FBQyxDQUFuQyxFQUF1Q3lDLE1BQU0sTUFBTjs7QUFFdkMsYUFBS3JCLEdBQUwsSUFBWXFCLE1BQU0sdUJBQU4sR0FBZ0NGLE9BQWhDLEdBQTBDLEtBQXREO0FBQ0gsSzs7MkJBRURDLFUseUJBQWE7QUFDVCxZQUFLLEtBQUtuRCxJQUFMLENBQVVxRCxFQUFmLEVBQW9CO0FBQ2hCLG1CQUFPLEtBQUt4QixRQUFMLENBQWMsS0FBSzdCLElBQUwsQ0FBVXFELEVBQXhCLENBQVA7QUFDSCxTQUZELE1BRU8sSUFBSyxLQUFLckQsSUFBTCxDQUFVNEIsSUFBZixFQUFzQjtBQUN6QixtQkFBTyxLQUFLQyxRQUFMLENBQWMsS0FBSzdCLElBQUwsQ0FBVTRCLElBQXhCLENBQVA7QUFDSCxTQUZNLE1BRUE7QUFDSCxtQkFBTyxRQUFQO0FBQ0g7QUFDSixLOzsyQkFFRDBCLFcsMEJBQWM7QUFDVixhQUFLQyxjQUFMO0FBQ0EsWUFBSyxLQUFLckMsZ0JBQUwsRUFBTCxFQUFrQyxLQUFLUSxpQkFBTDtBQUNsQyxZQUFLLEtBQUt0QixRQUFMLEdBQWdCQyxNQUFoQixHQUF5QixDQUE5QixFQUFrQyxLQUFLMkIsYUFBTDtBQUNsQyxZQUFLLEtBQUtPLFlBQUwsRUFBTCxFQUFrQyxLQUFLVSxhQUFMOztBQUVsQyxZQUFLLEtBQUtwQyxRQUFMLEVBQUwsRUFBdUI7QUFDbkIsbUJBQU8sQ0FBQyxLQUFLa0IsR0FBTixDQUFQO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsbUJBQU8sQ0FBQyxLQUFLQSxHQUFOLEVBQVcsS0FBSzdCLEdBQWhCLENBQVA7QUFDSDtBQUNKLEs7OzJCQUVEMkIsUSxxQkFBU0ssSSxFQUFNO0FBQ1gsWUFBS0EsS0FBS3ZCLE9BQUwsQ0FBYSxHQUFiLE1BQXNCLENBQTNCLEVBQStCLE9BQU91QixJQUFQO0FBQy9CLFlBQUssWUFBWXNCLElBQVosQ0FBaUJ0QixJQUFqQixDQUFMLEVBQThCLE9BQU9BLElBQVA7O0FBRTlCLFlBQUlOLE9BQU8sS0FBSzVCLElBQUwsQ0FBVXFELEVBQVYsR0FBZSxlQUFLbEIsT0FBTCxDQUFhLEtBQUtuQyxJQUFMLENBQVVxRCxFQUF2QixDQUFmLEdBQTRDLEdBQXZEOztBQUVBLFlBQUssT0FBTyxLQUFLcEQsT0FBTCxDQUFhYyxVQUFwQixLQUFtQyxRQUF4QyxFQUFtRDtBQUMvQ2EsbUJBQU8sZUFBS08sT0FBTCxDQUFjLGVBQUtzQixPQUFMLENBQWE3QixJQUFiLEVBQW1CLEtBQUszQixPQUFMLENBQWFjLFVBQWhDLENBQWQsQ0FBUDtBQUNIOztBQUVEbUIsZUFBTyxlQUFLTCxRQUFMLENBQWNELElBQWQsRUFBb0JNLElBQXBCLENBQVA7QUFDQSxZQUFLLGVBQUt3QixHQUFMLEtBQWEsSUFBbEIsRUFBeUI7QUFDckIsbUJBQU94QixLQUFLeUIsT0FBTCxDQUFhLEtBQWIsRUFBb0IsR0FBcEIsQ0FBUDtBQUNILFNBRkQsTUFFTztBQUNILG1CQUFPekIsSUFBUDtBQUNIO0FBQ0osSzs7MkJBRUQwQixVLHVCQUFXcEQsSSxFQUFNO0FBQ2IsWUFBSyxLQUFLUCxPQUFMLENBQWEyQixJQUFsQixFQUF5QjtBQUNyQixtQkFBTyxLQUFLM0IsT0FBTCxDQUFhMkIsSUFBcEI7QUFDSCxTQUZELE1BRU87QUFDSCxtQkFBTyxLQUFLQyxRQUFMLENBQWNyQixLQUFLQyxNQUFMLENBQVlDLEtBQVosQ0FBa0JrQixJQUFoQyxDQUFQO0FBQ0g7QUFDSixLOzsyQkFFRDJCLGMsNkJBQWlCO0FBQUE7O0FBQ2IsYUFBS3hCLEdBQUwsR0FBVyxFQUFYO0FBQ0EsYUFBSzdCLEdBQUwsR0FBVyxJQUFJLG9CQUFRMkQsa0JBQVosQ0FBK0IsRUFBRTNCLE1BQU0sS0FBS2lCLFVBQUwsRUFBUixFQUEvQixDQUFYOztBQUVBLFlBQUlXLE9BQVMsQ0FBYjtBQUNBLFlBQUlDLFNBQVMsQ0FBYjs7QUFFQSxZQUFJQyxjQUFKO0FBQUEsWUFBV0MsYUFBWDtBQUNBLGFBQUtuRSxTQUFMLENBQWUsS0FBS0MsSUFBcEIsRUFBMEIsVUFBQzBDLEdBQUQsRUFBTWpDLElBQU4sRUFBWWUsSUFBWixFQUFxQjtBQUMzQyxtQkFBS1EsR0FBTCxJQUFZVSxHQUFaOztBQUVBLGdCQUFLakMsUUFBUWUsU0FBUyxLQUF0QixFQUE4QjtBQUMxQixvQkFBS2YsS0FBS0MsTUFBTCxJQUFlRCxLQUFLQyxNQUFMLENBQVl5RCxLQUFoQyxFQUF3QztBQUNwQywyQkFBS2hFLEdBQUwsQ0FBU2lFLFVBQVQsQ0FBb0I7QUFDaEIxRCxnQ0FBVyxPQUFLbUQsVUFBTCxDQUFnQnBELElBQWhCLENBREs7QUFFaEI0RCxtQ0FBVyxFQUFFTixVQUFGLEVBQVFDLFFBQVFBLFNBQVMsQ0FBekIsRUFGSztBQUdoQk0sa0NBQVc7QUFDUFAsa0NBQVF0RCxLQUFLQyxNQUFMLENBQVl5RCxLQUFaLENBQWtCSixJQURuQjtBQUVQQyxvQ0FBUXZELEtBQUtDLE1BQUwsQ0FBWXlELEtBQVosQ0FBa0JILE1BQWxCLEdBQTJCO0FBRjVCO0FBSEsscUJBQXBCO0FBUUgsaUJBVEQsTUFTTztBQUNILDJCQUFLN0QsR0FBTCxDQUFTaUUsVUFBVCxDQUFvQjtBQUNoQjFELGdDQUFXLGFBREs7QUFFaEI0RCxrQ0FBVyxFQUFFUCxNQUFNLENBQVIsRUFBV0MsUUFBUSxDQUFuQixFQUZLO0FBR2hCSyxtQ0FBVyxFQUFFTixVQUFGLEVBQVFDLFFBQVFBLFNBQVMsQ0FBekI7QUFISyxxQkFBcEI7QUFLSDtBQUNKOztBQUVEQyxvQkFBUXZCLElBQUk2QixLQUFKLENBQVUsS0FBVixDQUFSO0FBQ0EsZ0JBQUtOLEtBQUwsRUFBYTtBQUNURix3QkFBU0UsTUFBTTNELE1BQWY7QUFDQTRELHVCQUFTeEIsSUFBSThCLFdBQUosQ0FBZ0IsSUFBaEIsQ0FBVDtBQUNBUix5QkFBU3RCLElBQUlwQyxNQUFKLEdBQWE0RCxJQUF0QjtBQUNILGFBSkQsTUFJTztBQUNIRiwwQkFBVXRCLElBQUlwQyxNQUFkO0FBQ0g7O0FBRUQsZ0JBQUtHLFFBQVFlLFNBQVMsT0FBdEIsRUFBZ0M7QUFDNUIsb0JBQUtmLEtBQUtDLE1BQUwsSUFBZUQsS0FBS0MsTUFBTCxDQUFZK0QsR0FBaEMsRUFBc0M7QUFDbEMsMkJBQUt0RSxHQUFMLENBQVNpRSxVQUFULENBQW9CO0FBQ2hCMUQsZ0NBQVcsT0FBS21ELFVBQUwsQ0FBZ0JwRCxJQUFoQixDQURLO0FBRWhCNEQsbUNBQVcsRUFBRU4sVUFBRixFQUFRQyxRQUFRQSxTQUFTLENBQXpCLEVBRks7QUFHaEJNLGtDQUFXO0FBQ1BQLGtDQUFRdEQsS0FBS0MsTUFBTCxDQUFZK0QsR0FBWixDQUFnQlYsSUFEakI7QUFFUEMsb0NBQVF2RCxLQUFLQyxNQUFMLENBQVkrRCxHQUFaLENBQWdCVDtBQUZqQjtBQUhLLHFCQUFwQjtBQVFILGlCQVRELE1BU087QUFDSCwyQkFBSzdELEdBQUwsQ0FBU2lFLFVBQVQsQ0FBb0I7QUFDaEIxRCxnQ0FBVyxhQURLO0FBRWhCNEQsa0NBQVcsRUFBRVAsTUFBTSxDQUFSLEVBQVdDLFFBQVEsQ0FBbkIsRUFGSztBQUdoQkssbUNBQVcsRUFBRU4sVUFBRixFQUFRQyxRQUFRQSxTQUFTLENBQXpCO0FBSEsscUJBQXBCO0FBS0g7QUFDSjtBQUNKLFNBakREO0FBa0RILEs7OzJCQUVEVSxRLHVCQUFXO0FBQ1AsYUFBS3BELGVBQUw7O0FBRUEsWUFBSyxLQUFLbEIsS0FBTCxFQUFMLEVBQW9CO0FBQ2hCLG1CQUFPLEtBQUttRCxXQUFMLEVBQVA7QUFDSCxTQUZELE1BRU87QUFDSCxnQkFBSW9CLFNBQVMsRUFBYjtBQUNBLGlCQUFLNUUsU0FBTCxDQUFlLEtBQUtDLElBQXBCLEVBQTBCLGFBQUs7QUFDM0IyRSwwQkFBVXpELENBQVY7QUFDSCxhQUZEO0FBR0EsbUJBQU8sQ0FBQ3lELE1BQUQsQ0FBUDtBQUNIO0FBQ0osSzs7Ozs7a0JBalJnQjdFLFkiLCJmaWxlIjoibWFwLWdlbmVyYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb3ppbGxhIGZyb20gJ3NvdXJjZS1tYXAnO1xuaW1wb3J0IHBhdGggICAgZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcEdlbmVyYXRvciB7XG5cbiAgICBjb25zdHJ1Y3RvcihzdHJpbmdpZnksIHJvb3QsIG9wdHMpIHtcbiAgICAgICAgdGhpcy5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7XG4gICAgICAgIHRoaXMubWFwT3B0cyAgID0gb3B0cy5tYXAgfHwgeyB9O1xuICAgICAgICB0aGlzLnJvb3QgICAgICA9IHJvb3Q7XG4gICAgICAgIHRoaXMub3B0cyAgICAgID0gb3B0cztcbiAgICB9XG5cbiAgICBpc01hcCgpIHtcbiAgICAgICAgaWYgKCB0eXBlb2YgdGhpcy5vcHRzLm1hcCAhPT0gJ3VuZGVmaW5lZCcgKSB7XG4gICAgICAgICAgICByZXR1cm4gISF0aGlzLm9wdHMubWFwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldmlvdXMoKS5sZW5ndGggPiAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJldmlvdXMoKSB7XG4gICAgICAgIGlmICggIXRoaXMucHJldmlvdXNNYXBzICkge1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c01hcHMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMucm9vdC53YWxrKCBub2RlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIG5vZGUuc291cmNlICYmIG5vZGUuc291cmNlLmlucHV0Lm1hcCApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hcCA9IG5vZGUuc291cmNlLmlucHV0Lm1hcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLnByZXZpb3VzTWFwcy5pbmRleE9mKG1hcCkgPT09IC0xICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c01hcHMucHVzaChtYXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wcmV2aW91c01hcHM7XG4gICAgfVxuXG4gICAgaXNJbmxpbmUoKSB7XG4gICAgICAgIGlmICggdHlwZW9mIHRoaXMubWFwT3B0cy5pbmxpbmUgIT09ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwT3B0cy5pbmxpbmU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYW5ub3RhdGlvbiA9IHRoaXMubWFwT3B0cy5hbm5vdGF0aW9uO1xuICAgICAgICBpZiAoIHR5cGVvZiBhbm5vdGF0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBhbm5vdGF0aW9uICE9PSB0cnVlICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCB0aGlzLnByZXZpb3VzKCkubGVuZ3RoICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldmlvdXMoKS5zb21lKCBpID0+IGkuaW5saW5lICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzU291cmNlc0NvbnRlbnQoKSB7XG4gICAgICAgIGlmICggdHlwZW9mIHRoaXMubWFwT3B0cy5zb3VyY2VzQ29udGVudCAhPT0gJ3VuZGVmaW5lZCcgKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXBPcHRzLnNvdXJjZXNDb250ZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmICggdGhpcy5wcmV2aW91cygpLmxlbmd0aCApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByZXZpb3VzKCkuc29tZSggaSA9PiBpLndpdGhDb250ZW50KCkgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xlYXJBbm5vdGF0aW9uKCkge1xuICAgICAgICBpZiAoIHRoaXMubWFwT3B0cy5hbm5vdGF0aW9uID09PSBmYWxzZSApIHJldHVybjtcblxuICAgICAgICBsZXQgbm9kZTtcbiAgICAgICAgZm9yICggbGV0IGkgPSB0aGlzLnJvb3Qubm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG4gICAgICAgICAgICBub2RlID0gdGhpcy5yb290Lm5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKCBub2RlLnR5cGUgIT09ICdjb21tZW50JyApIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCBub2RlLnRleHQuaW5kZXhPZignIyBzb3VyY2VNYXBwaW5nVVJMPScpID09PSAwICkge1xuICAgICAgICAgICAgICAgIHRoaXMucm9vdC5yZW1vdmVDaGlsZChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldFNvdXJjZXNDb250ZW50KCkge1xuICAgICAgICBsZXQgYWxyZWFkeSA9IHsgfTtcbiAgICAgICAgdGhpcy5yb290LndhbGsoIG5vZGUgPT4ge1xuICAgICAgICAgICAgaWYgKCBub2RlLnNvdXJjZSApIHtcbiAgICAgICAgICAgICAgICBsZXQgZnJvbSA9IG5vZGUuc291cmNlLmlucHV0LmZyb207XG4gICAgICAgICAgICAgICAgaWYgKCBmcm9tICYmICFhbHJlYWR5W2Zyb21dICkge1xuICAgICAgICAgICAgICAgICAgICBhbHJlYWR5W2Zyb21dID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbGF0aXZlID0gdGhpcy5yZWxhdGl2ZShmcm9tKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXAuc2V0U291cmNlQ29udGVudChyZWxhdGl2ZSwgbm9kZS5zb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFwcGx5UHJldk1hcHMoKSB7XG4gICAgICAgIGZvciAoIGxldCBwcmV2IG9mIHRoaXMucHJldmlvdXMoKSApIHtcbiAgICAgICAgICAgIGxldCBmcm9tID0gdGhpcy5yZWxhdGl2ZShwcmV2LmZpbGUpO1xuICAgICAgICAgICAgbGV0IHJvb3QgPSBwcmV2LnJvb3QgfHwgcGF0aC5kaXJuYW1lKHByZXYuZmlsZSk7XG4gICAgICAgICAgICBsZXQgbWFwO1xuXG4gICAgICAgICAgICBpZiAoIHRoaXMubWFwT3B0cy5zb3VyY2VzQ29udGVudCA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgbWFwID0gbmV3IG1vemlsbGEuU291cmNlTWFwQ29uc3VtZXIocHJldi50ZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAoIG1hcC5zb3VyY2VzQ29udGVudCApIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwLnNvdXJjZXNDb250ZW50ID0gbWFwLnNvdXJjZXNDb250ZW50Lm1hcCggKCkgPT4gbnVsbCApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWFwID0gcHJldi5jb25zdW1lcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm1hcC5hcHBseVNvdXJjZU1hcChtYXAsIGZyb20sIHRoaXMucmVsYXRpdmUocm9vdCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNBbm5vdGF0aW9uKCkge1xuICAgICAgICBpZiAoIHRoaXMuaXNJbmxpbmUoKSApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgdGhpcy5tYXBPcHRzLmFubm90YXRpb24gIT09ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwT3B0cy5hbm5vdGF0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLnByZXZpb3VzKCkubGVuZ3RoICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldmlvdXMoKS5zb21lKCBpID0+IGkuYW5ub3RhdGlvbiApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b0Jhc2U2NChzdHIpIHtcbiAgICAgICAgaWYgKCBCdWZmZXIgKSB7XG4gICAgICAgICAgICBpZiAoIEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5mcm9tICE9PSBVaW50OEFycmF5LmZyb20gKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHN0cikudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlcihzdHIpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkQW5ub3RhdGlvbigpIHtcbiAgICAgICAgbGV0IGNvbnRlbnQ7XG5cbiAgICAgICAgaWYgKCB0aGlzLmlzSW5saW5lKCkgKSB7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSAnZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCwnICtcbiAgICAgICAgICAgICAgICB0aGlzLnRvQmFzZTY0KHRoaXMubWFwLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiB0aGlzLm1hcE9wdHMuYW5ub3RhdGlvbiA9PT0gJ3N0cmluZycgKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gdGhpcy5tYXBPcHRzLmFubm90YXRpb247XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLm91dHB1dEZpbGUoKSArICcubWFwJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlb2wgICA9ICdcXG4nO1xuICAgICAgICBpZiAoIHRoaXMuY3NzLmluZGV4T2YoJ1xcclxcbicpICE9PSAtMSApIGVvbCA9ICdcXHJcXG4nO1xuXG4gICAgICAgIHRoaXMuY3NzICs9IGVvbCArICcvKiMgc291cmNlTWFwcGluZ1VSTD0nICsgY29udGVudCArICcgKi8nO1xuICAgIH1cblxuICAgIG91dHB1dEZpbGUoKSB7XG4gICAgICAgIGlmICggdGhpcy5vcHRzLnRvICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVsYXRpdmUodGhpcy5vcHRzLnRvKTtcbiAgICAgICAgfSBlbHNlIGlmICggdGhpcy5vcHRzLmZyb20gKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWxhdGl2ZSh0aGlzLm9wdHMuZnJvbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RvLmNzcyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZW5lcmF0ZU1hcCgpIHtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZVN0cmluZygpO1xuICAgICAgICBpZiAoIHRoaXMuaXNTb3VyY2VzQ29udGVudCgpICkgICAgdGhpcy5zZXRTb3VyY2VzQ29udGVudCgpO1xuICAgICAgICBpZiAoIHRoaXMucHJldmlvdXMoKS5sZW5ndGggPiAwICkgdGhpcy5hcHBseVByZXZNYXBzKCk7XG4gICAgICAgIGlmICggdGhpcy5pc0Fubm90YXRpb24oKSApICAgICAgICB0aGlzLmFkZEFubm90YXRpb24oKTtcblxuICAgICAgICBpZiAoIHRoaXMuaXNJbmxpbmUoKSApIHtcbiAgICAgICAgICAgIHJldHVybiBbdGhpcy5jc3NdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmNzcywgdGhpcy5tYXBdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVsYXRpdmUoZmlsZSkge1xuICAgICAgICBpZiAoIGZpbGUuaW5kZXhPZignPCcpID09PSAwICkgcmV0dXJuIGZpbGU7XG4gICAgICAgIGlmICggL15cXHcrOlxcL1xcLy8udGVzdChmaWxlKSApIHJldHVybiBmaWxlO1xuXG4gICAgICAgIGxldCBmcm9tID0gdGhpcy5vcHRzLnRvID8gcGF0aC5kaXJuYW1lKHRoaXMub3B0cy50bykgOiAnLic7XG5cbiAgICAgICAgaWYgKCB0eXBlb2YgdGhpcy5tYXBPcHRzLmFubm90YXRpb24gPT09ICdzdHJpbmcnICkge1xuICAgICAgICAgICAgZnJvbSA9IHBhdGguZGlybmFtZSggcGF0aC5yZXNvbHZlKGZyb20sIHRoaXMubWFwT3B0cy5hbm5vdGF0aW9uKSApO1xuICAgICAgICB9XG5cbiAgICAgICAgZmlsZSA9IHBhdGgucmVsYXRpdmUoZnJvbSwgZmlsZSk7XG4gICAgICAgIGlmICggcGF0aC5zZXAgPT09ICdcXFxcJyApIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxlLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc291cmNlUGF0aChub2RlKSB7XG4gICAgICAgIGlmICggdGhpcy5tYXBPcHRzLmZyb20gKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXBPcHRzLmZyb207XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWxhdGl2ZShub2RlLnNvdXJjZS5pbnB1dC5mcm9tKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdlbmVyYXRlU3RyaW5nKCkge1xuICAgICAgICB0aGlzLmNzcyA9ICcnO1xuICAgICAgICB0aGlzLm1hcCA9IG5ldyBtb3ppbGxhLlNvdXJjZU1hcEdlbmVyYXRvcih7IGZpbGU6IHRoaXMub3V0cHV0RmlsZSgpIH0pO1xuXG4gICAgICAgIGxldCBsaW5lICAgPSAxO1xuICAgICAgICBsZXQgY29sdW1uID0gMTtcblxuICAgICAgICBsZXQgbGluZXMsIGxhc3Q7XG4gICAgICAgIHRoaXMuc3RyaW5naWZ5KHRoaXMucm9vdCwgKHN0ciwgbm9kZSwgdHlwZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jc3MgKz0gc3RyO1xuXG4gICAgICAgICAgICBpZiAoIG5vZGUgJiYgdHlwZSAhPT0gJ2VuZCcgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBub2RlLnNvdXJjZSAmJiBub2RlLnNvdXJjZS5zdGFydCApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICAgIHRoaXMuc291cmNlUGF0aChub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlZDogeyBsaW5lLCBjb2x1bW46IGNvbHVtbiAtIDEgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsOiAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6ICAgbm9kZS5zb3VyY2Uuc3RhcnQubGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46IG5vZGUuc291cmNlLnN0YXJ0LmNvbHVtbiAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICAgICc8bm8gc291cmNlPicsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbDogIHsgbGluZTogMSwgY29sdW1uOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZWQ6IHsgbGluZSwgY29sdW1uOiBjb2x1bW4gLSAxIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsaW5lcyA9IHN0ci5tYXRjaCgvXFxuL2cpO1xuICAgICAgICAgICAgaWYgKCBsaW5lcyApIHtcbiAgICAgICAgICAgICAgICBsaW5lICArPSBsaW5lcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgbGFzdCAgID0gc3RyLmxhc3RJbmRleE9mKCdcXG4nKTtcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSBzdHIubGVuZ3RoIC0gbGFzdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29sdW1uICs9IHN0ci5sZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggbm9kZSAmJiB0eXBlICE9PSAnc3RhcnQnICkge1xuICAgICAgICAgICAgICAgIGlmICggbm9kZS5zb3VyY2UgJiYgbm9kZS5zb3VyY2UuZW5kICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogICAgdGhpcy5zb3VyY2VQYXRoKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVkOiB7IGxpbmUsIGNvbHVtbjogY29sdW1uIC0gMSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWw6ICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogICBub2RlLnNvdXJjZS5lbmQubGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46IG5vZGUuc291cmNlLmVuZC5jb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICAgICc8bm8gc291cmNlPicsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbDogIHsgbGluZTogMSwgY29sdW1uOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZWQ6IHsgbGluZSwgY29sdW1uOiBjb2x1bW4gLSAxIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZW5lcmF0ZSgpIHtcbiAgICAgICAgdGhpcy5jbGVhckFubm90YXRpb24oKTtcblxuICAgICAgICBpZiAoIHRoaXMuaXNNYXAoKSApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlTWFwKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgICAgICAgICB0aGlzLnN0cmluZ2lmeSh0aGlzLnJvb3QsIGkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gW3Jlc3VsdF07XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _warning = __webpack_require__(102);

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides the result of the PostCSS transformations.
 *
 * A Result instance is returned by {@link LazyResult#then}
 * or {@link Root#toResult} methods.
 *
 * @example
 * postcss([cssnext]).process(css).then(function (result) {
 *    console.log(result.css);
 * });
 *
 * @example
 * var result2 = postcss.parse(css).toResult();
 */
var Result = function () {

  /**
   * @param {Processor} processor - processor used for this transformation.
   * @param {Root}      root      - Root node after all transformations.
   * @param {processOptions} opts - options from the {@link Processor#process}
   *                                or {@link Root#toResult}
   */
  function Result(processor, root, opts) {
    _classCallCheck(this, Result);

    /**
     * @member {Processor} - The Processor instance used
     *                       for this transformation.
     *
     * @example
     * for ( let plugin of result.processor.plugins) {
     *   if ( plugin.postcssPlugin === 'postcss-bad' ) {
     *     throw 'postcss-good is incompatible with postcss-bad';
     *   }
     * });
     */
    this.processor = processor;
    /**
     * @member {Message[]} - Contains messages from plugins
     *                       (e.g., warnings or custom messages).
     *                       Each message should have type
     *                       and plugin properties.
     *
     * @example
     * postcss.plugin('postcss-min-browser', () => {
     *   return (root, result) => {
     *     var browsers = detectMinBrowsersByCanIUse(root);
     *     result.messages.push({
     *       type:    'min-browser',
     *       plugin:  'postcss-min-browser',
     *       browsers: browsers
     *     });
     *   };
     * });
     */
    this.messages = [];
    /**
     * @member {Root} - Root node after all transformations.
     *
     * @example
     * root.toResult().root == root;
     */
    this.root = root;
    /**
     * @member {processOptions} - Options from the {@link Processor#process}
     *                            or {@link Root#toResult} call
     *                            that produced this Result instance.
     *
     * @example
     * root.toResult(opts).opts == opts;
     */
    this.opts = opts;
    /**
     * @member {string} - A CSS string representing of {@link Result#root}.
     *
     * @example
     * postcss.parse('a{}').toResult().css //=> "a{}"
     */
    this.css = undefined;
    /**
     * @member {SourceMapGenerator} - An instance of `SourceMapGenerator`
     *                                class from the `source-map` library,
     *                                representing changes
     *                                to the {@link Result#root} instance.
     *
     * @example
     * result.map.toJSON() //=> { version: 3, file: 'a.css', … }
     *
     * @example
     * if ( result.map ) {
     *   fs.writeFileSync(result.opts.to + '.map', result.map.toString());
     * }
     */
    this.map = undefined;
  }

  /**
   * Returns for @{link Result#css} content.
   *
   * @example
   * result + '' === result.css
   *
   * @return {string} string representing of {@link Result#root}
   */


  Result.prototype.toString = function toString() {
    return this.css;
  };

  /**
   * Creates an instance of {@link Warning} and adds it
   * to {@link Result#messages}.
   *
   * @param {string} text        - warning message
   * @param {Object} [opts]      - warning options
   * @param {Node}   opts.node   - CSS node that caused the warning
   * @param {string} opts.word   - word in CSS source that caused the warning
   * @param {number} opts.index  - index in CSS node string that caused
   *                               the warning
   * @param {string} opts.plugin - name of the plugin that created
   *                               this warning. {@link Result#warn} fills
   *                               this property automatically.
   *
   * @return {Warning} created warning
   */


  Result.prototype.warn = function warn(text) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!opts.plugin) {
      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
        opts.plugin = this.lastPlugin.postcssPlugin;
      }
    }

    var warning = new _warning2.default(text, opts);
    this.messages.push(warning);

    return warning;
  };

  /**
   * Returns warnings from plugins. Filters {@link Warning} instances
   * from {@link Result#messages}.
   *
   * @example
   * result.warnings().forEach(warn => {
   *   console.warn(warn.toString());
   * });
   *
   * @return {Warning[]} warnings from plugins
   */


  Result.prototype.warnings = function warnings() {
    return this.messages.filter(function (i) {
      return i.type === 'warning';
    });
  };

  /**
   * An alias for the {@link Result#css} property.
   * Use it with syntaxes that generate non-CSS output.
   * @type {string}
   *
   * @example
   * result.css === result.content;
   */


  _createClass(Result, [{
    key: 'content',
    get: function get() {
      return this.css;
    }
  }]);

  return Result;
}();

exports.default = Result;

/**
 * @typedef  {object} Message
 * @property {string} type   - message type
 * @property {string} plugin - source PostCSS plugin name
 */

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents a plugin’s warning. It can be created using {@link Node#warn}.
 *
 * @example
 * if ( decl.important ) {
 *     decl.warn(result, 'Avoid !important', { word: '!important' });
 * }
 */
var Warning = function () {

  /**
   * @param {string} text        - warning message
   * @param {Object} [opts]      - warning options
   * @param {Node}   opts.node   - CSS node that caused the warning
   * @param {string} opts.word   - word in CSS source that caused the warning
   * @param {number} opts.index  - index in CSS node string that caused
   *                               the warning
   * @param {string} opts.plugin - name of the plugin that created
   *                               this warning. {@link Result#warn} fills
   *                               this property automatically.
   */
  function Warning(text) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Warning);

    /**
     * @member {string} - Type to filter warnings from
     *                    {@link Result#messages}. Always equal
     *                    to `"warning"`.
     *
     * @example
     * const nonWarning = result.messages.filter(i => i.type !== 'warning')
     */
    this.type = 'warning';
    /**
     * @member {string} - The warning message.
     *
     * @example
     * warning.text //=> 'Try to avoid !important'
     */
    this.text = text;

    if (opts.node && opts.node.source) {
      var pos = opts.node.positionBy(opts);
      /**
       * @member {number} - Line in the input file
       *                    with this warning’s source
       *
       * @example
       * warning.line //=> 5
       */
      this.line = pos.line;
      /**
       * @member {number} - Column in the input file
       *                    with this warning’s source.
       *
       * @example
       * warning.column //=> 6
       */
      this.column = pos.column;
    }

    for (var opt in opts) {
      this[opt] = opts[opt];
    }
  }

  /**
   * Returns a warning position and message.
   *
   * @example
   * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'
   *
   * @return {string} warning position and message
   */


  Warning.prototype.toString = function toString() {
    if (this.node) {
      return this.node.error(this.text, {
        plugin: this.plugin,
        index: this.index,
        word: this.word
      }).message;
    } else if (this.plugin) {
      return this.plugin + ': ' + this.text;
    } else {
      return this.text;
    }
  };

  /**
   * @memberof Warning#
   * @member {string} plugin - The name of the plugin that created
   *                           it will fill this property automatically.
   *                           this warning. When you call {@link Node#warn}
   *
   * @example
   * warning.plugin //=> 'postcss-important'
   */

  /**
   * @memberof Warning#
   * @member {Node} node - Contains the CSS node that caused the warning.
   *
   * @example
   * warning.node.toString() //=> 'color: white !important'
   */

  return Warning;
}();

exports.default = Warning;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhcm5pbmcuZXM2Il0sIm5hbWVzIjpbIldhcm5pbmciLCJ0ZXh0Iiwib3B0cyIsInR5cGUiLCJub2RlIiwic291cmNlIiwicG9zIiwicG9zaXRpb25CeSIsImxpbmUiLCJjb2x1bW4iLCJvcHQiLCJ0b1N0cmluZyIsImVycm9yIiwicGx1Z2luIiwiaW5kZXgiLCJ3b3JkIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7O0lBUU1BLE87O0FBRUY7Ozs7Ozs7Ozs7O0FBV0EsbUJBQVlDLElBQVosRUFBOEI7QUFBQSxRQUFaQyxJQUFZLHVFQUFMLEVBQUs7O0FBQUE7O0FBQzFCOzs7Ozs7OztBQVFBLFNBQUtDLElBQUwsR0FBWSxTQUFaO0FBQ0E7Ozs7OztBQU1BLFNBQUtGLElBQUwsR0FBWUEsSUFBWjs7QUFFQSxRQUFLQyxLQUFLRSxJQUFMLElBQWFGLEtBQUtFLElBQUwsQ0FBVUMsTUFBNUIsRUFBcUM7QUFDakMsVUFBSUMsTUFBVUosS0FBS0UsSUFBTCxDQUFVRyxVQUFWLENBQXFCTCxJQUFyQixDQUFkO0FBQ0E7Ozs7Ozs7QUFPQSxXQUFLTSxJQUFMLEdBQWNGLElBQUlFLElBQWxCO0FBQ0E7Ozs7Ozs7QUFPQSxXQUFLQyxNQUFMLEdBQWNILElBQUlHLE1BQWxCO0FBQ0g7O0FBRUQsU0FBTSxJQUFJQyxHQUFWLElBQWlCUixJQUFqQjtBQUF3QixXQUFLUSxHQUFMLElBQVlSLEtBQUtRLEdBQUwsQ0FBWjtBQUF4QjtBQUNIOztBQUVEOzs7Ozs7Ozs7O29CQVFBQyxRLHVCQUFXO0FBQ1AsUUFBSyxLQUFLUCxJQUFWLEVBQWlCO0FBQ2IsYUFBTyxLQUFLQSxJQUFMLENBQVVRLEtBQVYsQ0FBZ0IsS0FBS1gsSUFBckIsRUFBMkI7QUFDOUJZLGdCQUFRLEtBQUtBLE1BRGlCO0FBRTlCQyxlQUFRLEtBQUtBLEtBRmlCO0FBRzlCQyxjQUFRLEtBQUtBO0FBSGlCLE9BQTNCLEVBSUpDLE9BSkg7QUFLSCxLQU5ELE1BTU8sSUFBSyxLQUFLSCxNQUFWLEVBQW1CO0FBQ3RCLGFBQU8sS0FBS0EsTUFBTCxHQUFjLElBQWQsR0FBcUIsS0FBS1osSUFBakM7QUFDSCxLQUZNLE1BRUE7QUFDSCxhQUFPLEtBQUtBLElBQVo7QUFDSDtBQUNKLEc7O0FBRUQ7Ozs7Ozs7Ozs7QUFVQTs7Ozs7Ozs7Ozs7a0JBVVdELE8iLCJmaWxlIjoid2FybmluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVwcmVzZW50cyBhIHBsdWdpbuKAmXMgd2FybmluZy4gSXQgY2FuIGJlIGNyZWF0ZWQgdXNpbmcge0BsaW5rIE5vZGUjd2Fybn0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGlmICggZGVjbC5pbXBvcnRhbnQgKSB7XG4gKiAgICAgZGVjbC53YXJuKHJlc3VsdCwgJ0F2b2lkICFpbXBvcnRhbnQnLCB7IHdvcmQ6ICchaW1wb3J0YW50JyB9KTtcbiAqIH1cbiAqL1xuY2xhc3MgV2FybmluZyB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAgICAgICAgLSB3YXJuaW5nIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHNdICAgICAgLSB3YXJuaW5nIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge05vZGV9ICAgb3B0cy5ub2RlICAgLSBDU1Mgbm9kZSB0aGF0IGNhdXNlZCB0aGUgd2FybmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLndvcmQgICAtIHdvcmQgaW4gQ1NTIHNvdXJjZSB0aGF0IGNhdXNlZCB0aGUgd2FybmluZ1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLmluZGV4ICAtIGluZGV4IGluIENTUyBub2RlIHN0cmluZyB0aGF0IGNhdXNlZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB3YXJuaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMucGx1Z2luIC0gbmFtZSBvZiB0aGUgcGx1Z2luIHRoYXQgY3JlYXRlZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgd2FybmluZy4ge0BsaW5rIFJlc3VsdCN3YXJufSBmaWxsc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgcHJvcGVydHkgYXV0b21hdGljYWxseS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0ZXh0LCBvcHRzID0geyB9KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IC0gVHlwZSB0byBmaWx0ZXIgd2FybmluZ3MgZnJvbVxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAge0BsaW5rIFJlc3VsdCNtZXNzYWdlc30uIEFsd2F5cyBlcXVhbFxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgdG8gYFwid2FybmluZ1wiYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogY29uc3Qgbm9uV2FybmluZyA9IHJlc3VsdC5tZXNzYWdlcy5maWx0ZXIoaSA9PiBpLnR5cGUgIT09ICd3YXJuaW5nJylcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZSA9ICd3YXJuaW5nJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gLSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB3YXJuaW5nLnRleHQgLy89PiAnVHJ5IHRvIGF2b2lkICFpbXBvcnRhbnQnXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuXG4gICAgICAgIGlmICggb3B0cy5ub2RlICYmIG9wdHMubm9kZS5zb3VyY2UgKSB7XG4gICAgICAgICAgICBsZXQgcG9zICAgICA9IG9wdHMubm9kZS5wb3NpdGlvbkJ5KG9wdHMpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IC0gTGluZSBpbiB0aGUgaW5wdXQgZmlsZVxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgIHdpdGggdGhpcyB3YXJuaW5n4oCZcyBzb3VyY2VcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgICAgICogd2FybmluZy5saW5lIC8vPT4gNVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmxpbmUgICA9IHBvcy5saW5lO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IC0gQ29sdW1uIGluIHRoZSBpbnB1dCBmaWxlXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGlzIHdhcm5pbmfigJlzIHNvdXJjZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgICAgICogd2FybmluZy5jb2x1bW4gLy89PiA2XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuY29sdW1uID0gcG9zLmNvbHVtbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoIGxldCBvcHQgaW4gb3B0cyApIHRoaXNbb3B0XSA9IG9wdHNbb3B0XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgd2FybmluZyBwb3NpdGlvbiBhbmQgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogd2FybmluZy50b1N0cmluZygpIC8vPT4gJ3Bvc3Rjc3MtbGludDphLmNzczoxMDoxNDogQXZvaWQgIWltcG9ydGFudCdcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gd2FybmluZyBwb3NpdGlvbiBhbmQgbWVzc2FnZVxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBpZiAoIHRoaXMubm9kZSApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGUuZXJyb3IodGhpcy50ZXh0LCB7XG4gICAgICAgICAgICAgICAgcGx1Z2luOiB0aGlzLnBsdWdpbixcbiAgICAgICAgICAgICAgICBpbmRleDogIHRoaXMuaW5kZXgsXG4gICAgICAgICAgICAgICAgd29yZDogICB0aGlzLndvcmRcbiAgICAgICAgICAgIH0pLm1lc3NhZ2U7XG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMucGx1Z2luICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2luICsgJzogJyArIHRoaXMudGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgV2FybmluZyNcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHBsdWdpbiAtIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW4gdGhhdCBjcmVhdGVkXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBpdCB3aWxsIGZpbGwgdGhpcyBwcm9wZXJ0eSBhdXRvbWF0aWNhbGx5LlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyB3YXJuaW5nLiBXaGVuIHlvdSBjYWxsIHtAbGluayBOb2RlI3dhcm59XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHdhcm5pbmcucGx1Z2luIC8vPT4gJ3Bvc3Rjc3MtaW1wb3J0YW50J1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFdhcm5pbmcjXG4gICAgICogQG1lbWJlciB7Tm9kZX0gbm9kZSAtIENvbnRhaW5zIHRoZSBDU1Mgbm9kZSB0aGF0IGNhdXNlZCB0aGUgd2FybmluZy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogd2FybmluZy5ub2RlLnRvU3RyaW5nKCkgLy89PiAnY29sb3I6IHdoaXRlICFpbXBvcnRhbnQnXG4gICAgICovXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2FybmluZztcbiJdfQ==


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _declaration = __webpack_require__(18);

var _declaration2 = _interopRequireDefault(_declaration);

var _tokenize = __webpack_require__(36);

var _tokenize2 = _interopRequireDefault(_tokenize);

var _comment = __webpack_require__(23);

var _comment2 = _interopRequireDefault(_comment);

var _atRule = __webpack_require__(15);

var _atRule2 = _interopRequireDefault(_atRule);

var _root = __webpack_require__(25);

var _root2 = _interopRequireDefault(_root);

var _rule = __webpack_require__(16);

var _rule2 = _interopRequireDefault(_rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Parser = function () {
    function Parser(input) {
        _classCallCheck(this, Parser);

        this.input = input;

        this.root = new _root2.default();
        this.current = this.root;
        this.spaces = '';
        this.semicolon = false;

        this.createTokenizer();
        this.root.source = { input: input, start: { line: 1, column: 1 } };
    }

    Parser.prototype.createTokenizer = function createTokenizer() {
        this.tokenizer = (0, _tokenize2.default)(this.input);
    };

    Parser.prototype.parse = function parse() {
        var token = void 0;
        while (!this.tokenizer.endOfFile()) {
            token = this.tokenizer.nextToken();

            switch (token[0]) {

                case 'space':
                    this.spaces += token[1];
                    break;

                case ';':
                    this.freeSemicolon(token);
                    break;

                case '}':
                    this.end(token);
                    break;

                case 'comment':
                    this.comment(token);
                    break;

                case 'at-word':
                    this.atrule(token);
                    break;

                case '{':
                    this.emptyRule(token);
                    break;

                default:
                    this.other(token);
                    break;
            }
        }
        this.endFile();
    };

    Parser.prototype.comment = function comment(token) {
        var node = new _comment2.default();
        this.init(node, token[2], token[3]);
        node.source.end = { line: token[4], column: token[5] };

        var text = token[1].slice(2, -2);
        if (/^\s*$/.test(text)) {
            node.text = '';
            node.raws.left = text;
            node.raws.right = '';
        } else {
            var match = text.match(/^(\s*)([^]*[^\s])(\s*)$/);
            node.text = match[2];
            node.raws.left = match[1];
            node.raws.right = match[3];
        }
    };

    Parser.prototype.emptyRule = function emptyRule(token) {
        var node = new _rule2.default();
        this.init(node, token[2], token[3]);
        node.selector = '';
        node.raws.between = '';
        this.current = node;
    };

    Parser.prototype.other = function other(start) {
        var end = false;
        var type = null;
        var colon = false;
        var bracket = null;
        var brackets = [];

        var tokens = [];
        var token = start;
        while (token) {
            type = token[0];
            tokens.push(token);

            if (type === '(' || type === '[') {
                if (!bracket) bracket = token;
                brackets.push(type === '(' ? ')' : ']');
            } else if (brackets.length === 0) {
                if (type === ';') {
                    if (colon) {
                        this.decl(tokens);
                        return;
                    } else {
                        break;
                    }
                } else if (type === '{') {
                    this.rule(tokens);
                    return;
                } else if (type === '}') {
                    this.tokenizer.back(tokens.pop());
                    end = true;
                    break;
                } else if (type === ':') {
                    colon = true;
                }
            } else if (type === brackets[brackets.length - 1]) {
                brackets.pop();
                if (brackets.length === 0) bracket = null;
            }

            token = this.tokenizer.nextToken();
        }

        if (this.tokenizer.endOfFile()) end = true;
        if (brackets.length > 0) this.unclosedBracket(bracket);

        if (end && colon) {
            while (tokens.length) {
                token = tokens[tokens.length - 1][0];
                if (token !== 'space' && token !== 'comment') break;
                this.tokenizer.back(tokens.pop());
            }
            this.decl(tokens);
            return;
        } else {
            this.unknownWord(tokens);
        }
    };

    Parser.prototype.rule = function rule(tokens) {
        tokens.pop();

        var node = new _rule2.default();
        this.init(node, tokens[0][2], tokens[0][3]);

        node.raws.between = this.spacesAndCommentsFromEnd(tokens);
        this.raw(node, 'selector', tokens);
        this.current = node;
    };

    Parser.prototype.decl = function decl(tokens) {
        var node = new _declaration2.default();
        this.init(node);

        var last = tokens[tokens.length - 1];
        if (last[0] === ';') {
            this.semicolon = true;
            tokens.pop();
        }
        if (last[4]) {
            node.source.end = { line: last[4], column: last[5] };
        } else {
            node.source.end = { line: last[2], column: last[3] };
        }

        while (tokens[0][0] !== 'word') {
            if (tokens.length === 1) this.unknownWord(tokens);
            node.raws.before += tokens.shift()[1];
        }
        node.source.start = { line: tokens[0][2], column: tokens[0][3] };

        node.prop = '';
        while (tokens.length) {
            var type = tokens[0][0];
            if (type === ':' || type === 'space' || type === 'comment') {
                break;
            }
            node.prop += tokens.shift()[1];
        }

        node.raws.between = '';

        var token = void 0;
        while (tokens.length) {
            token = tokens.shift();

            if (token[0] === ':') {
                node.raws.between += token[1];
                break;
            } else {
                node.raws.between += token[1];
            }
        }

        if (node.prop[0] === '_' || node.prop[0] === '*') {
            node.raws.before += node.prop[0];
            node.prop = node.prop.slice(1);
        }
        node.raws.between += this.spacesAndCommentsFromStart(tokens);
        this.precheckMissedSemicolon(tokens);

        for (var i = tokens.length - 1; i > 0; i--) {
            token = tokens[i];
            if (token[1].toLowerCase() === '!important') {
                node.important = true;
                var string = this.stringFrom(tokens, i);
                string = this.spacesFromEnd(tokens) + string;
                if (string !== ' !important') node.raws.important = string;
                break;
            } else if (token[1].toLowerCase() === 'important') {
                var cache = tokens.slice(0);
                var str = '';
                for (var j = i; j > 0; j--) {
                    var _type = cache[j][0];
                    if (str.trim().indexOf('!') === 0 && _type !== 'space') {
                        break;
                    }
                    str = cache.pop()[1] + str;
                }
                if (str.trim().indexOf('!') === 0) {
                    node.important = true;
                    node.raws.important = str;
                    tokens = cache;
                }
            }

            if (token[0] !== 'space' && token[0] !== 'comment') {
                break;
            }
        }

        this.raw(node, 'value', tokens);

        if (node.value.indexOf(':') !== -1) this.checkMissedSemicolon(tokens);
    };

    Parser.prototype.atrule = function atrule(token) {
        var node = new _atRule2.default();
        node.name = token[1].slice(1);
        if (node.name === '') {
            this.unnamedAtrule(node, token);
        }
        this.init(node, token[2], token[3]);

        var prev = void 0;
        var shift = void 0;
        var last = false;
        var open = false;
        var params = [];

        while (!this.tokenizer.endOfFile()) {
            token = this.tokenizer.nextToken();

            if (token[0] === ';') {
                node.source.end = { line: token[2], column: token[3] };
                this.semicolon = true;
                break;
            } else if (token[0] === '{') {
                open = true;
                break;
            } else if (token[0] === '}') {
                if (params.length > 0) {
                    shift = params.length - 1;
                    prev = params[shift];
                    while (prev && prev[0] === 'space') {
                        prev = params[--shift];
                    }
                    if (prev) {
                        node.source.end = { line: prev[4], column: prev[5] };
                    }
                }
                this.end(token);
                break;
            } else {
                params.push(token);
            }

            if (this.tokenizer.endOfFile()) {
                last = true;
                break;
            }
        }

        node.raws.between = this.spacesAndCommentsFromEnd(params);
        if (params.length) {
            node.raws.afterName = this.spacesAndCommentsFromStart(params);
            this.raw(node, 'params', params);
            if (last) {
                token = params[params.length - 1];
                node.source.end = { line: token[4], column: token[5] };
                this.spaces = node.raws.between;
                node.raws.between = '';
            }
        } else {
            node.raws.afterName = '';
            node.params = '';
        }

        if (open) {
            node.nodes = [];
            this.current = node;
        }
    };

    Parser.prototype.end = function end(token) {
        if (this.current.nodes && this.current.nodes.length) {
            this.current.raws.semicolon = this.semicolon;
        }
        this.semicolon = false;

        this.current.raws.after = (this.current.raws.after || '') + this.spaces;
        this.spaces = '';

        if (this.current.parent) {
            this.current.source.end = { line: token[2], column: token[3] };
            this.current = this.current.parent;
        } else {
            this.unexpectedClose(token);
        }
    };

    Parser.prototype.endFile = function endFile() {
        if (this.current.parent) this.unclosedBlock();
        if (this.current.nodes && this.current.nodes.length) {
            this.current.raws.semicolon = this.semicolon;
        }
        this.current.raws.after = (this.current.raws.after || '') + this.spaces;
    };

    Parser.prototype.freeSemicolon = function freeSemicolon(token) {
        this.spaces += token[1];
        if (this.current.nodes) {
            var prev = this.current.nodes[this.current.nodes.length - 1];
            if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {
                prev.raws.ownSemicolon = this.spaces;
                this.spaces = '';
            }
        }
    };

    // Helpers

    Parser.prototype.init = function init(node, line, column) {
        this.current.push(node);

        node.source = { start: { line: line, column: column }, input: this.input };
        node.raws.before = this.spaces;
        this.spaces = '';
        if (node.type !== 'comment') this.semicolon = false;
    };

    Parser.prototype.raw = function raw(node, prop, tokens) {
        var token = void 0,
            type = void 0;
        var length = tokens.length;
        var value = '';
        var clean = true;
        for (var i = 0; i < length; i += 1) {
            token = tokens[i];
            type = token[0];
            if (type === 'comment' || type === 'space' && i === length - 1) {
                clean = false;
            } else {
                value += token[1];
            }
        }
        if (!clean) {
            var raw = tokens.reduce(function (all, i) {
                return all + i[1];
            }, '');
            node.raws[prop] = { value: value, raw: raw };
        }
        node[prop] = value;
    };

    Parser.prototype.spacesAndCommentsFromEnd = function spacesAndCommentsFromEnd(tokens) {
        var lastTokenType = void 0;
        var spaces = '';
        while (tokens.length) {
            lastTokenType = tokens[tokens.length - 1][0];
            if (lastTokenType !== 'space' && lastTokenType !== 'comment') break;
            spaces = tokens.pop()[1] + spaces;
        }
        return spaces;
    };

    Parser.prototype.spacesAndCommentsFromStart = function spacesAndCommentsFromStart(tokens) {
        var next = void 0;
        var spaces = '';
        while (tokens.length) {
            next = tokens[0][0];
            if (next !== 'space' && next !== 'comment') break;
            spaces += tokens.shift()[1];
        }
        return spaces;
    };

    Parser.prototype.spacesFromEnd = function spacesFromEnd(tokens) {
        var lastTokenType = void 0;
        var spaces = '';
        while (tokens.length) {
            lastTokenType = tokens[tokens.length - 1][0];
            if (lastTokenType !== 'space') break;
            spaces = tokens.pop()[1] + spaces;
        }
        return spaces;
    };

    Parser.prototype.stringFrom = function stringFrom(tokens, from) {
        var result = '';
        for (var i = from; i < tokens.length; i++) {
            result += tokens[i][1];
        }
        tokens.splice(from, tokens.length - from);
        return result;
    };

    Parser.prototype.colon = function colon(tokens) {
        var brackets = 0;
        var token = void 0,
            type = void 0,
            prev = void 0;
        for (var i = 0; i < tokens.length; i++) {
            token = tokens[i];
            type = token[0];

            if (type === '(') {
                brackets += 1;
            } else if (type === ')') {
                brackets -= 1;
            } else if (brackets === 0 && type === ':') {
                if (!prev) {
                    this.doubleColon(token);
                } else if (prev[0] === 'word' && prev[1] === 'progid') {
                    continue;
                } else {
                    return i;
                }
            }

            prev = token;
        }
        return false;
    };

    // Errors

    Parser.prototype.unclosedBracket = function unclosedBracket(bracket) {
        throw this.input.error('Unclosed bracket', bracket[2], bracket[3]);
    };

    Parser.prototype.unknownWord = function unknownWord(tokens) {
        throw this.input.error('Unknown word', tokens[0][2], tokens[0][3]);
    };

    Parser.prototype.unexpectedClose = function unexpectedClose(token) {
        throw this.input.error('Unexpected }', token[2], token[3]);
    };

    Parser.prototype.unclosedBlock = function unclosedBlock() {
        var pos = this.current.source.start;
        throw this.input.error('Unclosed block', pos.line, pos.column);
    };

    Parser.prototype.doubleColon = function doubleColon(token) {
        throw this.input.error('Double colon', token[2], token[3]);
    };

    Parser.prototype.unnamedAtrule = function unnamedAtrule(node, token) {
        throw this.input.error('At-rule without name', token[2], token[3]);
    };

    Parser.prototype.precheckMissedSemicolon = function precheckMissedSemicolon(tokens) {
        // Hook for Safe Parser
        tokens;
    };

    Parser.prototype.checkMissedSemicolon = function checkMissedSemicolon(tokens) {
        var colon = this.colon(tokens);
        if (colon === false) return;

        var founded = 0;
        var token = void 0;
        for (var j = colon - 1; j >= 0; j--) {
            token = tokens[j];
            if (token[0] !== 'space') {
                founded += 1;
                if (founded === 2) break;
            }
        }
        throw this.input.error('Missed semicolon', token[2], token[3]);
    };

    return Parser;
}();

exports.default = Parser;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
/**
 * Contains helpers for working with vendor prefixes.
 *
 * @example
 * const vendor = postcss.vendor;
 *
 * @namespace vendor
 */
var vendor = {

    /**
     * Returns the vendor prefix extracted from an input string.
     *
     * @param {string} prop - string with or without vendor prefix
     *
     * @return {string} vendor prefix or empty string
     *
     * @example
     * postcss.vendor.prefix('-moz-tab-size') //=> '-moz-'
     * postcss.vendor.prefix('tab-size')      //=> ''
     */
    prefix: function prefix(prop) {
        var match = prop.match(/^(-\w+-)/);
        if (match) {
            return match[0];
        } else {
            return '';
        }
    },


    /**
     * Returns the input string stripped of its vendor prefix.
     *
     * @param {string} prop - string with or without vendor prefix
     *
     * @return {string} string name without vendor prefixes
     *
     * @example
     * postcss.vendor.unprefixed('-moz-tab-size') //=> 'tab-size'
     */
    unprefixed: function unprefixed(prop) {
        return prop.replace(/^-\w+-/, '');
    }
};

exports.default = vendor;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci5lczYiXSwibmFtZXMiOlsidmVuZG9yIiwicHJlZml4IiwicHJvcCIsIm1hdGNoIiwidW5wcmVmaXhlZCIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7Ozs7OztBQVFBLElBQUlBLFNBQVM7O0FBRVQ7Ozs7Ozs7Ozs7O0FBV0FDLFVBYlMsa0JBYUZDLElBYkUsRUFhSTtBQUNULFlBQUlDLFFBQVFELEtBQUtDLEtBQUwsQ0FBVyxVQUFYLENBQVo7QUFDQSxZQUFLQSxLQUFMLEVBQWE7QUFDVCxtQkFBT0EsTUFBTSxDQUFOLENBQVA7QUFDSCxTQUZELE1BRU87QUFDSCxtQkFBTyxFQUFQO0FBQ0g7QUFDSixLQXBCUTs7O0FBc0JUOzs7Ozs7Ozs7O0FBVUFDLGNBaENTLHNCQWdDRUYsSUFoQ0YsRUFnQ1E7QUFDYixlQUFPQSxLQUFLRyxPQUFMLENBQWEsUUFBYixFQUF1QixFQUF2QixDQUFQO0FBQ0g7QUFsQ1EsQ0FBYjs7a0JBc0NlTCxNIiwiZmlsZSI6InZlbmRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udGFpbnMgaGVscGVycyBmb3Igd29ya2luZyB3aXRoIHZlbmRvciBwcmVmaXhlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgdmVuZG9yID0gcG9zdGNzcy52ZW5kb3I7XG4gKlxuICogQG5hbWVzcGFjZSB2ZW5kb3JcbiAqL1xubGV0IHZlbmRvciA9IHtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZlbmRvciBwcmVmaXggZXh0cmFjdGVkIGZyb20gYW4gaW5wdXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgLSBzdHJpbmcgd2l0aCBvciB3aXRob3V0IHZlbmRvciBwcmVmaXhcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gdmVuZG9yIHByZWZpeCBvciBlbXB0eSBzdHJpbmdcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogcG9zdGNzcy52ZW5kb3IucHJlZml4KCctbW96LXRhYi1zaXplJykgLy89PiAnLW1vei0nXG4gICAgICogcG9zdGNzcy52ZW5kb3IucHJlZml4KCd0YWItc2l6ZScpICAgICAgLy89PiAnJ1xuICAgICAqL1xuICAgIHByZWZpeChwcm9wKSB7XG4gICAgICAgIGxldCBtYXRjaCA9IHByb3AubWF0Y2goL14oLVxcdystKS8pO1xuICAgICAgICBpZiAoIG1hdGNoICkge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGlucHV0IHN0cmluZyBzdHJpcHBlZCBvZiBpdHMgdmVuZG9yIHByZWZpeC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIC0gc3RyaW5nIHdpdGggb3Igd2l0aG91dCB2ZW5kb3IgcHJlZml4XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHN0cmluZyBuYW1lIHdpdGhvdXQgdmVuZG9yIHByZWZpeGVzXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBvc3Rjc3MudmVuZG9yLnVucHJlZml4ZWQoJy1tb3otdGFiLXNpemUnKSAvLz0+ICd0YWItc2l6ZSdcbiAgICAgKi9cbiAgICB1bnByZWZpeGVkKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIHByb3AucmVwbGFjZSgvXi1cXHcrLS8sICcnKTtcbiAgICB9XG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHZlbmRvcjtcbiJdfQ==


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/* **********************************************
     Begin prism-core.js
********************************************** */

var _self = (typeof window !== 'undefined')
	? window   // if in browser
	: (
		(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)
		? self // if in worker
		: {}   // if in node js
	);

/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 * MIT license http://www.opensource.org/licenses/mit-license.php/
 * @author Lea Verou http://lea.verou.me
 */

var Prism = (function(){

// Private helper vars
var lang = /\blang(?:uage)?-(\w+)\b/i;
var uniqueId = 0;

var _ = _self.Prism = {
	manual: _self.Prism && _self.Prism.manual,
	disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,
	util: {
		encode: function (tokens) {
			if (tokens instanceof Token) {
				return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);
			} else if (_.util.type(tokens) === 'Array') {
				return tokens.map(_.util.encode);
			} else {
				return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
			}
		},

		type: function (o) {
			return Object.prototype.toString.call(o).match(/\[object (\w+)\]/)[1];
		},

		objId: function (obj) {
			if (!obj['__id']) {
				Object.defineProperty(obj, '__id', { value: ++uniqueId });
			}
			return obj['__id'];
		},

		// Deep clone a language definition (e.g. to extend it)
		clone: function (o) {
			var type = _.util.type(o);

			switch (type) {
				case 'Object':
					var clone = {};

					for (var key in o) {
						if (o.hasOwnProperty(key)) {
							clone[key] = _.util.clone(o[key]);
						}
					}

					return clone;

				case 'Array':
					return o.map(function(v) { return _.util.clone(v); });
			}

			return o;
		}
	},

	languages: {
		extend: function (id, redef) {
			var lang = _.util.clone(_.languages[id]);

			for (var key in redef) {
				lang[key] = redef[key];
			}

			return lang;
		},

		/**
		 * Insert a token before another token in a language literal
		 * As this needs to recreate the object (we cannot actually insert before keys in object literals),
		 * we cannot just provide an object, we need anobject and a key.
		 * @param inside The key (or language id) of the parent
		 * @param before The key to insert before. If not provided, the function appends instead.
		 * @param insert Object with the key/value pairs to insert
		 * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.
		 */
		insertBefore: function (inside, before, insert, root) {
			root = root || _.languages;
			var grammar = root[inside];

			if (arguments.length == 2) {
				insert = arguments[1];

				for (var newToken in insert) {
					if (insert.hasOwnProperty(newToken)) {
						grammar[newToken] = insert[newToken];
					}
				}

				return grammar;
			}

			var ret = {};

			for (var token in grammar) {

				if (grammar.hasOwnProperty(token)) {

					if (token == before) {

						for (var newToken in insert) {

							if (insert.hasOwnProperty(newToken)) {
								ret[newToken] = insert[newToken];
							}
						}
					}

					ret[token] = grammar[token];
				}
			}

			// Update references in other language definitions
			_.languages.DFS(_.languages, function(key, value) {
				if (value === root[inside] && key != inside) {
					this[key] = ret;
				}
			});

			return root[inside] = ret;
		},

		// Traverse a language definition with Depth First Search
		DFS: function(o, callback, type, visited) {
			visited = visited || {};
			for (var i in o) {
				if (o.hasOwnProperty(i)) {
					callback.call(o, i, o[i], type || i);

					if (_.util.type(o[i]) === 'Object' && !visited[_.util.objId(o[i])]) {
						visited[_.util.objId(o[i])] = true;
						_.languages.DFS(o[i], callback, null, visited);
					}
					else if (_.util.type(o[i]) === 'Array' && !visited[_.util.objId(o[i])]) {
						visited[_.util.objId(o[i])] = true;
						_.languages.DFS(o[i], callback, i, visited);
					}
				}
			}
		}
	},
	plugins: {},

	highlightAll: function(async, callback) {
		var env = {
			callback: callback,
			selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
		};

		_.hooks.run("before-highlightall", env);

		var elements = env.elements || document.querySelectorAll(env.selector);

		for (var i=0, element; element = elements[i++];) {
			_.highlightElement(element, async === true, env.callback);
		}
	},

	highlightElement: function(element, async, callback) {
		// Find language
		var language, grammar, parent = element;

		while (parent && !lang.test(parent.className)) {
			parent = parent.parentNode;
		}

		if (parent) {
			language = (parent.className.match(lang) || [,''])[1].toLowerCase();
			grammar = _.languages[language];
		}

		// Set language on the element, if not present
		element.className = element.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;

		if (element.parentNode) {
			// Set language on the parent, for styling
			parent = element.parentNode;

			if (/pre/i.test(parent.nodeName)) {
				parent.className = parent.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;
			}
		}

		var code = element.textContent;

		var env = {
			element: element,
			language: language,
			grammar: grammar,
			code: code
		};

		_.hooks.run('before-sanity-check', env);

		if (!env.code || !env.grammar) {
			if (env.code) {
				_.hooks.run('before-highlight', env);
				env.element.textContent = env.code;
				_.hooks.run('after-highlight', env);
			}
			_.hooks.run('complete', env);
			return;
		}

		_.hooks.run('before-highlight', env);

		if (async && _self.Worker) {
			var worker = new Worker(_.filename);

			worker.onmessage = function(evt) {
				env.highlightedCode = evt.data;

				_.hooks.run('before-insert', env);

				env.element.innerHTML = env.highlightedCode;

				callback && callback.call(env.element);
				_.hooks.run('after-highlight', env);
				_.hooks.run('complete', env);
			};

			worker.postMessage(JSON.stringify({
				language: env.language,
				code: env.code,
				immediateClose: true
			}));
		}
		else {
			env.highlightedCode = _.highlight(env.code, env.grammar, env.language);

			_.hooks.run('before-insert', env);

			env.element.innerHTML = env.highlightedCode;

			callback && callback.call(element);

			_.hooks.run('after-highlight', env);
			_.hooks.run('complete', env);
		}
	},

	highlight: function (text, grammar, language) {
		var tokens = _.tokenize(text, grammar);
		return Token.stringify(_.util.encode(tokens), language);
	},

	matchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {
		var Token = _.Token;

		for (var token in grammar) {
			if(!grammar.hasOwnProperty(token) || !grammar[token]) {
				continue;
			}

			if (token == target) {
				return;
			}

			var patterns = grammar[token];
			patterns = (_.util.type(patterns) === "Array") ? patterns : [patterns];

			for (var j = 0; j < patterns.length; ++j) {
				var pattern = patterns[j],
					inside = pattern.inside,
					lookbehind = !!pattern.lookbehind,
					greedy = !!pattern.greedy,
					lookbehindLength = 0,
					alias = pattern.alias;

				if (greedy && !pattern.pattern.global) {
					// Without the global flag, lastIndex won't work
					var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];
					pattern.pattern = RegExp(pattern.pattern.source, flags + "g");
				}

				pattern = pattern.pattern || pattern;

				// Don’t cache length as it changes during the loop
				for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {

					var str = strarr[i];

					if (strarr.length > text.length) {
						// Something went terribly wrong, ABORT, ABORT!
						return;
					}

					if (str instanceof Token) {
						continue;
					}

					pattern.lastIndex = 0;

					var match = pattern.exec(str),
					    delNum = 1;

					// Greedy patterns can override/remove up to two previously matched tokens
					if (!match && greedy && i != strarr.length - 1) {
						pattern.lastIndex = pos;
						match = pattern.exec(text);
						if (!match) {
							break;
						}

						var from = match.index + (lookbehind ? match[1].length : 0),
						    to = match.index + match[0].length,
						    k = i,
						    p = pos;

						for (var len = strarr.length; k < len && (p < to || (!strarr[k].type && !strarr[k - 1].greedy)); ++k) {
							p += strarr[k].length;
							// Move the index i to the element in strarr that is closest to from
							if (from >= p) {
								++i;
								pos = p;
							}
						}

						/*
						 * If strarr[i] is a Token, then the match starts inside another Token, which is invalid
						 * If strarr[k - 1] is greedy we are in conflict with another greedy pattern
						 */
						if (strarr[i] instanceof Token || strarr[k - 1].greedy) {
							continue;
						}

						// Number of tokens to delete and replace with the new match
						delNum = k - i;
						str = text.slice(pos, p);
						match.index -= pos;
					}

					if (!match) {
						if (oneshot) {
							break;
						}

						continue;
					}

					if(lookbehind) {
						lookbehindLength = match[1].length;
					}

					var from = match.index + lookbehindLength,
					    match = match[0].slice(lookbehindLength),
					    to = from + match.length,
					    before = str.slice(0, from),
					    after = str.slice(to);

					var args = [i, delNum];

					if (before) {
						++i;
						pos += before.length;
						args.push(before);
					}

					var wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias, match, greedy);

					args.push(wrapped);

					if (after) {
						args.push(after);
					}

					Array.prototype.splice.apply(strarr, args);

					if (delNum != 1)
						_.matchGrammar(text, strarr, grammar, i, pos, true, token);

					if (oneshot)
						break;
				}
			}
		}
	},

	tokenize: function(text, grammar, language) {
		var strarr = [text];

		var rest = grammar.rest;

		if (rest) {
			for (var token in rest) {
				grammar[token] = rest[token];
			}

			delete grammar.rest;
		}

		_.matchGrammar(text, strarr, grammar, 0, 0, false);

		return strarr;
	},

	hooks: {
		all: {},

		add: function (name, callback) {
			var hooks = _.hooks.all;

			hooks[name] = hooks[name] || [];

			hooks[name].push(callback);
		},

		run: function (name, env) {
			var callbacks = _.hooks.all[name];

			if (!callbacks || !callbacks.length) {
				return;
			}

			for (var i=0, callback; callback = callbacks[i++];) {
				callback(env);
			}
		}
	}
};

var Token = _.Token = function(type, content, alias, matchedStr, greedy) {
	this.type = type;
	this.content = content;
	this.alias = alias;
	// Copy of the full string this token was created from
	this.length = (matchedStr || "").length|0;
	this.greedy = !!greedy;
};

Token.stringify = function(o, language, parent) {
	if (typeof o == 'string') {
		return o;
	}

	if (_.util.type(o) === 'Array') {
		return o.map(function(element) {
			return Token.stringify(element, language, o);
		}).join('');
	}

	var env = {
		type: o.type,
		content: Token.stringify(o.content, language, parent),
		tag: 'span',
		classes: ['token', o.type],
		attributes: {},
		language: language,
		parent: parent
	};

	if (o.alias) {
		var aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];
		Array.prototype.push.apply(env.classes, aliases);
	}

	_.hooks.run('wrap', env);

	var attributes = Object.keys(env.attributes).map(function(name) {
		return name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
	}).join(' ');

	return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + (attributes ? ' ' + attributes : '') + '>' + env.content + '</' + env.tag + '>';

};

if (!_self.document) {
	if (!_self.addEventListener) {
		// in Node.js
		return _self.Prism;
	}

	if (!_.disableWorkerMessageHandler) {
		// In worker
		_self.addEventListener('message', function (evt) {
			var message = JSON.parse(evt.data),
				lang = message.language,
				code = message.code,
				immediateClose = message.immediateClose;

			_self.postMessage(_.highlight(code, _.languages[lang], lang));
			if (immediateClose) {
				_self.close();
			}
		}, false);
	}

	return _self.Prism;
}

//Get current script and highlight
var script = document.currentScript || [].slice.call(document.getElementsByTagName("script")).pop();

if (script) {
	_.filename = script.src;

	if (!_.manual && !script.hasAttribute('data-manual')) {
		if(document.readyState !== "loading") {
			if (window.requestAnimationFrame) {
				window.requestAnimationFrame(_.highlightAll);
			} else {
				window.setTimeout(_.highlightAll, 16);
			}
		}
		else {
			document.addEventListener('DOMContentLoaded', _.highlightAll);
		}
	}
}

return _self.Prism;

})();

if (typeof module !== 'undefined' && module.exports) {
	module.exports = Prism;
}

// hack for components to work correctly in node.js
if (typeof global !== 'undefined') {
	global.Prism = Prism;
}


/* **********************************************
     Begin prism-markup.js
********************************************** */

Prism.languages.markup = {
	'comment': /<!--[\s\S]*?-->/,
	'prolog': /<\?[\s\S]+?\?>/,
	'doctype': /<!DOCTYPE[\s\S]+?>/i,
	'cdata': /<!\[CDATA\[[\s\S]*?]]>/i,
	'tag': {
		pattern: /<\/?(?!\d)[^\s>\/=$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i,
		inside: {
			'tag': {
				pattern: /^<\/?[^\s>\/]+/i,
				inside: {
					'punctuation': /^<\/?/,
					'namespace': /^[^\s>\/:]+:/
				}
			},
			'attr-value': {
				pattern: /=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+)/i,
				inside: {
					'punctuation': [
						/^=/,
						{
							pattern: /(^|[^\\])["']/,
							lookbehind: true
						}
					]
				}
			},
			'punctuation': /\/?>/,
			'attr-name': {
				pattern: /[^\s>\/]+/,
				inside: {
					'namespace': /^[^\s>\/:]+:/
				}
			}

		}
	},
	'entity': /&#?[\da-z]{1,8};/i
};

Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =
	Prism.languages.markup['entity'];

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function(env) {

	if (env.type === 'entity') {
		env.attributes['title'] = env.content.replace(/&amp;/, '&');
	}
});

Prism.languages.xml = Prism.languages.markup;
Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;


/* **********************************************
     Begin prism-css.js
********************************************** */

Prism.languages.css = {
	'comment': /\/\*[\s\S]*?\*\//,
	'atrule': {
		pattern: /@[\w-]+?.*?(?:;|(?=\s*\{))/i,
		inside: {
			'rule': /@[\w-]+/
			// See rest below
		}
	},
	'url': /url\((?:(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,
	'selector': /[^{}\s][^{};]*?(?=\s*\{)/,
	'string': {
		pattern: /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
		greedy: true
	},
	'property': /[\w-]+(?=\s*:)/i,
	'important': /\B!important\b/i,
	'function': /[-a-z0-9]+(?=\()/i,
	'punctuation': /[(){};:]/
};

Prism.languages.css['atrule'].inside.rest = Prism.util.clone(Prism.languages.css);

if (Prism.languages.markup) {
	Prism.languages.insertBefore('markup', 'tag', {
		'style': {
			pattern: /(<style[\s\S]*?>)[\s\S]*?(?=<\/style>)/i,
			lookbehind: true,
			inside: Prism.languages.css,
			alias: 'language-css'
		}
	});
	
	Prism.languages.insertBefore('inside', 'attr-value', {
		'style-attr': {
			pattern: /\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,
			inside: {
				'attr-name': {
					pattern: /^\s*style/i,
					inside: Prism.languages.markup.tag.inside
				},
				'punctuation': /^\s*=\s*['"]|['"]\s*$/,
				'attr-value': {
					pattern: /.+/i,
					inside: Prism.languages.css
				}
			},
			alias: 'language-css'
		}
	}, Prism.languages.markup.tag);
}

/* **********************************************
     Begin prism-clike.js
********************************************** */

Prism.languages.clike = {
	'comment': [
		{
			pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
			lookbehind: true
		},
		{
			pattern: /(^|[^\\:])\/\/.*/,
			lookbehind: true
		}
	],
	'string': {
		pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
		greedy: true
	},
	'class-name': {
		pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,
		lookbehind: true,
		inside: {
			punctuation: /[.\\]/
		}
	},
	'keyword': /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
	'boolean': /\b(?:true|false)\b/,
	'function': /[a-z0-9_]+(?=\()/i,
	'number': /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i,
	'operator': /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,
	'punctuation': /[{}[\];(),.:]/
};


/* **********************************************
     Begin prism-javascript.js
********************************************** */

Prism.languages.javascript = Prism.languages.extend('clike', {
	'keyword': /\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,
	'number': /\b-?(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|\d*\.?\d+(?:[Ee][+-]?\d+)?|NaN|Infinity)\b/,
	// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
	'function': /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\s*\()/i,
	'operator': /-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/
});

Prism.languages.insertBefore('javascript', 'keyword', {
	'regex': {
		pattern: /(^|[^/])\/(?!\/)(\[[^\]\r\n]+]|\\.|[^/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/,
		lookbehind: true,
		greedy: true
	},
	// This must be declared before keyword because we use "function" inside the look-forward
	'function-variable': {
		pattern: /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\s*=\s*(?:function\b|(?:\([^()]*\)|[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)\s*=>))/i,
		alias: 'function'
	}
});

Prism.languages.insertBefore('javascript', 'string', {
	'template-string': {
		pattern: /`(?:\\[\s\S]|[^\\`])*`/,
		greedy: true,
		inside: {
			'interpolation': {
				pattern: /\$\{[^}]+\}/,
				inside: {
					'interpolation-punctuation': {
						pattern: /^\$\{|\}$/,
						alias: 'punctuation'
					},
					rest: Prism.languages.javascript
				}
			},
			'string': /[\s\S]+/
		}
	}
});

if (Prism.languages.markup) {
	Prism.languages.insertBefore('markup', 'tag', {
		'script': {
			pattern: /(<script[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,
			lookbehind: true,
			inside: Prism.languages.javascript,
			alias: 'language-javascript'
		}
	});
}

Prism.languages.js = Prism.languages.javascript;


/* **********************************************
     Begin prism-file-highlight.js
********************************************** */

(function () {
	if (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {
		return;
	}

	self.Prism.fileHighlight = function() {

		var Extensions = {
			'js': 'javascript',
			'py': 'python',
			'rb': 'ruby',
			'ps1': 'powershell',
			'psm1': 'powershell',
			'sh': 'bash',
			'bat': 'batch',
			'h': 'c',
			'tex': 'latex'
		};

		Array.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach(function (pre) {
			var src = pre.getAttribute('data-src');

			var language, parent = pre;
			var lang = /\blang(?:uage)?-(?!\*)(\w+)\b/i;
			while (parent && !lang.test(parent.className)) {
				parent = parent.parentNode;
			}

			if (parent) {
				language = (pre.className.match(lang) || [, ''])[1];
			}

			if (!language) {
				var extension = (src.match(/\.(\w+)$/) || [, ''])[1];
				language = Extensions[extension] || extension;
			}

			var code = document.createElement('code');
			code.className = 'language-' + language;

			pre.textContent = '';

			code.textContent = 'Loading…';

			pre.appendChild(code);

			var xhr = new XMLHttpRequest();

			xhr.open('GET', src, true);

			xhr.onreadystatechange = function () {
				if (xhr.readyState == 4) {

					if (xhr.status < 400 && xhr.responseText) {
						code.textContent = xhr.responseText;

						Prism.highlightElement(code);
					}
					else if (xhr.status >= 400) {
						code.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;
					}
					else {
						code.textContent = '✖ Error: File does not exist or is empty';
					}
				}
			};

			xhr.send(null);
		});

	};

	document.addEventListener('DOMContentLoaded', self.Prism.fileHighlight);

})();

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)))

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

const browsers = __webpack_require__(4)
const compatData = __webpack_require__(7)
const Helpers = __webpack_require__(14)
const objectPath = __webpack_require__(107)
const postcssSelectorParser = __webpack_require__(108)

const Selector = function (selectorString, source, rule) {
  this.selectorString = selectorString
  this.source = source
  this.rule = rule
}

Selector.prototype.process = function (issues) {
  let selectorIssues = {}
  let selectorIssueTitle

  postcssSelectorParser(selectors => {
    selectors.walk(selector => {
      switch (selector.type) {
        case 'attribute':
          selectorIssues['attribute'] = compatData.css.selectors.attribute
          selectorIssueTitle = 'Attribute'

          if (selector.insensitive) {
            selectorIssues['attribute.case_sensitive_modifier'] = compatData.css.selectors.attribute.case_sensitive_modifier
            selectorIssueTitle += ' (case insensitive)'
          }

          break

        case 'class':
          selectorIssues['class'] = compatData.css.selectors.class
          selectorIssueTitle = 'Class'

          break

        case 'combinator':
          switch (selector.value) {
            case ' ':
              selectorIssues['descendant'] = compatData.css.selectors.descendant
              selectorIssueTitle = 'Descendant'

              break

            case '>>':
              selectorIssues['descendant.two_greater_than_syntax'] = compatData.css.selectors.descendant.two_greater_than_syntax
              selectorIssueTitle = 'Descendant (>>)'

              break

            case '+':
              selectorIssues['adjacent_sibling'] = compatData.css.selectors.adjacent_sibling
              selectorIssueTitle = 'Adjacent sibling'

              break

            case '>':
              selectorIssues['child'] = compatData.css.selectors.child
              selectorIssueTitle = 'Child'

              break

            case '~':
              selectorIssues['general_sibling'] = compatData.css.selectors.general_sibling
              selectorIssueTitle = 'General sibling'

              break
          }

        case 'id':
          selectorIssues['id'] = compatData.css.selectors.id
          selectorIssueTitle = 'ID'

          break

        case 'pseudo':
          switch (selector.value) {
            case '::cue':
              selectorIssues['cue'] = compatData.css.selectors.cue
              selectorIssueTitle = '::cue'

              break
          }

          break

        case 'tag':
          selectorIssues['type'] = compatData.css.selectors.type
          selectorIssueTitle = 'Tag'

          if (selector._namespace) {
            selectorIssues['type.namespaces'] = compatData.css.selectors.type.namespaces
            selectorIssueTitle += ' (namespaced)'
          }

          break

        case 'universal':
          selectorIssues['universal'] = compatData.css.selectors.universal
          selectorIssueTitle = 'Universal'

          if (selector._namespace) {
            selectorIssues['universal.namespaces'] = compatData.css.selectors.universal.namespaces
            selectorIssueTitle += ' (namespaced)'
          }

          break
      }
    })
  }).processSync(this.selectorString)

  Object.keys(selectorIssues).forEach(issueKey => {
    const issueSupport = objectPath.get(
      selectorIssues,
      issueKey
    )

    Object.keys(issueSupport).forEach(browser => {
      if (!browsers.get(browser)) return

      const unsupportedVersions = Helpers.getUnsupportedVersions({
        browser,
        added: issueSupport[browser].version_added,
        removed: issueSupport[browser].version_removed
      })

      unsupportedVersions.forEach(version => {
        issues[browser][version].push({
          data: issueSupport,
          instance: {
            start: this.rule.source.start,
            end: this.rule.source.end
          },
          source: this.source.id,
          subType: 'selector',
          title: `${selectorIssueTitle} selector`,
          type: 'CSS'
        })
      })
    })
  })
}

module.exports = Selector


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory){
  'use strict';

  /*istanbul ignore next:cant test*/
  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = factory();
  } else if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {
    // Browser globals
    root.objectPath = factory();
  }
})(this, function(){
  'use strict';

  var toStr = Object.prototype.toString;
  function hasOwnProperty(obj, prop) {
    if(obj == null) {
      return false
    }
    //to handle objects with null prototypes (too edge case?)
    return Object.prototype.hasOwnProperty.call(obj, prop)
  }

  function isEmpty(value){
    if (!value) {
      return true;
    }
    if (isArray(value) && value.length === 0) {
        return true;
    } else if (typeof value !== 'string') {
        for (var i in value) {
            if (hasOwnProperty(value, i)) {
                return false;
            }
        }
        return true;
    }
    return false;
  }

  function toString(type){
    return toStr.call(type);
  }

  function isObject(obj){
    return typeof obj === 'object' && toString(obj) === "[object Object]";
  }

  var isArray = Array.isArray || function(obj){
    /*istanbul ignore next:cant test*/
    return toStr.call(obj) === '[object Array]';
  }

  function isBoolean(obj){
    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';
  }

  function getKey(key){
    var intKey = parseInt(key);
    if (intKey.toString() === key) {
      return intKey;
    }
    return key;
  }

  function factory(options) {
    options = options || {}

    var objectPath = function(obj) {
      return Object.keys(objectPath).reduce(function(proxy, prop) {
        if(prop === 'create') {
          return proxy;
        }

        /*istanbul ignore else*/
        if (typeof objectPath[prop] === 'function') {
          proxy[prop] = objectPath[prop].bind(objectPath, obj);
        }

        return proxy;
      }, {});
    };

    function hasShallowProperty(obj, prop) {
      return (options.includeInheritedProps || (typeof prop === 'number' && Array.isArray(obj)) || hasOwnProperty(obj, prop))
    }

    function getShallowProperty(obj, prop) {
      if (hasShallowProperty(obj, prop)) {
        return obj[prop];
      }
    }

    function set(obj, path, value, doNotReplace){
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (typeof path === 'string') {
        return set(obj, path.split('.').map(getKey), value, doNotReplace);
      }
      var currentPath = path[0];
      var currentValue = getShallowProperty(obj, currentPath);
      if (path.length === 1) {
        if (currentValue === void 0 || !doNotReplace) {
          obj[currentPath] = value;
        }
        return currentValue;
      }

      if (currentValue === void 0) {
        //check if we assume an array
        if(typeof path[1] === 'number') {
          obj[currentPath] = [];
        } else {
          obj[currentPath] = {};
        }
      }

      return set(obj[currentPath], path.slice(1), value, doNotReplace);
    }

    objectPath.has = function (obj, path) {
      if (typeof path === 'number') {
        path = [path];
      } else if (typeof path === 'string') {
        path = path.split('.');
      }

      if (!path || path.length === 0) {
        return !!obj;
      }

      for (var i = 0; i < path.length; i++) {
        var j = getKey(path[i]);

        if((typeof j === 'number' && isArray(obj) && j < obj.length) ||
          (options.includeInheritedProps ? (j in Object(obj)) : hasOwnProperty(obj, j))) {
          obj = obj[j];
        } else {
          return false;
        }
      }

      return true;
    };

    objectPath.ensureExists = function (obj, path, value){
      return set(obj, path, value, true);
    };

    objectPath.set = function (obj, path, value, doNotReplace){
      return set(obj, path, value, doNotReplace);
    };

    objectPath.insert = function (obj, path, value, at){
      var arr = objectPath.get(obj, path);
      at = ~~at;
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }
      arr.splice(at, 0, value);
    };

    objectPath.empty = function(obj, path) {
      if (isEmpty(path)) {
        return void 0;
      }
      if (obj == null) {
        return void 0;
      }

      var value, i;
      if (!(value = objectPath.get(obj, path))) {
        return void 0;
      }

      if (typeof value === 'string') {
        return objectPath.set(obj, path, '');
      } else if (isBoolean(value)) {
        return objectPath.set(obj, path, false);
      } else if (typeof value === 'number') {
        return objectPath.set(obj, path, 0);
      } else if (isArray(value)) {
        value.length = 0;
      } else if (isObject(value)) {
        for (i in value) {
          if (hasShallowProperty(value, i)) {
            delete value[i];
          }
        }
      } else {
        return objectPath.set(obj, path, null);
      }
    };

    objectPath.push = function (obj, path /*, values */){
      var arr = objectPath.get(obj, path);
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }

      arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
    };

    objectPath.coalesce = function (obj, paths, defaultValue) {
      var value;

      for (var i = 0, len = paths.length; i < len; i++) {
        if ((value = objectPath.get(obj, paths[i])) !== void 0) {
          return value;
        }
      }

      return defaultValue;
    };

    objectPath.get = function (obj, path, defaultValue){
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (obj == null) {
        return defaultValue;
      }
      if (typeof path === 'string') {
        return objectPath.get(obj, path.split('.'), defaultValue);
      }

      var currentPath = getKey(path[0]);
      var nextObj = getShallowProperty(obj, currentPath)
      if (nextObj === void 0) {
        return defaultValue;
      }

      if (path.length === 1) {
        return nextObj;
      }

      return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
    };

    objectPath.del = function del(obj, path) {
      if (typeof path === 'number') {
        path = [path];
      }

      if (obj == null) {
        return obj;
      }

      if (isEmpty(path)) {
        return obj;
      }
      if(typeof path === 'string') {
        return objectPath.del(obj, path.split('.'));
      }

      var currentPath = getKey(path[0]);
      if (!hasShallowProperty(obj, currentPath)) {
        return obj;
      }

      if(path.length === 1) {
        if (isArray(obj)) {
          obj.splice(currentPath, 1);
        } else {
          delete obj[currentPath];
        }
      } else {
        return objectPath.del(obj[currentPath], path.slice(1));
      }

      return obj;
    }

    return objectPath;
  }

  var mod = factory();
  mod.create = factory;
  mod.withInheritedProps = factory({includeInheritedProps: true})
  return mod;
});


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _processor = __webpack_require__(109);

var _processor2 = _interopRequireDefault(_processor);

var _selectors = __webpack_require__(117);

var selectors = _interopRequireWildcard(_selectors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var parser = function parser(processor) {
  return new _processor2.default(processor);
};

Object.assign(parser, selectors);

delete parser.__esModule;

exports.default = parser;
module.exports = exports['default'];

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _parser = __webpack_require__(110);

var _parser2 = _interopRequireDefault(_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Processor = function () {
    function Processor(func, options) {
        _classCallCheck(this, Processor);

        this.func = func || function noop() {};
        this.funcRes = null;
        this.options = options;
    }

    Processor.prototype._shouldUpdateSelector = function _shouldUpdateSelector(rule) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var merged = Object.assign({}, this.options, options);
        if (merged.updateSelector === false) {
            return false;
        } else {
            return typeof rule !== "string";
        }
    };

    Processor.prototype._isLossy = function _isLossy() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var merged = Object.assign({}, this.options, options);
        if (merged.lossless === false) {
            return true;
        } else {
            return false;
        }
    };

    Processor.prototype._root = function _root(rule) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var parser = new _parser2.default(rule, this._parseOptions(options));
        return parser.root;
    };

    Processor.prototype._parseOptions = function _parseOptions(options) {
        return {
            lossy: this._isLossy(options)
        };
    };

    Processor.prototype._run = function _run(rule) {
        var _this = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        return new Promise(function (resolve, reject) {
            try {
                var root = _this._root(rule, options);
                Promise.resolve(_this.func(root)).then(function (transform) {
                    var string = undefined;
                    if (_this._shouldUpdateSelector(rule, options)) {
                        string = root.toString();
                        rule.selector = string;
                    }
                    return { transform: transform, root: root, string: string };
                }).then(resolve, reject);
            } catch (e) {
                reject(e);
                return;
            }
        });
    };

    Processor.prototype._runSync = function _runSync(rule) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var root = this._root(rule, options);
        var transform = this.func(root);
        if (transform && typeof transform.then === "function") {
            throw new Error("Selector processor returned a promise to a synchronous call.");
        }
        var string = undefined;
        if (options.updateSelector && typeof rule !== "string") {
            string = root.toString();
            rule.selector = string;
        }
        return { transform: transform, root: root, string: string };
    };

    /**
     * Process rule into a selector AST.
     * 
     * @param rule {postcss.Rule | string} The css selector to be processed
     * @param options The options for processing
     * @returns {Promise<parser.Root>} The AST of the selector after processing it.
     */


    Processor.prototype.ast = function ast(rule, options) {
        return this._run(rule, options).then(function (result) {
            return result.root;
        });
    };

    /**
     * Process rule into a selector AST synchronously.
     * 
     * @param rule {postcss.Rule | string} The css selector to be processed
     * @param options The options for processing
     * @returns {parser.Root} The AST of the selector after processing it.
     */


    Processor.prototype.astSync = function astSync(rule, options) {
        return this._runSync(rule, options).root;
    };

    /**
     * Process a selector into a transformed value asynchronously
     * 
     * @param rule {postcss.Rule | string} The css selector to be processed
     * @param options The options for processing
     * @returns {Promise<any>} The value returned by the processor.
     */


    Processor.prototype.transform = function transform(rule, options) {
        return this._run(rule, options).then(function (result) {
            return result.transform;
        });
    };

    /**
     * Process a selector into a transformed value synchronously.
     * 
     * @param rule {postcss.Rule | string} The css selector to be processed
     * @param options The options for processing
     * @returns {any} The value returned by the processor.
     */


    Processor.prototype.transformSync = function transformSync(rule, options) {
        return this._runSync(rule, options).transform;
    };

    /**
     * Process a selector into a new selector string asynchronously.
     * 
     * @param rule {postcss.Rule | string} The css selector to be processed
     * @param options The options for processing
     * @returns {string} the selector after processing.
     */


    Processor.prototype.process = function process(rule, options) {
        return this._run(rule, options).then(function (result) {
            return result.string || result.root.toString();
        });
    };

    /**
     * Process a selector into a new selector string synchronously.
     * 
     * @param rule {postcss.Rule | string} The css selector to be processed
     * @param options The options for processing
     * @returns {string} the selector after processing.
     */


    Processor.prototype.processSync = function processSync(rule, options) {
        var result = this._runSync(rule, options);
        return result.string || result.root.toString();
    };

    return Processor;
}();

exports.default = Processor;
module.exports = exports["default"];

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dotProp = __webpack_require__(111);

var _dotProp2 = _interopRequireDefault(_dotProp);

var _indexesOf = __webpack_require__(113);

var _indexesOf2 = _interopRequireDefault(_indexesOf);

var _uniq = __webpack_require__(114);

var _uniq2 = _interopRequireDefault(_uniq);

var _root = __webpack_require__(47);

var _root2 = _interopRequireDefault(_root);

var _selector = __webpack_require__(48);

var _selector2 = _interopRequireDefault(_selector);

var _className = __webpack_require__(49);

var _className2 = _interopRequireDefault(_className);

var _comment = __webpack_require__(50);

var _comment2 = _interopRequireDefault(_comment);

var _id = __webpack_require__(51);

var _id2 = _interopRequireDefault(_id);

var _tag = __webpack_require__(52);

var _tag2 = _interopRequireDefault(_tag);

var _string = __webpack_require__(53);

var _string2 = _interopRequireDefault(_string);

var _pseudo = __webpack_require__(54);

var _pseudo2 = _interopRequireDefault(_pseudo);

var _attribute = __webpack_require__(55);

var _attribute2 = _interopRequireDefault(_attribute);

var _universal = __webpack_require__(56);

var _universal2 = _interopRequireDefault(_universal);

var _combinator = __webpack_require__(57);

var _combinator2 = _interopRequireDefault(_combinator);

var _nesting = __webpack_require__(58);

var _nesting2 = _interopRequireDefault(_nesting);

var _sortAscending = __webpack_require__(115);

var _sortAscending2 = _interopRequireDefault(_sortAscending);

var _tokenize = __webpack_require__(116);

var _tokenize2 = _interopRequireDefault(_tokenize);

var _tokenTypes = __webpack_require__(59);

var tokens = _interopRequireWildcard(_tokenTypes);

var _types = __webpack_require__(0);

var types = _interopRequireWildcard(_types);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function getSource(startLine, startColumn, endLine, endColumn) {
    return {
        start: {
            line: startLine,
            column: startColumn
        },
        end: {
            line: endLine,
            column: endColumn
        }
    };
}

var Parser = function () {
    function Parser(rule) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Parser);

        this.rule = rule;
        this.options = Object.assign({ lossy: false, safe: false }, options);
        this.position = 0;
        this.root = new _root2.default();
        this.root.errorGenerator = this._errorGenerator();

        var selector = new _selector2.default();
        this.root.append(selector);
        this.current = selector;

        this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;

        if (this.options.lossy) {
            this.css = this.css.trim();
        }
        this.tokens = (0, _tokenize2.default)({
            css: this.css,
            error: this._errorGenerator(),
            safe: this.options.safe
        });

        this.loop();
    }

    Parser.prototype._errorGenerator = function _errorGenerator() {
        var _this = this;

        return function (message, errorOptions) {
            if (typeof _this.rule === 'string') {
                return new Error(message);
            }
            return _this.rule.error(message, errorOptions);
        };
    };

    Parser.prototype.attribute = function attribute() {
        var attr = [];
        var startingToken = this.currToken;
        this.position++;
        while (this.position < this.tokens.length && this.currToken[0] !== tokens.closeSquare) {
            attr.push(this.currToken);
            this.position++;
        }
        if (this.currToken[0] !== tokens.closeSquare) {
            return this.expected('closing square bracket', this.currToken[5]);
        }

        var len = attr.length;
        var node = {
            source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),
            sourceIndex: startingToken[5]
        };

        if (len === 1 && !~[tokens.word].indexOf(attr[0][0])) {
            return this.expected('attribute', attr[0][5]);
        }

        var pos = 0;
        var spaceBefore = '';
        var commentBefore = '';
        var lastAdded = null;
        var spaceAfterMeaningfulToken = false;

        while (pos < len) {
            var token = attr[pos];
            var content = this.content(token);
            var next = attr[pos + 1];

            switch (token[0]) {
                case tokens.space:
                    if (len === 1 || pos === 0 && this.content(next) === '|') {
                        return this.expected('attribute', token[5], content);
                    }
                    spaceAfterMeaningfulToken = true;
                    if (this.options.lossy) {
                        break;
                    }
                    if (lastAdded) {
                        var spaceProp = 'spaces.' + lastAdded + '.after';
                        _dotProp2.default.set(node, spaceProp, _dotProp2.default.get(node, spaceProp, '') + content);
                        var commentProp = 'raws.spaces.' + lastAdded + '.after';
                        var existingComment = _dotProp2.default.get(node, commentProp);
                        if (existingComment) {
                            _dotProp2.default.set(node, commentProp, existingComment + content);
                        }
                    } else {
                        spaceBefore = spaceBefore + content;
                        commentBefore = commentBefore + content;
                    }
                    break;
                case tokens.asterisk:
                    if (next[0] === tokens.equals) {
                        node.operator = content;
                        lastAdded = 'operator';
                    } else if ((!node.namespace || lastAdded === "namespace" && !spaceAfterMeaningfulToken) && next) {
                        if (spaceBefore) {
                            _dotProp2.default.set(node, 'spaces.attribute.before', spaceBefore);
                            spaceBefore = '';
                        }
                        if (commentBefore) {
                            _dotProp2.default.set(node, 'raws.spaces.attribute.before', spaceBefore);
                            commentBefore = '';
                        }
                        node.namespace = (node.namespace || "") + content;
                        var rawValue = _dotProp2.default.get(node, "raws.namespace");
                        if (rawValue) {
                            node.raws.namespace += content;
                        }
                        lastAdded = 'namespace';
                    }
                    spaceAfterMeaningfulToken = false;
                    break;
                case tokens.dollar:
                case tokens.caret:
                    if (next[0] === tokens.equals) {
                        node.operator = content;
                        lastAdded = 'operator';
                    }
                    spaceAfterMeaningfulToken = false;
                    break;
                case tokens.combinator:
                    if (content === '~' && next[0] === tokens.equals) {
                        node.operator = content;
                        lastAdded = 'operator';
                    }
                    if (content !== '|') {
                        spaceAfterMeaningfulToken = false;
                        break;
                    }
                    if (next[0] === tokens.equals) {
                        node.operator = content;
                        lastAdded = 'operator';
                    } else if (!node.namespace && !node.attribute) {
                        node.namespace = true;
                    }
                    spaceAfterMeaningfulToken = false;
                    break;
                case tokens.word:
                    if (next && this.content(next) === '|' && attr[pos + 2] && attr[pos + 2][0] !== tokens.equals && // this look-ahead probably fails with comment nodes involved.
                    !node.operator && !node.namespace) {
                        node.namespace = content;
                        lastAdded = 'namespace';
                    } else if (!node.attribute || lastAdded === "attribute" && !spaceAfterMeaningfulToken) {
                        if (spaceBefore) {
                            _dotProp2.default.set(node, 'spaces.attribute.before', spaceBefore);
                            spaceBefore = '';
                        }
                        if (commentBefore) {
                            _dotProp2.default.set(node, 'raws.spaces.attribute.before', commentBefore);
                            commentBefore = '';
                        }
                        node.attribute = (node.attribute || "") + content;
                        var _rawValue = _dotProp2.default.get(node, "raws.attribute");
                        if (_rawValue) {
                            node.raws.attribute += content;
                        }
                        lastAdded = 'attribute';
                    } else if (!node.value || lastAdded === "value" && !spaceAfterMeaningfulToken) {
                        node.value = (node.value || "") + content;
                        var _rawValue2 = _dotProp2.default.get(node, "raws.value");
                        if (_rawValue2) {
                            node.raws.value += content;
                        }
                        lastAdded = 'value';
                        _dotProp2.default.set(node, 'raws.unquoted', _dotProp2.default.get(node, 'raws.unquoted', '') + content);
                    } else if (content === 'i') {
                        if (node.value && (node.quoted || spaceAfterMeaningfulToken)) {
                            node.insensitive = true;
                            lastAdded = 'insensitive';
                            if (spaceBefore) {
                                _dotProp2.default.set(node, 'spaces.insensitive.before', spaceBefore);
                                spaceBefore = '';
                            }
                            if (commentBefore) {
                                _dotProp2.default.set(node, 'raws.spaces.insensitive.before', commentBefore);
                                commentBefore = '';
                            }
                        } else if (node.value) {
                            lastAdded = 'value';
                            node.value += 'i';
                            if (node.raws.value) {
                                node.raws.value += 'i';
                            }
                        }
                    }
                    spaceAfterMeaningfulToken = false;
                    break;
                case tokens.str:
                    if (!node.attribute || !node.operator) {
                        return this.error('Expected an attribute followed by an operator preceding the string.', {
                            index: token[5]
                        });
                    }
                    node.value = content;
                    node.quoted = true;
                    lastAdded = 'value';
                    _dotProp2.default.set(node, 'raws.unquoted', content.slice(1, -1));
                    spaceAfterMeaningfulToken = false;
                    break;
                case tokens.equals:
                    if (!node.attribute) {
                        return this.expected('attribute', token[5], content);
                    }
                    if (node.value) {
                        return this.error('Unexpected "=" found; an operator was already defined.', { index: token[5] });
                    }
                    node.operator = node.operator ? node.operator + content : content;
                    lastAdded = 'operator';
                    spaceAfterMeaningfulToken = false;
                    break;
                case tokens.comment:
                    if (lastAdded) {
                        if (spaceAfterMeaningfulToken || next && next[0] === tokens.space) {
                            var lastComment = _dotProp2.default.get(node, 'raws.spaces.' + lastAdded + '.after', _dotProp2.default.get(node, 'spaces.' + lastAdded + '.after', ''));
                            _dotProp2.default.set(node, 'raws.spaces.' + lastAdded + '.after', lastComment + content);
                        } else {
                            var lastValue = _dotProp2.default.get(node, 'raws.' + lastAdded, _dotProp2.default.get(node, lastAdded, ''));
                            _dotProp2.default.set(node, 'raws.' + lastAdded, lastValue + content);
                        }
                    } else {
                        commentBefore = commentBefore + content;
                    }
                    break;
                default:
                    return this.error('Unexpected "' + content + '" found.', { index: token[5] });
            }
            pos++;
        }

        this.newNode(new _attribute2.default(node));
        this.position++;
    };

    Parser.prototype.combinator = function combinator() {
        var current = this.currToken;
        if (this.content() === '|') {
            return this.namespace();
        }
        var node = new _combinator2.default({
            value: '',
            source: getSource(current[1], current[2], current[3], current[4]),
            sourceIndex: current[5]
        });
        while (this.position < this.tokens.length && this.currToken && (this.currToken[0] === tokens.space || this.currToken[0] === tokens.combinator)) {
            var content = this.content();
            if (this.nextToken && this.nextToken[0] === tokens.combinator) {
                node.spaces.before = this.parseSpace(content);
                node.source = getSource(this.nextToken[1], this.nextToken[2], this.nextToken[3], this.nextToken[4]);
                node.sourceIndex = this.nextToken[5];
            } else if (this.prevToken && this.prevToken[0] === tokens.combinator) {
                node.spaces.after = this.parseSpace(content);
            } else if (this.currToken[0] === tokens.combinator) {
                node.value = content;
            } else if (this.currToken[0] === tokens.space) {
                node.value = this.parseSpace(content, ' ');
            }
            this.position++;
        }
        return this.newNode(node);
    };

    Parser.prototype.comma = function comma() {
        if (this.position === this.tokens.length - 1) {
            this.root.trailingComma = true;
            this.position++;
            return;
        }
        var selector = new _selector2.default();
        this.current.parent.append(selector);
        this.current = selector;
        this.position++;
    };

    Parser.prototype.comment = function comment() {
        var current = this.currToken;
        this.newNode(new _comment2.default({
            value: this.content(),
            source: getSource(current[1], current[2], current[3], current[4]),
            sourceIndex: current[5]
        }));
        this.position++;
    };

    Parser.prototype.error = function error(message, opts) {
        throw this.root.error(message, opts);
    };

    Parser.prototype.missingBackslash = function missingBackslash() {
        return this.error('Expected a backslash preceding the semicolon.', {
            index: this.currToken[5]
        });
    };

    Parser.prototype.missingParenthesis = function missingParenthesis() {
        return this.expected('opening parenthesis', this.currToken[5]);
    };

    Parser.prototype.missingSquareBracket = function missingSquareBracket() {
        return this.expected('opening square bracket', this.currToken[5]);
    };

    Parser.prototype.namespace = function namespace() {
        var before = this.prevToken && this.content(this.prevToken) || true;
        if (this.nextToken[0] === tokens.word) {
            this.position++;
            return this.word(before);
        } else if (this.nextToken[0] === tokens.asterisk) {
            this.position++;
            return this.universal(before);
        }
    };

    Parser.prototype.nesting = function nesting() {
        var current = this.currToken;
        this.newNode(new _nesting2.default({
            value: this.content(),
            source: getSource(current[1], current[2], current[3], current[4]),
            sourceIndex: current[5]
        }));
        this.position++;
    };

    Parser.prototype.parentheses = function parentheses() {
        var last = this.current.last;
        var balanced = 1;
        this.position++;
        if (last && last.type === types.PSEUDO) {
            var selector = new _selector2.default();
            var cache = this.current;
            last.append(selector);
            this.current = selector;
            while (this.position < this.tokens.length && balanced) {
                if (this.currToken[0] === tokens.openParenthesis) {
                    balanced++;
                }
                if (this.currToken[0] === tokens.closeParenthesis) {
                    balanced--;
                }
                if (balanced) {
                    this.parse();
                } else {
                    selector.parent.source.end.line = this.currToken[3];
                    selector.parent.source.end.column = this.currToken[4];
                    this.position++;
                }
            }
            this.current = cache;
        } else {
            last.value += '(';
            while (this.position < this.tokens.length && balanced) {
                if (this.currToken[0] === tokens.openParenthesis) {
                    balanced++;
                }
                if (this.currToken[0] === tokens.closeParenthesis) {
                    balanced--;
                }
                last.value += this.parseParenthesisToken(this.currToken);
                this.position++;
            }
        }
        if (balanced) {
            return this.expected('closing parenthesis', this.currToken[5]);
        }
    };

    Parser.prototype.pseudo = function pseudo() {
        var _this2 = this;

        var pseudoStr = '';
        var startingToken = this.currToken;
        while (this.currToken && this.currToken[0] === tokens.colon) {
            pseudoStr += this.content();
            this.position++;
        }
        if (!this.currToken) {
            return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);
        }
        if (this.currToken[0] === tokens.word) {
            this.splitWord(false, function (first, length) {
                pseudoStr += first;
                _this2.newNode(new _pseudo2.default({
                    value: pseudoStr,
                    source: getSource(startingToken[1], startingToken[2], _this2.currToken[3], _this2.currToken[4]),
                    sourceIndex: startingToken[5]
                }));
                if (length > 1 && _this2.nextToken && _this2.nextToken[0] === tokens.openParenthesis) {
                    _this2.error('Misplaced parenthesis.', {
                        index: _this2.nextToken[5]
                    });
                }
            });
        } else {
            return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[5]);
        }
    };

    Parser.prototype.space = function space() {
        var content = this.content();
        // Handle space before and after the selector
        if (this.position === 0 || this.prevToken[0] === tokens.comma || this.prevToken[0] === tokens.openParenthesis) {
            this.spaces = this.parseSpace(content);
            this.position++;
        } else if (this.position === this.tokens.length - 1 || this.nextToken[0] === tokens.comma || this.nextToken[0] === tokens.closeParenthesis) {
            this.current.last.spaces.after = this.parseSpace(content);
            this.position++;
        } else {
            this.combinator();
        }
    };

    Parser.prototype.string = function string() {
        var current = this.currToken;
        this.newNode(new _string2.default({
            value: this.content(),
            source: getSource(current[1], current[2], current[3], current[4]),
            sourceIndex: current[5]
        }));
        this.position++;
    };

    Parser.prototype.universal = function universal(namespace) {
        var nextToken = this.nextToken;
        if (nextToken && this.content(nextToken) === '|') {
            this.position++;
            return this.namespace();
        }
        var current = this.currToken;
        this.newNode(new _universal2.default({
            value: this.content(),
            source: getSource(current[1], current[2], current[3], current[4]),
            sourceIndex: current[5]
        }), namespace);
        this.position++;
    };

    Parser.prototype.splitWord = function splitWord(namespace, firstCallback) {
        var _this3 = this;

        var nextToken = this.nextToken;
        var word = this.content();
        while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[0])) {
            this.position++;
            var current = this.content();
            word += current;
            if (current.lastIndexOf('\\') === current.length - 1) {
                var next = this.nextToken;
                if (next && next[0] === tokens.space) {
                    word += this.parseSpace(this.content(next), ' ');
                    this.position++;
                }
            }
            nextToken = this.nextToken;
        }
        var hasClass = (0, _indexesOf2.default)(word, '.');
        var hasId = (0, _indexesOf2.default)(word, '#');
        // Eliminate Sass interpolations from the list of id indexes
        var interpolations = (0, _indexesOf2.default)(word, '#{');
        if (interpolations.length) {
            hasId = hasId.filter(function (hashIndex) {
                return !~interpolations.indexOf(hashIndex);
            });
        }
        var indices = (0, _sortAscending2.default)((0, _uniq2.default)([0].concat(hasClass, hasId)));
        indices.forEach(function (ind, i) {
            var index = indices[i + 1] || word.length;
            var value = word.slice(ind, index);
            if (i === 0 && firstCallback) {
                return firstCallback.call(_this3, value, indices.length);
            }
            var node = void 0;
            var current = _this3.currToken;
            var sourceIndex = current[5] + indices[i];
            var source = getSource(current[1], current[2] + ind, current[3], current[2] + (index - 1));
            if (~hasClass.indexOf(ind)) {
                node = new _className2.default({
                    value: value.slice(1),
                    source: source,
                    sourceIndex: sourceIndex
                });
            } else if (~hasId.indexOf(ind)) {
                node = new _id2.default({
                    value: value.slice(1),
                    source: source,
                    sourceIndex: sourceIndex
                });
            } else {
                node = new _tag2.default({
                    value: value,
                    source: source,
                    sourceIndex: sourceIndex
                });
            }
            _this3.newNode(node, namespace);
            // Ensure that the namespace is used only once
            namespace = null;
        });
        this.position++;
    };

    Parser.prototype.word = function word(namespace) {
        var nextToken = this.nextToken;
        if (nextToken && this.content(nextToken) === '|') {
            this.position++;
            return this.namespace();
        }
        return this.splitWord(namespace);
    };

    Parser.prototype.loop = function loop() {
        while (this.position < this.tokens.length) {
            this.parse(true);
        }
        return this.root;
    };

    Parser.prototype.parse = function parse(throwOnParenthesis) {
        switch (this.currToken[0]) {
            case tokens.space:
                this.space();
                break;
            case tokens.comment:
                this.comment();
                break;
            case tokens.openParenthesis:
                this.parentheses();
                break;
            case tokens.closeParenthesis:
                if (throwOnParenthesis) {
                    this.missingParenthesis();
                }
                break;
            case tokens.openSquare:
                this.attribute();
                break;
            case tokens.dollar:
            case tokens.caret:
            case tokens.equals:
            case tokens.word:
                this.word();
                break;
            case tokens.colon:
                this.pseudo();
                break;
            case tokens.comma:
                this.comma();
                break;
            case tokens.asterisk:
                this.universal();
                break;
            case tokens.ampersand:
                this.nesting();
                break;
            case tokens.combinator:
                this.combinator();
                break;
            case tokens.str:
                this.string();
                break;
            // These cases throw; no break needed.
            case tokens.closeSquare:
                this.missingSquareBracket();
            case tokens.semicolon:
                this.missingBackslash();
        }
    };

    /**
     * Helpers
     */

    Parser.prototype.expected = function expected(description, index, found) {
        if (Array.isArray(description)) {
            var last = description.pop();
            description = description.join(', ') + ' or ' + last;
        }
        var an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';
        if (!found) {
            return this.error('Expected ' + an + ' ' + description + '.', { index: index });
        }
        return this.error('Expected ' + an + ' ' + description + ', found "' + found + '" instead.', { index: index });
    };

    Parser.prototype.parseNamespace = function parseNamespace(namespace) {
        if (this.options.lossy && typeof namespace === 'string') {
            var trimmed = namespace.trim();
            if (!trimmed.length) {
                return true;
            }

            return trimmed;
        }

        return namespace;
    };

    Parser.prototype.parseSpace = function parseSpace(space) {
        var replacement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

        return this.options.lossy ? replacement : space;
    };

    Parser.prototype.parseValue = function parseValue(value) {
        if (!this.options.lossy || !value || typeof value !== 'string') {
            return value;
        }
        return value.trim();
    };

    Parser.prototype.parseParenthesisToken = function parseParenthesisToken(token) {
        var content = this.content(token);
        if (!this.options.lossy) {
            return content;
        }

        if (token[0] === tokens.space) {
            return this.parseSpace(content, ' ');
        }

        return this.parseValue(content);
    };

    Parser.prototype.newNode = function newNode(node, namespace) {
        if (namespace) {
            node.namespace = this.parseNamespace(namespace);
        }
        if (this.spaces) {
            node.spaces.before = this.spaces;
            this.spaces = '';
        }
        return this.current.append(node);
    };

    Parser.prototype.content = function content() {
        var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currToken;

        return this.css.slice(token[5], token[6]);
    };

    _createClass(Parser, [{
        key: 'currToken',
        get: function get() {
            return this.tokens[this.position];
        }
    }, {
        key: 'nextToken',
        get: function get() {
            return this.tokens[this.position + 1];
        }
    }, {
        key: 'prevToken',
        get: function get() {
            return this.tokens[this.position - 1];
        }
    }]);

    return Parser;
}();

exports.default = Parser;
module.exports = exports['default'];

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const isObj = __webpack_require__(112);

function getPathSegments(path) {
	const pathArr = path.split('.');
	const parts = [];

	for (let i = 0; i < pathArr.length; i++) {
		let p = pathArr[i];

		while (p[p.length - 1] === '\\' && pathArr[i + 1] !== undefined) {
			p = p.slice(0, -1) + '.';
			p += pathArr[++i];
		}

		parts.push(p);
	}

	return parts;
}

module.exports = {
	get(obj, path, value) {
		if (!isObj(obj) || typeof path !== 'string') {
			return value === undefined ? obj : value;
		}

		const pathArr = getPathSegments(path);

		for (let i = 0; i < pathArr.length; i++) {
			if (!Object.prototype.propertyIsEnumerable.call(obj, pathArr[i])) {
				return value;
			}

			obj = obj[pathArr[i]];

			if (obj === undefined || obj === null) {
				// `obj` is either `undefined` or `null` so we want to stop the loop, and
				// if this is not the last bit of the path, and
				// if it did't return `undefined`
				// it would return `null` if `obj` is `null`
				// but we want `get({foo: null}, 'foo.bar')` to equal `undefined`, or the supplied value, not `null`
				if (i !== pathArr.length - 1) {
					return value;
				}

				break;
			}
		}

		return obj;
	},

	set(obj, path, value) {
		if (!isObj(obj) || typeof path !== 'string') {
			return obj;
		}

		const root = obj;
		const pathArr = getPathSegments(path);

		for (let i = 0; i < pathArr.length; i++) {
			const p = pathArr[i];

			if (!isObj(obj[p])) {
				obj[p] = {};
			}

			if (i === pathArr.length - 1) {
				obj[p] = value;
			}

			obj = obj[p];
		}

		return root;
	},

	delete(obj, path) {
		if (!isObj(obj) || typeof path !== 'string') {
			return;
		}

		const pathArr = getPathSegments(path);

		for (let i = 0; i < pathArr.length; i++) {
			const p = pathArr[i];

			if (i === pathArr.length - 1) {
				delete obj[p];
				return;
			}

			obj = obj[p];

			if (!isObj(obj)) {
				return;
			}
		}
	},

	has(obj, path) {
		if (!isObj(obj) || typeof path !== 'string') {
			return false;
		}

		const pathArr = getPathSegments(path);

		for (let i = 0; i < pathArr.length; i++) {
			if (isObj(obj)) {
				if (!(pathArr[i] in obj)) {
					return false;
				}

				obj = obj[pathArr[i]];
			} else {
				return false;
			}
		}

		return true;
	}
};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function (x) {
	var type = typeof x;
	return x !== null && (type === 'object' || type === 'function');
};


/***/ }),
/* 113 */
/***/ (function(module, exports) {

module.exports = function (ary, item) {
  var i = -1, indexes = []
  while((i = ary.indexOf(item, i + 1)) !== -1)
    indexes.push(i)
  return indexes
}


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function unique_pred(list, compare) {
  var ptr = 1
    , len = list.length
    , a=list[0], b=list[0]
  for(var i=1; i<len; ++i) {
    b = a
    a = list[i]
    if(compare(a, b)) {
      if(i === ptr) {
        ptr++
        continue
      }
      list[ptr++] = a
    }
  }
  list.length = ptr
  return list
}

function unique_eq(list) {
  var ptr = 1
    , len = list.length
    , a=list[0], b = list[0]
  for(var i=1; i<len; ++i, b=a) {
    b = a
    a = list[i]
    if(a !== b) {
      if(i === ptr) {
        ptr++
        continue
      }
      list[ptr++] = a
    }
  }
  list.length = ptr
  return list
}

function unique(list, compare, sorted) {
  if(list.length === 0) {
    return list
  }
  if(compare) {
    if(!sorted) {
      list.sort(compare)
    }
    return unique_pred(list, compare)
  }
  if(!sorted) {
    list.sort()
  }
  return unique_eq(list)
}

module.exports = unique


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = sortAscending;
function sortAscending(list) {
    return list.sort(function (a, b) {
        return a - b;
    });
};
module.exports = exports["default"];

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = tokenize;

var _tokenTypes = __webpack_require__(59);

var t = _interopRequireWildcard(_tokenTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var wordEnd = /[ \n\t\r\(\)\*:;!&'"\+\|~>,=$^\[\]\\]|\/(?=\*)/g;

function tokenize(input) {
    var tokens = [];
    var css = input.css.valueOf();
    var _css = css,
        length = _css.length;

    var offset = -1;
    var line = 1;
    var start = 0;
    var end = 0;

    var code = void 0,
        content = void 0,
        endColumn = void 0,
        endLine = void 0,
        escaped = void 0,
        escapePos = void 0,
        last = void 0,
        lines = void 0,
        next = void 0,
        nextLine = void 0,
        nextOffset = void 0,
        quote = void 0,
        tokenType = void 0;

    function unclosed(what, fix) {
        if (input.safe) {
            // fyi: this is never set to true.
            css += fix;
            next = css.length - 1;
        } else {
            throw input.error('Unclosed ' + what, line, start - offset, start);
        }
    }

    while (start < length) {
        code = css.charCodeAt(start);

        if (code === t.newline) {
            offset = start;
            line += 1;
        }

        switch (code) {
            case t.newline:
            case t.space:
            case t.tab:
            case t.cr:
            case t.feed:
                next = start;
                do {
                    next += 1;
                    code = css.charCodeAt(next);
                    if (code === t.newline) {
                        offset = next;
                        line += 1;
                    }
                } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);

                tokenType = t.space;
                endLine = line;
                endColumn = start - offset;
                end = next;
                break;

            case t.plus:
            case t.greaterThan:
            case t.tilde:
            case t.pipe:
                next = start;
                do {
                    next += 1;
                    code = css.charCodeAt(next);
                } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);

                tokenType = t.combinator;
                endLine = line;
                endColumn = start - offset;
                end = next;
                break;

            // Consume these characters as single tokens.
            case t.asterisk:
            case t.ampersand:
            case t.comma:
            case t.equals:
            case t.dollar:
            case t.caret:
            case t.openSquare:
            case t.closeSquare:
            case t.colon:
            case t.semicolon:
            case t.openParenthesis:
            case t.closeParenthesis:
                next = start;
                tokenType = code;
                endLine = line;
                endColumn = start - offset;
                end = next + 1;
                break;

            case t.singleQuote:
            case t.doubleQuote:
                quote = code === t.singleQuote ? "'" : '"';
                next = start;
                do {
                    escaped = false;
                    next = css.indexOf(quote, next + 1);
                    if (next === -1) {
                        unclosed('quote', quote);
                    }
                    escapePos = next;
                    while (css.charCodeAt(escapePos - 1) === t.backslash) {
                        escapePos -= 1;
                        escaped = !escaped;
                    }
                } while (escaped);

                tokenType = t.str;
                endLine = line;
                endColumn = start - offset;
                end = next + 1;
                break;

            case t.backslash:
                next = start;
                escaped = true;
                while (css.charCodeAt(next + 1) === t.backslash) {
                    next += 1;
                    escaped = !escaped;
                }
                code = css.charCodeAt(next + 1);
                if (escaped && code !== t.slash && code !== t.space && code !== t.newline && code !== t.tab && code !== t.cr && code !== t.feed) {
                    next += 1;
                }

                tokenType = t.word;
                endLine = line;
                endColumn = next - offset;
                end = next + 1;
                break;

            default:
                if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {
                    next = css.indexOf('*/', start + 2) + 1;
                    if (next === 0) {
                        unclosed('comment', '*/');
                    }

                    content = css.slice(start, next + 1);
                    lines = content.split('\n');
                    last = lines.length - 1;

                    if (last > 0) {
                        nextLine = line + last;
                        nextOffset = next - lines[last].length;
                    } else {
                        nextLine = line;
                        nextOffset = offset;
                    }

                    tokenType = t.comment;
                    line = nextLine;
                    endLine = nextLine;
                    endColumn = next - nextOffset;
                } else {
                    wordEnd.lastIndex = start + 1;
                    wordEnd.test(css);
                    if (wordEnd.lastIndex === 0) {
                        next = css.length - 1;
                    } else {
                        next = wordEnd.lastIndex - 2;
                    }

                    tokenType = t.word;
                    endLine = line;
                    endColumn = next - offset;
                }

                end = next + 1;
                break;
        }

        // Ensure that the token structure remains consistent
        tokens.push([tokenType, // [0] Token type
        line, // [1] Starting line
        start - offset, // [2] Starting column
        endLine, // [3] Ending line
        endColumn, // [4] Ending column
        start, // [5] Start position / Source index
        end]);

        // Reset offset for the next token
        if (nextOffset) {
            offset = nextOffset;
            nextOffset = null;
        }

        start = end;
    }

    return tokens;
}
module.exports = exports['default'];

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _types = __webpack_require__(0);

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _types[key];
    }
  });
});

var _constructors = __webpack_require__(118);

Object.keys(_constructors).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _constructors[key];
    }
  });
});

var _guards = __webpack_require__(119);

Object.keys(_guards).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _guards[key];
    }
  });
});

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = undefined;

var _attribute = __webpack_require__(55);

var _attribute2 = _interopRequireDefault(_attribute);

var _className = __webpack_require__(49);

var _className2 = _interopRequireDefault(_className);

var _combinator = __webpack_require__(57);

var _combinator2 = _interopRequireDefault(_combinator);

var _comment = __webpack_require__(50);

var _comment2 = _interopRequireDefault(_comment);

var _id = __webpack_require__(51);

var _id2 = _interopRequireDefault(_id);

var _nesting = __webpack_require__(58);

var _nesting2 = _interopRequireDefault(_nesting);

var _pseudo = __webpack_require__(54);

var _pseudo2 = _interopRequireDefault(_pseudo);

var _root = __webpack_require__(47);

var _root2 = _interopRequireDefault(_root);

var _selector = __webpack_require__(48);

var _selector2 = _interopRequireDefault(_selector);

var _string = __webpack_require__(53);

var _string2 = _interopRequireDefault(_string);

var _tag = __webpack_require__(52);

var _tag2 = _interopRequireDefault(_tag);

var _universal = __webpack_require__(56);

var _universal2 = _interopRequireDefault(_universal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var attribute = exports.attribute = function attribute(opts) {
  return new _attribute2.default(opts);
};
var className = exports.className = function className(opts) {
  return new _className2.default(opts);
};
var combinator = exports.combinator = function combinator(opts) {
  return new _combinator2.default(opts);
};
var comment = exports.comment = function comment(opts) {
  return new _comment2.default(opts);
};
var id = exports.id = function id(opts) {
  return new _id2.default(opts);
};
var nesting = exports.nesting = function nesting(opts) {
  return new _nesting2.default(opts);
};
var pseudo = exports.pseudo = function pseudo(opts) {
  return new _pseudo2.default(opts);
};
var root = exports.root = function root(opts) {
  return new _root2.default(opts);
};
var selector = exports.selector = function selector(opts) {
  return new _selector2.default(opts);
};
var string = exports.string = function string(opts) {
  return new _string2.default(opts);
};
var tag = exports.tag = function tag(opts) {
  return new _tag2.default(opts);
};
var universal = exports.universal = function universal(opts) {
  return new _universal2.default(opts);
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = exports.isPseudo = exports.isNesting = exports.isIdentifier = exports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _IS_TYPE;

exports.isNode = isNode;
exports.isPseudoElement = isPseudoElement;
exports.isPseudoClass = isPseudoClass;
exports.isContainer = isContainer;
exports.isNamespace = isNamespace;

var _types = __webpack_require__(0);

var IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);

function isNode(node) {
    return (typeof node === "undefined" ? "undefined" : _typeof(node)) === "object" && IS_TYPE[node.type];
}

function isNodeType(type, node) {
    return isNode(node) && node.type === type;
}

var isAttribute = exports.isAttribute = isNodeType.bind(null, _types.ATTRIBUTE);
var isClassName = exports.isClassName = isNodeType.bind(null, _types.CLASS);
var isCombinator = exports.isCombinator = isNodeType.bind(null, _types.COMBINATOR);
var isComment = exports.isComment = isNodeType.bind(null, _types.COMMENT);
var isIdentifier = exports.isIdentifier = isNodeType.bind(null, _types.ID);
var isNesting = exports.isNesting = isNodeType.bind(null, _types.NESTING);
var isPseudo = exports.isPseudo = isNodeType.bind(null, _types.PSEUDO);
var isRoot = exports.isRoot = isNodeType.bind(null, _types.ROOT);
var isSelector = exports.isSelector = isNodeType.bind(null, _types.SELECTOR);
var isString = exports.isString = isNodeType.bind(null, _types.STRING);
var isTag = exports.isTag = isNodeType.bind(null, _types.TAG);
var isUniversal = exports.isUniversal = isNodeType.bind(null, _types.UNIVERSAL);

function isPseudoElement(node) {
    return isPseudo(node) && node.value && (node.value.startsWith("::") || node.value === ":before" || node.value === ":after");
}
function isPseudoClass(node) {
    return isPseudo(node) && !isPseudoElement(node);
}

function isContainer(node) {
    return !!(isNode(node) && node.walk);
}

function isNamespace(node) {
    return isClassName(node) || isAttribute(node) || isTag(node);
}

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(121);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!./Browser.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!./Browser.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, "._2mISHGINCM57ao08lfZlIH {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  justify-content: space-between;\n  max-width: 100px;\n}\n\n._3mzC3GJmXFYGQOcVyhW0wi {\n  padding: 0 5px;\n  text-align: center;\n  margin: 0;\n}\n\n._3YpP2lZsoglPjQpk6hH2gy {\n  padding: 0;\n}\n\n._1SZeIw2eQjWzUdnZZzDZQV {\n  background-color: #c5ffc3;\n  border: 1px solid var(--theme-splitter);\n  list-style: none;\n  position: relative;\n  margin: 5px;\n  text-align: center;\n  transition: all 0.2s ease-out;\n}\n\n._31hlh1HbOKh76cm4OChTtc {\n  border: 1px dashed var(--theme-highlight-blue);\n}\n\n._1JpJDKxqG52cn4FHm4u-yP ._1TE8vT1U7i6e4ezOWdVweO {\n  cursor: pointer;\n}\n\n._1JpJDKxqG52cn4FHm4u-yP:hover {\n  cursor: pointer;\n  opacity: 0.6;\n}\n\n._1TE8vT1U7i6e4ezOWdVweO {\n  display: block;\n  width: 100%;\n  height: 100%;\n  padding: 6px;\n}\n", ""]);

// exports
exports.locals = {
	"browser": "_2mISHGINCM57ao08lfZlIH",
	"browser-name": "_3mzC3GJmXFYGQOcVyhW0wi",
	"browserName": "_3mzC3GJmXFYGQOcVyhW0wi",
	"versions": "_3YpP2lZsoglPjQpk6hH2gy",
	"version": "_1SZeIw2eQjWzUdnZZzDZQV",
	"version-active": "_31hlh1HbOKh76cm4OChTtc",
	"versionActive": "_31hlh1HbOKh76cm4OChTtc",
	"version-clickable": "_1JpJDKxqG52cn4FHm4u-yP",
	"versionClickable": "_1JpJDKxqG52cn4FHm4u-yP",
	"version-button": "_1TE8vT1U7i6e4ezOWdVweO",
	"versionButton": "_1TE8vT1U7i6e4ezOWdVweO"
};

/***/ }),
/* 122 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preact = __webpack_require__(1);

var _preactRedux = __webpack_require__(6);

var _redux = __webpack_require__(5);

var _reducers = __webpack_require__(10);

var _reducers2 = _interopRequireDefault(_reducers);

var _actions = __webpack_require__(11);

var actions = _interopRequireWildcard(_actions);

var _Browsers = __webpack_require__(4);

var _Browsers2 = _interopRequireDefault(_Browsers);

var _Sidebar = __webpack_require__(124);

var _Sidebar2 = _interopRequireDefault(_Sidebar);

var _Accordion = __webpack_require__(126);

var _Accordion2 = _interopRequireDefault(_Accordion);

var _AccordionItem = __webpack_require__(129);

var _AccordionItem2 = _interopRequireDefault(_AccordionItem);

var _Link = __webpack_require__(61);

var _Link2 = _interopRequireDefault(_Link);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DetailsPanel = function (_Component) {
  _inherits(DetailsPanel, _Component);

  function DetailsPanel() {
    _classCallCheck(this, DetailsPanel);

    return _possibleConstructorReturn(this, (DetailsPanel.__proto__ || Object.getPrototypeOf(DetailsPanel)).apply(this, arguments));
  }

  _createClass(DetailsPanel, [{
    key: '_handleSourceToggle',
    value: function _handleSourceToggle(source, event) {
      var toggleSource = this.props.toggleSource;


      toggleSource(source, event.target.checked);
    }
  }, {
    key: '_handleIssueSelect',
    value: function _handleIssueSelect(issue) {
      var _props = this.props,
          setInspectedIssue = _props.setInspectedIssue,
          tabActive = _props.tabActive;


      setInspectedIssue(issue, tabActive);
    }
  }, {
    key: '_handleStylesheetSelect',
    value: function _handleStylesheetSelect(stylesheetId) {
      var _props2 = this.props,
          setInspectedStylesheet = _props2.setInspectedStylesheet,
          tabActive = _props2.tabActive;


      setInspectedStylesheet(stylesheetId, tabActive);
    }
  }, {
    key: '_renderCssIssues',
    value: function _renderCssIssues() {
      var _this2 = this;

      var _props3 = this.props,
          data = _props3.data,
          sources = _props3.sources,
          tabActive = _props3.tabActive,
          tabs = _props3.tabs;


      if (tabActive === null) return null;

      var _tabs$tabActive$data = tabs[tabActive].data,
          browser = _tabs$tabActive$data.browser,
          issue = _tabs$tabActive$data.issue,
          issueInstance = _tabs$tabActive$data.issueInstance,
          issueCount = _tabs$tabActive$data.issueCount,
          stylesheet = _tabs$tabActive$data.stylesheet,
          version = _tabs$tabActive$data.version;

      var issues = data[browser][version];
      var issuesByStylesheet = Object.keys(issues).reduce(function (result, issueKey) {
        issues[issueKey].forEach(function (occurrence) {
          var id = occurrence.source;

          result[id] = result[id] || {};
          result[id][issueKey] = result[id][issueKey] || [];
          result[id][issueKey].push(occurrence);
        });

        return result;
      }, {});

      clearTimeout(this.timeout);

      return sources.filter(function (source) {
        return issuesByStylesheet[source.id] !== undefined;
      }).map(function (source) {
        return (0, _preact.h)(
          _Accordion2.default,
          {
            onClose: _this2._handleStylesheetSelect.bind(_this2, null),
            onOpen: _this2._handleStylesheetSelect.bind(_this2, source.id),
            open: source.id === stylesheet,
            style: 'strong',
            text: source.external ? source.id : 'Inline stylesheet #' + source.id
          },
          Object.keys(issuesByStylesheet[source.id]).map(function (name) {
            return (0, _preact.h)(
              _AccordionItem2.default,
              {
                onClick: _this2._handleIssueSelect.bind(_this2, name)
              },
              (0, _preact.h)(
                'code',
                null,
                name
              ),
              name === issue && (0, _preact.h)(
                'span',
                {
                  'class': _Sidebar2.default.issueInstance,
                  ref: function ref(el) {
                    if (!el) return;

                    el.classList.remove(_Sidebar2.default.issueInstanceHidden);

                    _this2.timeout = setTimeout(function () {
                      if (!el) return;

                      el.classList.add(_Sidebar2.default.issueInstanceHidden);
                    }, 2000);
                  }
                },
                ' ',
                issueInstance + 1,
                ' / ',
                issueCount
              )
            );
          })
        );
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props4 = this.props,
          sources = _props4.sources,
          tabActive = _props4.tabActive,
          tabs = _props4.tabs;


      var inInspector = tabActive !== null;
      var hasSources = sources && sources.length > 0;

      return (0, _preact.h)(
        'div',
        { 'class': _Sidebar2.default.sidebar },
        this._renderCssIssues(),
        tabActive === null && (0, _preact.h)(
          _Accordion2.default,
          {
            initialState: true,
            text: 'Stylesheets'
          },
          hasSources && sources.map(function (source) {
            return (0, _preact.h)(
              _AccordionItem2.default,
              {
                toggleChecked: source.enabled,
                toggleDisabled: status === 'STATUS_LOADING',
                toggleOnChange: _this3._handleSourceToggle.bind(_this3, source.id),
                type: 'toggable'
              },
              (0, _preact.h)(
                'span',
                null,
                !source.external && 'Inline stylesheet #',
                source.id
              )
            );
          }),
          !hasSources && (0, _preact.h)(
            'p',
            { 'class': _Sidebar2.default.sectionPlaceholder },
            'No stylesheets found'
          )
        )
      );
    }
  }]);

  return DetailsPanel;
}(_preact.Component);

exports.default = (0, _preactRedux.connect)(function (state) {
  return state;
}, function (dispatch) {
  return (0, _redux.bindActionCreators)(actions, dispatch);
})(DetailsPanel);

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(125);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!./Sidebar.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!./Sidebar.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, "._2Mbl7NzpPdgM93-gLbItz- {\n  display: flex;\n  width: var(--sidebar-width);\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-direction: column;\n  overflow: scroll;\n  border-left: 1px solid var(--theme-splitter);\n}\n\n._3L5Cmfhsw9Go8f0tNI0yBs {\n  display: flex;\n  padding: 5px 0;\n}\n\n.KbSaGaNRGd8IJlJyiz1ep {\n  margin-right: 10px;\n}\n\n._1aafceWjNQp_xIMFzwc6w6 {\n  border-bottom: 1px dashed transparent;\n  color: var(--theme-highlight-blue);\n  cursor: pointer;\n  font-family: var(--monospace-font-family);\n  padding-left: 10px;\n  transition: all 0.2s;\n}\n\n._1aafceWjNQp_xIMFzwc6w6:hover {\n  border-bottom-color: hsl(0, 0%, 50%);\n}\n\n._3izXT_5zLFZkawQTZRf_ze {\n  font-weight: bold;\n  background-color: #fff3d0;\n  border-radius: 4px;\n  padding: 4px;\n  transition: opacity 0.5s;\n  display: inline-block;\n  margin-left: 5px;\n  font-size: 0.8em;\n  border: 1px solid var(--theme-splitter);\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);  \n}\n\n._3qalRg4fWwSY8Q2F1pmxjN {\n  opacity: 0;\n}", ""]);

// exports
exports.locals = {
	"sidebar": "_2Mbl7NzpPdgM93-gLbItz-",
	"toggable-item": "_3L5Cmfhsw9Go8f0tNI0yBs",
	"toggableItem": "_3L5Cmfhsw9Go8f0tNI0yBs",
	"toggable-item-toggle": "KbSaGaNRGd8IJlJyiz1ep",
	"toggableItemToggle": "KbSaGaNRGd8IJlJyiz1ep",
	"issue-property": "_1aafceWjNQp_xIMFzwc6w6",
	"issueProperty": "_1aafceWjNQp_xIMFzwc6w6",
	"issue-instance": "_3izXT_5zLFZkawQTZRf_ze",
	"issueInstance": "_3izXT_5zLFZkawQTZRf_ze",
	"issue-instance-hidden": "_3qalRg4fWwSY8Q2F1pmxjN",
	"issueInstanceHidden": "_3qalRg4fWwSY8Q2F1pmxjN"
};

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preact = __webpack_require__(1);

var _Accordion = __webpack_require__(127);

var _Accordion2 = _interopRequireDefault(_Accordion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Accordion = function (_Component) {
  _inherits(Accordion, _Component);

  _createClass(Accordion, [{
    key: '_handleToggle',
    value: function _handleToggle() {
      var _props = this.props,
          initialState = _props.initialState,
          onClose = _props.onClose,
          onOpen = _props.onOpen,
          open = _props.open;


      if (initialState === undefined) {
        if (open && typeof onClose === 'function') {
          onClose();
        } else if (!open && typeof onOpen === 'function') {
          onOpen();
        }
      } else {
        this.setState({
          open: !this.state.open
        });
      }
    }
  }]);

  function Accordion(props) {
    _classCallCheck(this, Accordion);

    var _this = _possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).call(this, props));

    _this.state.open = Boolean(props.initialState);
    return _this;
  }

  _createClass(Accordion, [{
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          initialState = _props2.initialState,
          open = _props2.open,
          style = _props2.style,
          text = _props2.text;

      var isOpen = open || initialState !== undefined && this.state.open;

      var classes = [_Accordion2.default.container];

      if (style === 'strong') {
        classes.push(_Accordion2.default.containerStrong);
      }

      if (isOpen) {
        classes.push(_Accordion2.default.containerOpen);
      }

      return (0, _preact.h)(
        'div',
        { 'class': classes.join(' ') },
        (0, _preact.h)(
          'div',
          {
            'class': _Accordion2.default.head,
            onClick: this._handleToggle.bind(this)
          },
          (0, _preact.h)(
            'span',
            null,
            text
          )
        ),
        isOpen && (0, _preact.h)(
          'div',
          { 'class': _Accordion2.default.sectionBody },
          children
        )
      );
    }
  }]);

  return Accordion;
}(_preact.Component);

exports.default = Accordion;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(128);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!./Accordion.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!./Accordion.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, "._2F5ifrEGldRNaUPrtRqN2E {\n  align-items: center;\n  background-color: var(--theme-toolbar-background);\n  border-top: 1px solid var(--theme-splitter);\n  border-bottom: 1px solid var(--theme-splitter);\n  cursor: pointer;\n  display: flex;\n  height: var(--header-height);\n  padding: 6px 10px;\n  transition: all 0.2s;\n}\n\n._1oWP4CtlYMhe0dZENtDE-m._3_2AkX_OyJeaHOoFbvSQES ._2F5ifrEGldRNaUPrtRqN2E {\n  background-color: var(--theme-highlight-blue);\n  color: white;\n}\n\n._2F5ifrEGldRNaUPrtRqN2E::before {\n  content: '\\25B6';\n  padding-right: 0.5em;\n}\n\n._3_2AkX_OyJeaHOoFbvSQES > ._2F5ifrEGldRNaUPrtRqN2E::before {\n  content: '\\25BC';\n}\n\n._1oWP4CtlYMhe0dZENtDE-m ._2F5ifrEGldRNaUPrtRqN2E {\n  font-weight: bold;\n  height: calc(2 * var(--header-height));\n}\n\n._2F5ifrEGldRNaUPrtRqN2E:first-of-type {\n  border-top: none;\n}\n\n._2x-5tfQdbJvEgN-vOkOtxL {\n  border-top: none;\n}\n\n.QAb05feYxtRjcC4f_67O8:not(._3_2AkX_OyJeaHOoFbvSQES) ._2F5ifrEGldRNaUPrtRqN2E:hover {\n  background-color: var(--theme-toolbar-background-hover);\n}\n\n._1hgc7Aaww5Qyl9mKSQfMl5 {\n  padding-left: 5px;\n}", ""]);

// exports
exports.locals = {
	"head": "_2F5ifrEGldRNaUPrtRqN2E",
	"container-strong": "_1oWP4CtlYMhe0dZENtDE-m",
	"containerStrong": "_1oWP4CtlYMhe0dZENtDE-m",
	"container-open": "_3_2AkX_OyJeaHOoFbvSQES",
	"containerOpen": "_3_2AkX_OyJeaHOoFbvSQES",
	"head-first": "_2x-5tfQdbJvEgN-vOkOtxL",
	"headFirst": "_2x-5tfQdbJvEgN-vOkOtxL",
	"container": "QAb05feYxtRjcC4f_67O8",
	"body": "_1hgc7Aaww5Qyl9mKSQfMl5"
};

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preact = __webpack_require__(1);

var _AccordionItem = __webpack_require__(130);

var _AccordionItem2 = _interopRequireDefault(_AccordionItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AccordionItem = function (_Component) {
  _inherits(AccordionItem, _Component);

  function AccordionItem() {
    _classCallCheck(this, AccordionItem);

    return _possibleConstructorReturn(this, (AccordionItem.__proto__ || Object.getPrototypeOf(AccordionItem)).apply(this, arguments));
  }

  _createClass(AccordionItem, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          checked = _props.checked,
          children = _props.children,
          onClick = _props.onClick,
          toggleChecked = _props.toggleChecked,
          toggleDisabled = _props.toggleDisabled,
          toggleOnChange = _props.toggleOnChange,
          type = _props.type;


      var containerClasses = [_AccordionItem2.default.container, _AccordionItem2.default['container-' + type]];

      if (type === 'toggable') {
        return (0, _preact.h)(
          'label',
          { 'class': containerClasses.join(' ') },
          (0, _preact.h)('input', {
            checked: toggleChecked,
            'class': _AccordionItem2.default.toggle,
            disabled: toggleDisabled,
            onChange: toggleOnChange,
            type: 'checkbox'
          }),
          children
        );
      }

      return (0, _preact.h)(
        'div',
        {
          'class': _AccordionItem2.default.container,
          onClick: onClick
        },
        children
      );
    }
  }]);

  return AccordionItem;
}(_preact.Component);

exports.default = AccordionItem;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(131);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!./AccordionItem.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!./AccordionItem.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, ".WZJtGzgvWkofRhkItM7WT {\n  border-bottom: 1px solid var(--theme-splitter);\n  cursor: pointer;\n  padding: 6px 10px;\n  transition: all 0.15s ease-in-out;\n  position: relative;\n}\n\n._3-ObkiXZ2gPi5Pgd-TUx0v {\n  display: flex;\n}\n\n.WZJtGzgvWkofRhkItM7WT:hover {\n  background-color: var(--theme-toolbar-background-hover);\n}\n\n._1NHTgT8YVViuU6Dcd6wmXY {\n  margin-right: 10px;\n}", ""]);

// exports
exports.locals = {
	"container": "WZJtGzgvWkofRhkItM7WT",
	"container-toggable": "_3-ObkiXZ2gPi5Pgd-TUx0v",
	"containerToggable": "_3-ObkiXZ2gPi5Pgd-TUx0v",
	"toggle": "_1NHTgT8YVViuU6Dcd6wmXY"
};

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(133);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!./Link.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!./Link.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, "._1RbCxP1CEuf9RmSi51k-Ou {\n  border-bottom: 1px dashed transparent;\n  color: var(--theme-highlight-blue);\n  cursor: pointer;\n  text-align: left;\n  transition: all 0.2s;\n}\n\n._1RbCxP1CEuf9RmSi51k-Ou:hover {\n  border-bottom-color: var(--theme-highlight-blue);\n}", ""]);

// exports
exports.locals = {
	"link": "_1RbCxP1CEuf9RmSi51k-Ou"
};

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(135);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!./Placeholder.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!./Placeholder.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, "._1k1yKZU7FcS4X3CZ8hSJG- {\n  display: flex;\n  flex-grow: 1;\n  height: 100%;\n  align-items: center;\n}\n\n._3q3wWn15VOVlkNYrCH76Wp {\n  width: 100%;\n  text-align: center;\n  font-style: italic;\n  color: #999999;\n}", ""]);

// exports
exports.locals = {
	"container": "_1k1yKZU7FcS4X3CZ8hSJG-",
	"placeholder": "_3q3wWn15VOVlkNYrCH76Wp"
};

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preact = __webpack_require__(1);

var _preactRedux = __webpack_require__(6);

var _redux = __webpack_require__(5);

var _reducers = __webpack_require__(10);

var _reducers2 = _interopRequireDefault(_reducers);

var _actions = __webpack_require__(11);

var actions = _interopRequireWildcard(_actions);

var _Tabs = __webpack_require__(137);

var _Tabs2 = _interopRequireDefault(_Tabs);

var _Inspector = __webpack_require__(139);

var _Inspector2 = _interopRequireDefault(_Inspector);

var _TabButton = __webpack_require__(142);

var _TabButton2 = _interopRequireDefault(_TabButton);

var _Overview = __webpack_require__(145);

var _Overview2 = _interopRequireDefault(_Overview);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tabs = function (_Component) {
  _inherits(Tabs, _Component);

  function Tabs() {
    _classCallCheck(this, Tabs);

    return _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).apply(this, arguments));
  }

  _createClass(Tabs, [{
    key: '_handleTabClose',
    value: function _handleTabClose(index) {
      this.props.closeTab(index);
    }
  }, {
    key: '_handleTabSelect',
    value: function _handleTabSelect(index) {
      this.props.selectTab(index);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          status = _props.status,
          tabActive = _props.tabActive,
          tabs = _props.tabs;


      return (0, _preact.h)(
        'div',
        { 'class': _Tabs2.default.container },
        (0, _preact.h)(
          'nav',
          { 'class': _Tabs2.default.nav },
          (0, _preact.h)(
            _TabButton2.default,
            {
              active: tabActive === null,
              fixed: true,
              onClick: this._handleTabSelect.bind(this, null)
            },
            (0, _preact.h)(
              'strong',
              null,
              'Overview'
            )
          ),
          tabs.map(function (tab, index) {
            return (0, _preact.h)(
              _TabButton2.default,
              {
                active: index === tabActive,
                onClick: _this2._handleTabSelect.bind(_this2, index),
                onClose: _this2._handleTabClose.bind(_this2, index)
              },
              tab.title
            );
          })
        ),
        (0, _preact.h)(
          'div',
          { 'class': _Tabs2.default.content },
          tabActive === null && (0, _preact.h)(_Overview2.default, null),
          tabActive !== null && (0, _preact.h)(_Inspector2.default, null)
        )
      );
    }
  }]);

  return Tabs;
}(_preact.Component);

exports.default = (0, _preactRedux.connect)(function (state) {
  return state;
}, function (dispatch) {
  return (0, _redux.bindActionCreators)(actions, dispatch);
})(Tabs);

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(138);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!./Tabs.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!./Tabs.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, ".NjO-r8Sa4F9liIHaSZVbI {\n  flex-grow: 1;\n  width: calc(100vw - var(--sidebar-width));\n}\n\n._3a8ByoRiX0kw1-tZgXi9d5 {\n  background-color: var(--theme-toolbar-background);\n  display: flex;\n  border-bottom: 1px solid var(--theme-splitter);\n  height: var(--header-height);\n  padding: 4px 10px 0 10px;\n}\n\n._3JD4i_1xduY_2Ugl8AANAX {\n  height: calc(100% - var(--header-height));\n  padding: 10px 0;\n}", ""]);

// exports
exports.locals = {
	"container": "NjO-r8Sa4F9liIHaSZVbI",
	"nav": "_3a8ByoRiX0kw1-tZgXi9d5",
	"content": "_3JD4i_1xduY_2Ugl8AANAX"
};

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preact = __webpack_require__(1);

var _preactRedux = __webpack_require__(6);

var _redux = __webpack_require__(5);

var _reducers = __webpack_require__(10);

var _reducers2 = _interopRequireDefault(_reducers);

var _actions = __webpack_require__(11);

var actions = _interopRequireWildcard(_actions);

var _Inspector = __webpack_require__(140);

var _Inspector2 = _interopRequireDefault(_Inspector);

var _Link = __webpack_require__(61);

var _Link2 = _interopRequireDefault(_Link);

var _Placeholder = __webpack_require__(62);

var _Placeholder2 = _interopRequireDefault(_Placeholder);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Inspector = function (_Component) {
  _inherits(Inspector, _Component);

  _createClass(Inspector, [{
    key: '_handleLineToggle',
    value: function _handleLineToggle(number) {
      var openLines = this.state.openLines;


      this.setState({
        openLines: Object.assign({}, openLines, _defineProperty({}, number, !Boolean(openLines[number])))
      });
    }
  }]);

  function Inspector(props) {
    _classCallCheck(this, Inspector);

    var _this = _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).call(this, props));

    _this.state.openLines = {};
    return _this;
  }

  _createClass(Inspector, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          data = _props.data,
          stylesheets = _props.stylesheets,
          tabActive = _props.tabActive,
          tabs = _props.tabs;
      var openLines = this.state.openLines;
      var _tabs$tabActive$data = tabs[tabActive].data,
          browser = _tabs$tabActive$data.browser,
          issue = _tabs$tabActive$data.issue,
          issueInstance = _tabs$tabActive$data.issueInstance,
          stylesheet = _tabs$tabActive$data.stylesheet,
          version = _tabs$tabActive$data.version;


      var issuesByKey = {};
      var issuesByLine = {};

      if (!stylesheet) {
        return (0, _preact.h)(
          _Placeholder2.default,
          null,
          'Select a stylesheet from the sidebar'
        );
      }

      var issues = data[browser][version];

      Object.keys(issues).forEach(function (issueKey) {
        issuesByKey[issueKey] = 0;

        issues[issueKey].filter(function (occurrence) {
          return occurrence.source === stylesheet;
        }).forEach(function (occurrence) {
          var startLine = occurrence.instance.start.line;

          // 0-index so it's more convenient for Array.map
          issuesByLine[startLine - 1] = issuesByLine[startLine - 1] || {
            instance: issuesByKey[issueKey]++,
            issueKey: issueKey,
            lines: occurrence.instance.end.line - startLine
          };
        });
      });

      var propertyIndex = 0;
      var scrolled = false;

      return (0, _preact.h)(
        'div',
        {
          'class': _Inspector2.default.container,
          ref: function ref(el) {
            return _this2.containerRef = el;
          }
        },
        (0, _preact.h)(
          'div',
          { 'class': _Inspector2.default.lineContainer },
          stylesheet && stylesheets[stylesheet].map(function (line, number) {
            if (issuesByLine[number]) {
              var lineIssue = issuesByLine[number];
              var issueData = data[browser][version][lineIssue.issueKey].filter(function (issue) {
                return issue.source === stylesheet;
              })[lineIssue.instance];

              var lineClasses = [_Inspector2.default.lineContents, _Inspector2.default.lineHighlight];

              if (openLines[number]) {
                lineClasses.push(_Inspector2.default.lineOpen);
              }

              return (0, _preact.h)(
                'div',
                {
                  'class': _Inspector2.default.line,
                  ref: function ref(el) {
                    if (el && _this2.containerRef && !scrolled && lineIssue.issueKey === issue && lineIssue.instance === issueInstance) {
                      scrolled = true;

                      _this2.containerRef.scrollTop = el.offsetTop - 60;
                    }
                  }
                },
                (0, _preact.h)(
                  'div',
                  {
                    'class': lineClasses.join(' '),
                    onClick: _this2._handleLineToggle.bind(_this2, number)
                  },
                  (0, _preact.h)('pre', { dangerouslySetInnerHTML: { __html: line.length > 0 ? line : '&nbsp;' } })
                ),
                openLines[number] && (0, _preact.h)(
                  'div',
                  { 'class': _Inspector2.default.lineBody },
                  issueData.missingPrefixes && (0, _preact.h)(
                    'p',
                    null,
                    (0, _preact.h)(
                      'strong',
                      null,
                      'Missing vendor prefixes: '
                    ),
                    issueData.missingPrefixes.map(function (p) {
                      return (0, _preact.h)(
                        'code',
                        null,
                        p
                      );
                    })
                  ),
                  (0, _preact.h)(
                    'p',
                    null,
                    (0, _preact.h)(
                      'strong',
                      null,
                      'Source:'
                    ),
                    ' ',
                    issueData.source
                  ),
                  (0, _preact.h)(
                    'p',
                    null,
                    (0, _preact.h)(
                      'strong',
                      null,
                      'Position:'
                    ),
                    ' ',
                    function () {
                      if (issueData.instance.start.line === issueData.instance.end.line) {
                        return 'Line ' + issueData.instance.start.line;
                      } else {
                        return 'Lines ' + issueData.instance.start.line + '-' + issueData.instance.end.line;
                      }
                    }(),
                    ', columns ',
                    issueData.instance.start.column,
                    '-',
                    issueData.instance.end.column
                  ),
                  Boolean(issueData.data.__compat.mdn_url) && (0, _preact.h)(
                    'p',
                    null,
                    (0, _preact.h)(
                      'strong',
                      null,
                      'Documentation: '
                    ),
                    (0, _preact.h)(
                      _Link2.default,
                      { href: issueData.data.__compat.mdn_url },
                      'Open MDN page'
                    )
                  )
                )
              );
            } else {
              return (0, _preact.h)(
                'div',
                {
                  'class': _Inspector2.default.line
                },
                (0, _preact.h)('pre', { dangerouslySetInnerHTML: { __html: line.length > 0 ? line : '&nbsp;' } })
              );
            }
          })
        )
      );
    }
  }]);

  return Inspector;
}(_preact.Component);

exports.default = (0, _preactRedux.connect)(function (state) {
  return state;
}, function (dispatch) {
  return (0, _redux.bindActionCreators)(actions, dispatch);
})(Inspector);

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(141);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!./Inspector.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!./Inspector.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, ".kvs71K8Ibfqid51qfJvJI {\n  width: 100%;\n  height: 100%;\n  overflow: scroll;\n}\n\n._2JOEALW8sk_TKWPRVj7Yt7 {\n  display: table;\n}\n\n._9wzfcedADahEaI0jNHjIf {\n  display: table-row;\n}\n\n.lf7vYNwym6et0KKVL9zim {\n  background-color: #fff3d0;\n}\n\n._1hnaRyoo7UIFKFRM3Exj0E {\n  background-color: var(--theme-toolbar-background);\n  border-style: solid;\n  border-color: var(--theme-splitter);\n  border-width: 1px 0;\n  margin: 0 0 5px 0;\n  padding: 10px 22px;\n}\n\n._1k_WZb9ZdI-eUA7nFQ5Yhm {\n  position: relative;\n}\n\n._1k_WZb9ZdI-eUA7nFQ5Yhm::before {\n  position: absolute;\n  content: '\\25B6';\n  cursor: pointer;\n  padding-right: 0.5em;\n  left: 5px;\n  top: -1px;\n}\n\n._1x0cM1FgaGAXvwibe0VU4s._1k_WZb9ZdI-eUA7nFQ5Yhm::before {\n  content: '\\25BC';\n}\n\n._9wzfcedADahEaI0jNHjIf pre {\n  margin: 0;\n  padding: 0 22px;\n}\n", ""]);

// exports
exports.locals = {
	"container": "kvs71K8Ibfqid51qfJvJI",
	"line-container": "_2JOEALW8sk_TKWPRVj7Yt7",
	"lineContainer": "_2JOEALW8sk_TKWPRVj7Yt7",
	"line": "_9wzfcedADahEaI0jNHjIf",
	"line-highlight": "lf7vYNwym6et0KKVL9zim",
	"lineHighlight": "lf7vYNwym6et0KKVL9zim",
	"line-body": "_1hnaRyoo7UIFKFRM3Exj0E",
	"lineBody": "_1hnaRyoo7UIFKFRM3Exj0E",
	"line-contents": "_1k_WZb9ZdI-eUA7nFQ5Yhm",
	"lineContents": "_1k_WZb9ZdI-eUA7nFQ5Yhm",
	"line-open": "_1x0cM1FgaGAXvwibe0VU4s",
	"lineOpen": "_1x0cM1FgaGAXvwibe0VU4s"
};

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preact = __webpack_require__(1);

var _TabButton = __webpack_require__(143);

var _TabButton2 = _interopRequireDefault(_TabButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TabButton = function (_Component) {
  _inherits(TabButton, _Component);

  function TabButton() {
    _classCallCheck(this, TabButton);

    return _possibleConstructorReturn(this, (TabButton.__proto__ || Object.getPrototypeOf(TabButton)).apply(this, arguments));
  }

  _createClass(TabButton, [{
    key: '_handleTabClose',
    value: function _handleTabClose(event) {
      event.stopPropagation();

      this.props.onClose();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          active = _props.active,
          children = _props.children,
          fixed = _props.fixed,
          onClick = _props.onClick;


      var containerClasses = [_TabButton2.default.button];
      var textClasses = [_TabButton2.default.text];

      if (active) {
        containerClasses.push(_TabButton2.default.buttonActive);
      }

      if (!fixed) {
        textClasses.push(_TabButton2.default.textClosable);
      }

      return (0, _preact.h)(
        'div',
        {
          'class': containerClasses.join(' '),
          onClick: onClick
        },
        (0, _preact.h)(
          'span',
          { 'class': textClasses.join(' ') },
          children
        ),
        !fixed && (0, _preact.h)(
          'button',
          {
            'class': _TabButton2.default.icon,
            onClick: this._handleTabClose.bind(this)
          },
          (0, _preact.h)(
            'svg',
            { viewBox: '0 0 6 6', version: '1.1', xmlns: 'http://www.w3.org/2000/svg' },
            (0, _preact.h)('path', {
              d: 'M1.35191454,5.27895256 L5.31214367,1.35518468 C5.50830675,1.16082764 5.50977084,0.844248536 5.3154138,0.648085456 C5.12105677,0.451922377 4.80447766,0.450458288 4.60831458,0.644815324 L0.648085456,4.56858321 C0.451922377,4.76294025 0.450458288,5.07951935 0.644815324,5.27568243 C0.83917236,5.47184551 1.15575146,5.4733096 1.35191454,5.27895256 L1.35191454,5.27895256 Z',
              stroke: 'none',
              fill: '#696969',
              fillRule: 'evenodd'
            }),
            (0, _preact.h)('path', {
              d: 'M5.31214367,4.56858321 L1.35191454,0.644815324 C1.15575146,0.450458288 0.83917236,0.451922377 0.644815324,0.648085456 C0.450458288,0.844248536 0.451922377,1.16082764 0.648085456,1.35518468 L4.60831458,5.27895256 C4.80447766,5.4733096 5.12105677,5.47184551 5.3154138,5.27568243 C5.50977084,5.07951935 5.50830675,4.76294025 5.31214367,4.56858321 L5.31214367,4.56858321 Z',
              stroke: 'none',
              fill: '#696969',
              fillRule: 'evenodd'
            })
          )
        )
      );
    }
  }]);

  return TabButton;
}(_preact.Component);

exports.default = TabButton;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(144);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!./TabButton.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!./TabButton.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, "._3Rhbx6FmnLSY3nEgMXnJw- {\n  display: flex;\n  margin: 0 4px -1px 4px;\n  padding: 3px 14px;\n  border-style: solid;\n  border-color: transparent;\n  border-width: 1px 1px 0 1px;\n  position: relative;\n  transition: all 0.15s ease-in-out;\n  -moz-user-select: none;\n  user-select: none;\n}\n\n._1n_SRUNswnvJ4aHGUAKVW5 {\n  background-color: white;\n  border-color: var(--theme-splitter);\n}\n\n._3Rhbx6FmnLSY3nEgMXnJw-:hover {\n  background-color: var(--theme-toolbar-background-alt);\n  border-color: var(--theme-splitter);\n}\n\n._3Rhbx6FmnLSY3nEgMXnJw- path {\n  fill: #ccd1d5;\n}\n\n._1rxctsVB6zBN9w1K-hj-95 {\n  width: 14px;\n  height: 14px;\n  transition: all 0.15s ease-in-out;\n  border: 1px solid transparent;\n  border-radius: 2px;\n  padding: 0;\n  margin-top: 0;\n  display: block;\n  justify-content: center;\n  vertical-align: middle;\n  position: absolute;\n  right: 5px;\n}\n\n._1rxctsVB6zBN9w1K-hj-95 svg {\n  width: 8px;\n}\n\n._1rxctsVB6zBN9w1K-hj-95:hover {\n  background: var(--theme-highlight-blue);\n}\n\n._1rxctsVB6zBN9w1K-hj-95:hover path {\n  fill: white;\n}\n\n._11kFZ4At9rsxNlPqBlfKBQ {\n  padding: 11px;\n  margin-right: 7px;\n  width: 27px;\n  height: 40px;\n}\n\n._11kFZ4At9rsxNlPqBlfKBQ ._1rxctsVB6zBN9w1K-hj-95 {\n  width: 16px;\n  height: 16px;\n}\n\n._11kFZ4At9rsxNlPqBlfKBQ ._1rxctsVB6zBN9w1K-hj-95 svg {\n  width: 9px;\n}\n\n._2ysuRts7fAzaVR6rUrYfhN {\n  display: inline-block;\n  vertical-align: middle;\n}\n\n._2hUXYzrLdb91bt9l6Y3-CP {\n  margin-right: 10px;\n}", ""]);

// exports
exports.locals = {
	"button": "_3Rhbx6FmnLSY3nEgMXnJw-",
	"button-active": "_1n_SRUNswnvJ4aHGUAKVW5",
	"buttonActive": "_1n_SRUNswnvJ4aHGUAKVW5",
	"icon": "_1rxctsVB6zBN9w1K-hj-95",
	"button-big": "_11kFZ4At9rsxNlPqBlfKBQ",
	"buttonBig": "_11kFZ4At9rsxNlPqBlfKBQ",
	"text": "_2ysuRts7fAzaVR6rUrYfhN",
	"text-closable": "_2hUXYzrLdb91bt9l6Y3-CP",
	"textClosable": "_2hUXYzrLdb91bt9l6Y3-CP"
};

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preact = __webpack_require__(1);

var _Overview = __webpack_require__(146);

var _Overview2 = _interopRequireDefault(_Overview);

var _Browser = __webpack_require__(60);

var _Browser2 = _interopRequireDefault(_Browser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Overview = function (_Component) {
  _inherits(Overview, _Component);

  function Overview() {
    _classCallCheck(this, Overview);

    return _possibleConstructorReturn(this, (Overview.__proto__ || Object.getPrototypeOf(Overview)).apply(this, arguments));
  }

  _createClass(Overview, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          active = _props.active,
          children = _props.children,
          fixed = _props.fixed;


      return (0, _preact.h)(
        'div',
        { 'class': _Overview2.default.container },
        (0, _preact.h)(_Browser2.default, {
          browser: 'chrome'
        }),
        (0, _preact.h)(_Browser2.default, {
          browser: 'opera'
        }),
        (0, _preact.h)(_Browser2.default, {
          browser: 'firefox'
        }),
        (0, _preact.h)(_Browser2.default, {
          browser: 'ie'
        }),
        (0, _preact.h)(_Browser2.default, {
          browser: 'edge'
        })
      );
    }
  }]);

  return Overview;
}(_preact.Component);

exports.default = Overview;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(147);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!./Overview.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!./Overview.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, "._3hvjPPLXmlhFohbYtmNqJC {\n  display: flex;\n  flex-grow: 1;\n  overflow: scroll;\n  padding: 10px;\n  align-items: flex-start;\n  height: 100%;  \n}", ""]);

// exports
exports.locals = {
	"container": "_3hvjPPLXmlhFohbYtmNqJC"
};

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(149);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--1-1!./Panel.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--1-1!./Panel.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, "._2Msiv1KKMm-WGcD2DBk9rW {\n  display: flex;\n  background-color: white;\n  height: 100vh;\n  padding: 0;\n}\n\n.Vh0jgLEKCQe4oPUEj-ERG {\n  display: flex;\n  flex-grow: 1;\n  overflow: scroll;\n  padding: 10px;\n  align-items: flex-start;\n  height: 100%;\n}", ""]);

// exports
exports.locals = {
	"panel": "_2Msiv1KKMm-WGcD2DBk9rW",
	"browsers": "Vh0jgLEKCQe4oPUEj-ERG"
};

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(151);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(3)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../node_modules/css-loader/index.js??ref--1-1!./index.css", function() {
			var newContent = require("!!../node_modules/css-loader/index.js??ref--1-1!./index.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)(undefined);
// imports


// module
exports.push([module.i, "html, body {\n  box-sizing: border-box;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 11px;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbutton {\n  background: none;\n  border: 0;\n  padding: 0;\n  font: inherit;\n}\n\nstrong {\n  font-weight: bold;\n}\n\ncode {\n  font-family: var(--monospace-font-family);\n}\n\n:root {\n  --theme-toolbar-background: #F9F9FA;\n  --theme-toolbar-background-alt: #F5F5F5;\n  --theme-toolbar-background-hover: rgba(221, 225, 228, 0.66);\n  --theme-splitter: #E0E0E1;\n  --monospace-font-family: Menlo, monospace;\n  --theme-highlight-blue: #0074e8;\n  --theme-highlight-red: #F06F06;\n  --header-height: 28px;\n  --sidebar-width: 300px;\n}", ""]);

// exports


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,